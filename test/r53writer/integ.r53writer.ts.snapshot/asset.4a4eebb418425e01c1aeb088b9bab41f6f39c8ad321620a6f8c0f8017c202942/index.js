"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/tslib/tslib.es6.mjs
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __addDisposableResource: () => __addDisposableResource,
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __disposeResources: () => __disposeResources,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
  default: () => tslib_es6_default
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function")
      throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn)
      context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access)
      context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done)
        throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0)
        continue;
      if (result === null || typeof result !== "object")
        throw new TypeError("Object expected");
      if (_ = accept(result.get))
        descriptor.get = _;
      if (_ = accept(result.set))
        descriptor.set = _;
      if (_ = accept(result.init))
        initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field")
        initializers.unshift(_);
      else
        descriptor[key] = _;
    }
  }
  if (target)
    Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol")
    name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m)
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
      __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
        __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function")
      throw new TypeError("Object expected.");
    var dispose;
    if (async) {
      if (!Symbol.asyncDispose)
        throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose)
        throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
    }
    if (typeof dispose !== "function")
      throw new TypeError("Object not disposable.");
    env.stack.push({ value, dispose, async });
  } else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}
function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async)
          return Promise.resolve(result).then(next, function(e) {
            fail(e);
            return next();
          });
      } catch (e) {
        fail(e);
      }
    }
    if (env.hasError)
      throw env.error;
  }
  return next();
}
var extendStatics, __assign, __createBinding, __setModuleDefault, _SuppressedError, tslib_es6_default;
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.mjs"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign3(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    tslib_es6_default = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources
    };
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/configurations.js
var require_configurations = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = void 0;
    var ENV_ENDPOINT_DISCOVERY = ["AWS_ENABLE_ENDPOINT_DISCOVERY", "AWS_ENDPOINT_DISCOVERY_ENABLED"];
    var CONFIG_ENDPOINT_DISCOVERY = "endpoint_discovery_enabled";
    var isFalsy = (value) => ["false", "0"].indexOf(value) >= 0;
    exports.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        for (let i = 0; i < ENV_ENDPOINT_DISCOVERY.length; i++) {
          const envKey = ENV_ENDPOINT_DISCOVERY[i];
          if (envKey in env) {
            const value = env[envKey];
            if (value === "") {
              throw Error(`Environment variable ${envKey} can't be empty of undefined, got "${value}"`);
            }
            return !isFalsy(value);
          }
        }
      },
      configFileSelector: (profile) => {
        if (CONFIG_ENDPOINT_DISCOVERY in profile) {
          const value = profile[CONFIG_ENDPOINT_DISCOVERY];
          if (value === void 0) {
            throw Error(`Shared config entry ${CONFIG_ENDPOINT_DISCOVERY} can't be undefined, got "${value}"`);
          }
          return !isFalsy(value);
        }
      },
      default: void 0
    };
  }
});

// node_modules/@smithy/protocol-http/dist-cjs/extensions/httpExtensionConfiguration.js
var require_httpExtensionConfiguration = __commonJS({
  "node_modules/@smithy/protocol-http/dist-cjs/extensions/httpExtensionConfiguration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveHttpHandlerRuntimeConfig = exports.getHttpHandlerExtensionConfiguration = void 0;
    var getHttpHandlerExtensionConfiguration = (runtimeConfig) => {
      let httpHandler = runtimeConfig.httpHandler;
      return {
        setHttpHandler(handler2) {
          httpHandler = handler2;
        },
        httpHandler() {
          return httpHandler;
        },
        updateHttpClientConfig(key, value) {
          httpHandler.updateHttpClientConfig(key, value);
        },
        httpHandlerConfigs() {
          return httpHandler.httpHandlerConfigs();
        }
      };
    };
    exports.getHttpHandlerExtensionConfiguration = getHttpHandlerExtensionConfiguration;
    var resolveHttpHandlerRuntimeConfig = (httpHandlerExtensionConfiguration) => {
      return {
        httpHandler: httpHandlerExtensionConfiguration.httpHandler()
      };
    };
    exports.resolveHttpHandlerRuntimeConfig = resolveHttpHandlerRuntimeConfig;
  }
});

// node_modules/@smithy/protocol-http/dist-cjs/extensions/index.js
var require_extensions = __commonJS({
  "node_modules/@smithy/protocol-http/dist-cjs/extensions/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_httpExtensionConfiguration(), exports);
  }
});

// node_modules/@smithy/types/dist-cjs/abort.js
var require_abort = __commonJS({
  "node_modules/@smithy/types/dist-cjs/abort.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/auth.js
var require_auth = __commonJS({
  "node_modules/@smithy/types/dist-cjs/auth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpAuthLocation = void 0;
    var HttpAuthLocation;
    (function(HttpAuthLocation2) {
      HttpAuthLocation2["HEADER"] = "header";
      HttpAuthLocation2["QUERY"] = "query";
    })(HttpAuthLocation = exports.HttpAuthLocation || (exports.HttpAuthLocation = {}));
  }
});

// node_modules/@smithy/types/dist-cjs/blob/blob-payload-input-types.js
var require_blob_payload_input_types = __commonJS({
  "node_modules/@smithy/types/dist-cjs/blob/blob-payload-input-types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/checksum.js
var require_checksum = __commonJS({
  "node_modules/@smithy/types/dist-cjs/checksum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/client.js
var require_client = __commonJS({
  "node_modules/@smithy/types/dist-cjs/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/command.js
var require_command = __commonJS({
  "node_modules/@smithy/types/dist-cjs/command.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/connection/config.js
var require_config = __commonJS({
  "node_modules/@smithy/types/dist-cjs/connection/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/connection/manager.js
var require_manager = __commonJS({
  "node_modules/@smithy/types/dist-cjs/connection/manager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/connection/pool.js
var require_pool = __commonJS({
  "node_modules/@smithy/types/dist-cjs/connection/pool.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/connection/index.js
var require_connection = __commonJS({
  "node_modules/@smithy/types/dist-cjs/connection/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_config(), exports);
    tslib_1.__exportStar(require_manager(), exports);
    tslib_1.__exportStar(require_pool(), exports);
  }
});

// node_modules/@smithy/types/dist-cjs/crypto.js
var require_crypto = __commonJS({
  "node_modules/@smithy/types/dist-cjs/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/encode.js
var require_encode = __commonJS({
  "node_modules/@smithy/types/dist-cjs/encode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/endpoint.js
var require_endpoint = __commonJS({
  "node_modules/@smithy/types/dist-cjs/endpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointURLScheme = void 0;
    var EndpointURLScheme;
    (function(EndpointURLScheme2) {
      EndpointURLScheme2["HTTP"] = "http";
      EndpointURLScheme2["HTTPS"] = "https";
    })(EndpointURLScheme = exports.EndpointURLScheme || (exports.EndpointURLScheme = {}));
  }
});

// node_modules/@smithy/types/dist-cjs/endpoints/EndpointRuleObject.js
var require_EndpointRuleObject = __commonJS({
  "node_modules/@smithy/types/dist-cjs/endpoints/EndpointRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/endpoints/ErrorRuleObject.js
var require_ErrorRuleObject = __commonJS({
  "node_modules/@smithy/types/dist-cjs/endpoints/ErrorRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/endpoints/RuleSetObject.js
var require_RuleSetObject = __commonJS({
  "node_modules/@smithy/types/dist-cjs/endpoints/RuleSetObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/endpoints/shared.js
var require_shared = __commonJS({
  "node_modules/@smithy/types/dist-cjs/endpoints/shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/endpoints/TreeRuleObject.js
var require_TreeRuleObject = __commonJS({
  "node_modules/@smithy/types/dist-cjs/endpoints/TreeRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/endpoints/index.js
var require_endpoints = __commonJS({
  "node_modules/@smithy/types/dist-cjs/endpoints/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EndpointRuleObject(), exports);
    tslib_1.__exportStar(require_ErrorRuleObject(), exports);
    tslib_1.__exportStar(require_RuleSetObject(), exports);
    tslib_1.__exportStar(require_shared(), exports);
    tslib_1.__exportStar(require_TreeRuleObject(), exports);
  }
});

// node_modules/@smithy/types/dist-cjs/eventStream.js
var require_eventStream = __commonJS({
  "node_modules/@smithy/types/dist-cjs/eventStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/extensions/checksum.js
var require_checksum2 = __commonJS({
  "node_modules/@smithy/types/dist-cjs/extensions/checksum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveChecksumRuntimeConfig = exports.getChecksumConfiguration = exports.AlgorithmId = void 0;
    var AlgorithmId;
    (function(AlgorithmId2) {
      AlgorithmId2["MD5"] = "md5";
      AlgorithmId2["CRC32"] = "crc32";
      AlgorithmId2["CRC32C"] = "crc32c";
      AlgorithmId2["SHA1"] = "sha1";
      AlgorithmId2["SHA256"] = "sha256";
    })(AlgorithmId = exports.AlgorithmId || (exports.AlgorithmId = {}));
    var getChecksumConfiguration = (runtimeConfig) => {
      const checksumAlgorithms = [];
      if (runtimeConfig.sha256 !== void 0) {
        checksumAlgorithms.push({
          algorithmId: () => AlgorithmId.SHA256,
          checksumConstructor: () => runtimeConfig.sha256
        });
      }
      if (runtimeConfig.md5 != void 0) {
        checksumAlgorithms.push({
          algorithmId: () => AlgorithmId.MD5,
          checksumConstructor: () => runtimeConfig.md5
        });
      }
      return {
        _checksumAlgorithms: checksumAlgorithms,
        addChecksumAlgorithm(algo) {
          this._checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return this._checksumAlgorithms;
        }
      };
    };
    exports.getChecksumConfiguration = getChecksumConfiguration;
    var resolveChecksumRuntimeConfig = (clientConfig) => {
      const runtimeConfig = {};
      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    };
    exports.resolveChecksumRuntimeConfig = resolveChecksumRuntimeConfig;
  }
});

// node_modules/@smithy/types/dist-cjs/extensions/defaultClientConfiguration.js
var require_defaultClientConfiguration = __commonJS({
  "node_modules/@smithy/types/dist-cjs/extensions/defaultClientConfiguration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveDefaultRuntimeConfig = exports.getDefaultClientConfiguration = void 0;
    var checksum_1 = require_checksum2();
    var getDefaultClientConfiguration = (runtimeConfig) => {
      return {
        ...(0, checksum_1.getChecksumConfiguration)(runtimeConfig)
      };
    };
    exports.getDefaultClientConfiguration = getDefaultClientConfiguration;
    var resolveDefaultRuntimeConfig = (config) => {
      return {
        ...(0, checksum_1.resolveChecksumRuntimeConfig)(config)
      };
    };
    exports.resolveDefaultRuntimeConfig = resolveDefaultRuntimeConfig;
  }
});

// node_modules/@smithy/types/dist-cjs/extensions/defaultExtensionConfiguration.js
var require_defaultExtensionConfiguration = __commonJS({
  "node_modules/@smithy/types/dist-cjs/extensions/defaultExtensionConfiguration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/extensions/index.js
var require_extensions2 = __commonJS({
  "node_modules/@smithy/types/dist-cjs/extensions/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AlgorithmId = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_defaultClientConfiguration(), exports);
    tslib_1.__exportStar(require_defaultExtensionConfiguration(), exports);
    var checksum_1 = require_checksum2();
    Object.defineProperty(exports, "AlgorithmId", { enumerable: true, get: function() {
      return checksum_1.AlgorithmId;
    } });
  }
});

// node_modules/@smithy/types/dist-cjs/http.js
var require_http = __commonJS({
  "node_modules/@smithy/types/dist-cjs/http.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FieldPosition = void 0;
    var FieldPosition;
    (function(FieldPosition2) {
      FieldPosition2[FieldPosition2["HEADER"] = 0] = "HEADER";
      FieldPosition2[FieldPosition2["TRAILER"] = 1] = "TRAILER";
    })(FieldPosition = exports.FieldPosition || (exports.FieldPosition = {}));
  }
});

// node_modules/@smithy/types/dist-cjs/identity/awsCredentialIdentity.js
var require_awsCredentialIdentity = __commonJS({
  "node_modules/@smithy/types/dist-cjs/identity/awsCredentialIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/identity/identity.js
var require_identity = __commonJS({
  "node_modules/@smithy/types/dist-cjs/identity/identity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/identity/index.js
var require_identity2 = __commonJS({
  "node_modules/@smithy/types/dist-cjs/identity/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_awsCredentialIdentity(), exports);
    tslib_1.__exportStar(require_identity(), exports);
  }
});

// node_modules/@smithy/types/dist-cjs/logger.js
var require_logger = __commonJS({
  "node_modules/@smithy/types/dist-cjs/logger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/middleware.js
var require_middleware = __commonJS({
  "node_modules/@smithy/types/dist-cjs/middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SMITHY_CONTEXT_KEY = void 0;
    exports.SMITHY_CONTEXT_KEY = "__smithy_context";
  }
});

// node_modules/@smithy/types/dist-cjs/pagination.js
var require_pagination = __commonJS({
  "node_modules/@smithy/types/dist-cjs/pagination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/profile.js
var require_profile = __commonJS({
  "node_modules/@smithy/types/dist-cjs/profile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/response.js
var require_response = __commonJS({
  "node_modules/@smithy/types/dist-cjs/response.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/retry.js
var require_retry = __commonJS({
  "node_modules/@smithy/types/dist-cjs/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/serde.js
var require_serde = __commonJS({
  "node_modules/@smithy/types/dist-cjs/serde.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/shapes.js
var require_shapes = __commonJS({
  "node_modules/@smithy/types/dist-cjs/shapes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/signature.js
var require_signature = __commonJS({
  "node_modules/@smithy/types/dist-cjs/signature.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/stream.js
var require_stream = __commonJS({
  "node_modules/@smithy/types/dist-cjs/stream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/streaming-payload/streaming-blob-common-types.js
var require_streaming_blob_common_types = __commonJS({
  "node_modules/@smithy/types/dist-cjs/streaming-payload/streaming-blob-common-types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/streaming-payload/streaming-blob-payload-input-types.js
var require_streaming_blob_payload_input_types = __commonJS({
  "node_modules/@smithy/types/dist-cjs/streaming-payload/streaming-blob-payload-input-types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/streaming-payload/streaming-blob-payload-output-types.js
var require_streaming_blob_payload_output_types = __commonJS({
  "node_modules/@smithy/types/dist-cjs/streaming-payload/streaming-blob-payload-output-types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/transfer.js
var require_transfer = __commonJS({
  "node_modules/@smithy/types/dist-cjs/transfer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RequestHandlerProtocol = void 0;
    var RequestHandlerProtocol;
    (function(RequestHandlerProtocol2) {
      RequestHandlerProtocol2["HTTP_0_9"] = "http/0.9";
      RequestHandlerProtocol2["HTTP_1_0"] = "http/1.0";
      RequestHandlerProtocol2["TDS_8_0"] = "tds/8.0";
    })(RequestHandlerProtocol = exports.RequestHandlerProtocol || (exports.RequestHandlerProtocol = {}));
  }
});

// node_modules/@smithy/types/dist-cjs/transform/client-payload-blob-type-narrow.js
var require_client_payload_blob_type_narrow = __commonJS({
  "node_modules/@smithy/types/dist-cjs/transform/client-payload-blob-type-narrow.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/transform/type-transform.js
var require_type_transform = __commonJS({
  "node_modules/@smithy/types/dist-cjs/transform/type-transform.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/uri.js
var require_uri = __commonJS({
  "node_modules/@smithy/types/dist-cjs/uri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/util.js
var require_util = __commonJS({
  "node_modules/@smithy/types/dist-cjs/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/waiter.js
var require_waiter = __commonJS({
  "node_modules/@smithy/types/dist-cjs/waiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  "node_modules/@smithy/types/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_abort(), exports);
    tslib_1.__exportStar(require_auth(), exports);
    tslib_1.__exportStar(require_blob_payload_input_types(), exports);
    tslib_1.__exportStar(require_checksum(), exports);
    tslib_1.__exportStar(require_client(), exports);
    tslib_1.__exportStar(require_command(), exports);
    tslib_1.__exportStar(require_connection(), exports);
    tslib_1.__exportStar(require_crypto(), exports);
    tslib_1.__exportStar(require_encode(), exports);
    tslib_1.__exportStar(require_endpoint(), exports);
    tslib_1.__exportStar(require_endpoints(), exports);
    tslib_1.__exportStar(require_eventStream(), exports);
    tslib_1.__exportStar(require_extensions2(), exports);
    tslib_1.__exportStar(require_http(), exports);
    tslib_1.__exportStar(require_identity2(), exports);
    tslib_1.__exportStar(require_logger(), exports);
    tslib_1.__exportStar(require_middleware(), exports);
    tslib_1.__exportStar(require_pagination(), exports);
    tslib_1.__exportStar(require_profile(), exports);
    tslib_1.__exportStar(require_response(), exports);
    tslib_1.__exportStar(require_retry(), exports);
    tslib_1.__exportStar(require_serde(), exports);
    tslib_1.__exportStar(require_shapes(), exports);
    tslib_1.__exportStar(require_signature(), exports);
    tslib_1.__exportStar(require_stream(), exports);
    tslib_1.__exportStar(require_streaming_blob_common_types(), exports);
    tslib_1.__exportStar(require_streaming_blob_payload_input_types(), exports);
    tslib_1.__exportStar(require_streaming_blob_payload_output_types(), exports);
    tslib_1.__exportStar(require_transfer(), exports);
    tslib_1.__exportStar(require_client_payload_blob_type_narrow(), exports);
    tslib_1.__exportStar(require_type_transform(), exports);
    tslib_1.__exportStar(require_uri(), exports);
    tslib_1.__exportStar(require_util(), exports);
    tslib_1.__exportStar(require_waiter(), exports);
  }
});

// node_modules/@smithy/protocol-http/dist-cjs/Field.js
var require_Field = __commonJS({
  "node_modules/@smithy/protocol-http/dist-cjs/Field.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Field = void 0;
    var types_1 = require_dist_cjs();
    var Field = class {
      constructor({ name, kind = types_1.FieldPosition.HEADER, values = [] }) {
        this.name = name;
        this.kind = kind;
        this.values = values;
      }
      add(value) {
        this.values.push(value);
      }
      set(values) {
        this.values = values;
      }
      remove(value) {
        this.values = this.values.filter((v) => v !== value);
      }
      toString() {
        return this.values.map((v) => v.includes(",") || v.includes(" ") ? `"${v}"` : v).join(", ");
      }
      get() {
        return this.values;
      }
    };
    exports.Field = Field;
  }
});

// node_modules/@smithy/protocol-http/dist-cjs/Fields.js
var require_Fields = __commonJS({
  "node_modules/@smithy/protocol-http/dist-cjs/Fields.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Fields = void 0;
    var Fields = class {
      constructor({ fields = [], encoding = "utf-8" }) {
        this.entries = {};
        fields.forEach(this.setField.bind(this));
        this.encoding = encoding;
      }
      setField(field) {
        this.entries[field.name.toLowerCase()] = field;
      }
      getField(name) {
        return this.entries[name.toLowerCase()];
      }
      removeField(name) {
        delete this.entries[name.toLowerCase()];
      }
      getByType(kind) {
        return Object.values(this.entries).filter((field) => field.kind === kind);
      }
    };
    exports.Fields = Fields;
  }
});

// node_modules/@smithy/protocol-http/dist-cjs/httpHandler.js
var require_httpHandler = __commonJS({
  "node_modules/@smithy/protocol-http/dist-cjs/httpHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/protocol-http/dist-cjs/httpRequest.js
var require_httpRequest = __commonJS({
  "node_modules/@smithy/protocol-http/dist-cjs/httpRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpRequest = void 0;
    var HttpRequest = class _HttpRequest {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      static isInstance(request) {
        if (!request)
          return false;
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        const cloned = new _HttpRequest({
          ...this,
          headers: { ...this.headers }
        });
        if (cloned.query)
          cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param
        };
      }, {});
    }
  }
});

// node_modules/@smithy/protocol-http/dist-cjs/httpResponse.js
var require_httpResponse = __commonJS({
  "node_modules/@smithy/protocol-http/dist-cjs/httpResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
    exports.HttpResponse = HttpResponse;
  }
});

// node_modules/@smithy/protocol-http/dist-cjs/isValidHostname.js
var require_isValidHostname = __commonJS({
  "node_modules/@smithy/protocol-http/dist-cjs/isValidHostname.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports.isValidHostname = isValidHostname;
  }
});

// node_modules/@smithy/protocol-http/dist-cjs/types.js
var require_types = __commonJS({
  "node_modules/@smithy/protocol-http/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/protocol-http/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  "node_modules/@smithy/protocol-http/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_extensions(), exports);
    tslib_1.__exportStar(require_Field(), exports);
    tslib_1.__exportStar(require_Fields(), exports);
    tslib_1.__exportStar(require_httpHandler(), exports);
    tslib_1.__exportStar(require_httpRequest(), exports);
    tslib_1.__exportStar(require_httpResponse(), exports);
    tslib_1.__exportStar(require_isValidHostname(), exports);
    tslib_1.__exportStar(require_types(), exports);
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getCacheKey.js
var require_getCacheKey = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getCacheKey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCacheKey = void 0;
    var getCacheKey = async (commandName, config, options) => {
      const { accessKeyId } = await config.credentials();
      const { identifiers } = options;
      return JSON.stringify({
        ...accessKeyId && { accessKeyId },
        ...identifiers && {
          commandName,
          identifiers: Object.entries(identifiers).sort().reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {})
        }
      });
    };
    exports.getCacheKey = getCacheKey;
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/updateDiscoveredEndpointInCache.js
var require_updateDiscoveredEndpointInCache = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/updateDiscoveredEndpointInCache.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateDiscoveredEndpointInCache = void 0;
    var requestQueue = {};
    var updateDiscoveredEndpointInCache = async (config, options) => new Promise((resolve, reject) => {
      const { endpointCache } = config;
      const { cacheKey, commandName, identifiers } = options;
      const endpoints = endpointCache.get(cacheKey);
      if (endpoints && endpoints.length === 1 && endpoints[0].Address === "") {
        if (options.isDiscoveredEndpointRequired) {
          if (!requestQueue[cacheKey])
            requestQueue[cacheKey] = [];
          requestQueue[cacheKey].push({ resolve, reject });
        } else {
          resolve();
        }
      } else if (endpoints && endpoints.length > 0) {
        resolve();
      } else {
        const placeholderEndpoints = [{ Address: "", CachePeriodInMinutes: 1 }];
        endpointCache.set(cacheKey, placeholderEndpoints);
        const command = new options.endpointDiscoveryCommandCtor({
          Operation: commandName.slice(0, -7),
          Identifiers: identifiers
        });
        const handler2 = command.resolveMiddleware(options.clientStack, config, options.options);
        handler2(command).then((result) => {
          endpointCache.set(cacheKey, result.output.Endpoints);
          if (requestQueue[cacheKey]) {
            requestQueue[cacheKey].forEach(({ resolve: resolve2 }) => {
              resolve2();
            });
            delete requestQueue[cacheKey];
          }
          resolve();
        }).catch((error) => {
          endpointCache.delete(cacheKey);
          const errorToThrow = Object.assign(new Error(`The operation to discover endpoint failed. Please retry, or provide a custom endpoint and disable endpoint discovery to proceed.`), { reason: error });
          if (requestQueue[cacheKey]) {
            requestQueue[cacheKey].forEach(({ reject: reject2 }) => {
              reject2(errorToThrow);
            });
            delete requestQueue[cacheKey];
          }
          if (options.isDiscoveredEndpointRequired) {
            reject(errorToThrow);
          } else {
            endpointCache.set(cacheKey, placeholderEndpoints);
            resolve();
          }
        });
      }
    });
    exports.updateDiscoveredEndpointInCache = updateDiscoveredEndpointInCache;
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/endpointDiscoveryMiddleware.js
var require_endpointDiscoveryMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/endpointDiscoveryMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.endpointDiscoveryMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var getCacheKey_1 = require_getCacheKey();
    var updateDiscoveredEndpointInCache_1 = require_updateDiscoveredEndpointInCache();
    var endpointDiscoveryMiddleware = (config, middlewareConfig) => (next, context) => async (args) => {
      if (config.isCustomEndpoint) {
        if (config.isClientEndpointDiscoveryEnabled) {
          throw new Error(`Custom endpoint is supplied; endpointDiscoveryEnabled must not be true.`);
        }
        return next(args);
      }
      const { endpointDiscoveryCommandCtor } = config;
      const { isDiscoveredEndpointRequired, identifiers } = middlewareConfig;
      const clientName = context.clientName;
      const commandName = context.commandName;
      const isEndpointDiscoveryEnabled = await config.endpointDiscoveryEnabled();
      const cacheKey = await (0, getCacheKey_1.getCacheKey)(commandName, config, { identifiers });
      if (isDiscoveredEndpointRequired) {
        if (isEndpointDiscoveryEnabled === false) {
          throw new Error(`Endpoint Discovery is disabled but ${commandName} on ${clientName} requires it. Please check your configurations.`);
        }
        await (0, updateDiscoveredEndpointInCache_1.updateDiscoveredEndpointInCache)(config, {
          ...middlewareConfig,
          commandName,
          cacheKey,
          endpointDiscoveryCommandCtor
        });
      } else if (isEndpointDiscoveryEnabled) {
        (0, updateDiscoveredEndpointInCache_1.updateDiscoveredEndpointInCache)(config, {
          ...middlewareConfig,
          commandName,
          cacheKey,
          endpointDiscoveryCommandCtor
        });
      }
      const { request } = args;
      if (cacheKey && protocol_http_1.HttpRequest.isInstance(request)) {
        const endpoint = config.endpointCache.getEndpoint(cacheKey);
        if (endpoint) {
          request.hostname = endpoint;
        }
      }
      return next(args);
    };
    exports.endpointDiscoveryMiddleware = endpointDiscoveryMiddleware;
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getEndpointDiscoveryPlugin.js
var require_getEndpointDiscoveryPlugin = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getEndpointDiscoveryPlugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointDiscoveryOptionalPlugin = exports.getEndpointDiscoveryRequiredPlugin = exports.getEndpointDiscoveryPlugin = exports.endpointDiscoveryMiddlewareOptions = void 0;
    var endpointDiscoveryMiddleware_1 = require_endpointDiscoveryMiddleware();
    exports.endpointDiscoveryMiddlewareOptions = {
      name: "endpointDiscoveryMiddleware",
      step: "build",
      tags: ["ENDPOINT_DISCOVERY"],
      override: true
    };
    var getEndpointDiscoveryPlugin = (pluginConfig, middlewareConfig) => ({
      applyToStack: (commandStack) => {
        commandStack.add((0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(pluginConfig, middlewareConfig), exports.endpointDiscoveryMiddlewareOptions);
      }
    });
    exports.getEndpointDiscoveryPlugin = getEndpointDiscoveryPlugin;
    var getEndpointDiscoveryRequiredPlugin = (pluginConfig, middlewareConfig) => ({
      applyToStack: (commandStack) => {
        commandStack.add((0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(pluginConfig, { ...middlewareConfig, isDiscoveredEndpointRequired: true }), exports.endpointDiscoveryMiddlewareOptions);
      }
    });
    exports.getEndpointDiscoveryRequiredPlugin = getEndpointDiscoveryRequiredPlugin;
    var getEndpointDiscoveryOptionalPlugin = (pluginConfig, middlewareConfig) => ({
      applyToStack: (commandStack) => {
        commandStack.add((0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(pluginConfig, { ...middlewareConfig, isDiscoveredEndpointRequired: false }), exports.endpointDiscoveryMiddlewareOptions);
      }
    });
    exports.getEndpointDiscoveryOptionalPlugin = getEndpointDiscoveryOptionalPlugin;
  }
});

// node_modules/@aws-sdk/endpoint-cache/dist-cjs/Endpoint.js
var require_Endpoint = __commonJS({
  "node_modules/@aws-sdk/endpoint-cache/dist-cjs/Endpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/obliterator/iterator.js
var require_iterator = __commonJS({
  "node_modules/obliterator/iterator.js"(exports, module2) {
    function Iterator(next) {
      Object.defineProperty(this, "_next", {
        writable: false,
        enumerable: false,
        value: next
      });
      this.done = false;
    }
    Iterator.prototype.next = function() {
      if (this.done)
        return { done: true };
      var step = this._next();
      if (step.done)
        this.done = true;
      return step;
    };
    if (typeof Symbol !== "undefined")
      Iterator.prototype[Symbol.iterator] = function() {
        return this;
      };
    Iterator.of = function() {
      var args = arguments, l = args.length, i = 0;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        return { done: false, value: args[i++] };
      });
    };
    Iterator.empty = function() {
      var iterator = new Iterator(null);
      iterator.done = true;
      return iterator;
    };
    Iterator.is = function(value) {
      if (value instanceof Iterator)
        return true;
      return typeof value === "object" && value !== null && typeof value.next === "function";
    };
    module2.exports = Iterator;
  }
});

// node_modules/obliterator/foreach.js
var require_foreach = __commonJS({
  "node_modules/obliterator/foreach.js"(exports, module2) {
    var ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== "undefined";
    var SYMBOL_SUPPORT = typeof Symbol !== "undefined";
    function forEach(iterable, callback) {
      var iterator, k, i, l, s;
      if (!iterable)
        throw new Error("obliterator/forEach: invalid iterable.");
      if (typeof callback !== "function")
        throw new Error("obliterator/forEach: expecting a callback.");
      if (Array.isArray(iterable) || ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable) || typeof iterable === "string" || iterable.toString() === "[object Arguments]") {
        for (i = 0, l = iterable.length; i < l; i++)
          callback(iterable[i], i);
        return;
      }
      if (typeof iterable.forEach === "function") {
        iterable.forEach(callback);
        return;
      }
      if (SYMBOL_SUPPORT && Symbol.iterator in iterable && typeof iterable.next !== "function") {
        iterable = iterable[Symbol.iterator]();
      }
      if (typeof iterable.next === "function") {
        iterator = iterable;
        i = 0;
        while (s = iterator.next(), s.done !== true) {
          callback(s.value, i);
          i++;
        }
        return;
      }
      for (k in iterable) {
        if (iterable.hasOwnProperty(k)) {
          callback(iterable[k], k);
        }
      }
      return;
    }
    forEach.forEachWithNullKeys = function(iterable, callback) {
      var iterator, k, i, l, s;
      if (!iterable)
        throw new Error("obliterator/forEachWithNullKeys: invalid iterable.");
      if (typeof callback !== "function")
        throw new Error("obliterator/forEachWithNullKeys: expecting a callback.");
      if (Array.isArray(iterable) || ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable) || typeof iterable === "string" || iterable.toString() === "[object Arguments]") {
        for (i = 0, l = iterable.length; i < l; i++)
          callback(iterable[i], null);
        return;
      }
      if (iterable instanceof Set) {
        iterable.forEach(function(value) {
          callback(value, null);
        });
        return;
      }
      if (typeof iterable.forEach === "function") {
        iterable.forEach(callback);
        return;
      }
      if (SYMBOL_SUPPORT && Symbol.iterator in iterable && typeof iterable.next !== "function") {
        iterable = iterable[Symbol.iterator]();
      }
      if (typeof iterable.next === "function") {
        iterator = iterable;
        i = 0;
        while (s = iterator.next(), s.done !== true) {
          callback(s.value, null);
          i++;
        }
        return;
      }
      for (k in iterable) {
        if (iterable.hasOwnProperty(k)) {
          callback(iterable[k], k);
        }
      }
      return;
    };
    module2.exports = forEach;
  }
});

// node_modules/mnemonist/utils/typed-arrays.js
var require_typed_arrays = __commonJS({
  "node_modules/mnemonist/utils/typed-arrays.js"(exports) {
    var MAX_8BIT_INTEGER = Math.pow(2, 8) - 1;
    var MAX_16BIT_INTEGER = Math.pow(2, 16) - 1;
    var MAX_32BIT_INTEGER = Math.pow(2, 32) - 1;
    var MAX_SIGNED_8BIT_INTEGER = Math.pow(2, 7) - 1;
    var MAX_SIGNED_16BIT_INTEGER = Math.pow(2, 15) - 1;
    var MAX_SIGNED_32BIT_INTEGER = Math.pow(2, 31) - 1;
    exports.getPointerArray = function(size) {
      var maxIndex = size - 1;
      if (maxIndex <= MAX_8BIT_INTEGER)
        return Uint8Array;
      if (maxIndex <= MAX_16BIT_INTEGER)
        return Uint16Array;
      if (maxIndex <= MAX_32BIT_INTEGER)
        return Uint32Array;
      return Float64Array;
    };
    exports.getSignedPointerArray = function(size) {
      var maxIndex = size - 1;
      if (maxIndex <= MAX_SIGNED_8BIT_INTEGER)
        return Int8Array;
      if (maxIndex <= MAX_SIGNED_16BIT_INTEGER)
        return Int16Array;
      if (maxIndex <= MAX_SIGNED_32BIT_INTEGER)
        return Int32Array;
      return Float64Array;
    };
    exports.getNumberType = function(value) {
      if (value === (value | 0)) {
        if (Math.sign(value) === -1) {
          if (value <= 127 && value >= -128)
            return Int8Array;
          if (value <= 32767 && value >= -32768)
            return Int16Array;
          return Int32Array;
        } else {
          if (value <= 255)
            return Uint8Array;
          if (value <= 65535)
            return Uint16Array;
          return Uint32Array;
        }
      }
      return Float64Array;
    };
    var TYPE_PRIORITY = {
      Uint8Array: 1,
      Int8Array: 2,
      Uint16Array: 3,
      Int16Array: 4,
      Uint32Array: 5,
      Int32Array: 6,
      Float32Array: 7,
      Float64Array: 8
    };
    exports.getMinimalRepresentation = function(array, getter) {
      var maxType = null, maxPriority = 0, p, t, v, i, l;
      for (i = 0, l = array.length; i < l; i++) {
        v = getter ? getter(array[i]) : array[i];
        t = exports.getNumberType(v);
        p = TYPE_PRIORITY[t.name];
        if (p > maxPriority) {
          maxPriority = p;
          maxType = t;
        }
      }
      return maxType;
    };
    exports.isTypedArray = function(value) {
      return typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView(value);
    };
    exports.concat = function() {
      var length = 0, i, o, l;
      for (i = 0, l = arguments.length; i < l; i++)
        length += arguments[i].length;
      var array = new arguments[0].constructor(length);
      for (i = 0, o = 0; i < l; i++) {
        array.set(arguments[i], o);
        o += arguments[i].length;
      }
      return array;
    };
    exports.indices = function(length) {
      var PointerArray = exports.getPointerArray(length);
      var array = new PointerArray(length);
      for (var i = 0; i < length; i++)
        array[i] = i;
      return array;
    };
  }
});

// node_modules/mnemonist/utils/iterables.js
var require_iterables = __commonJS({
  "node_modules/mnemonist/utils/iterables.js"(exports) {
    var forEach = require_foreach();
    var typed = require_typed_arrays();
    function isArrayLike(target) {
      return Array.isArray(target) || typed.isTypedArray(target);
    }
    function guessLength(target) {
      if (typeof target.length === "number")
        return target.length;
      if (typeof target.size === "number")
        return target.size;
      return;
    }
    function toArray(target) {
      var l = guessLength(target);
      var array = typeof l === "number" ? new Array(l) : [];
      var i = 0;
      forEach(target, function(value) {
        array[i++] = value;
      });
      return array;
    }
    function toArrayWithIndices(target) {
      var l = guessLength(target);
      var IndexArray = typeof l === "number" ? typed.getPointerArray(l) : Array;
      var array = typeof l === "number" ? new Array(l) : [];
      var indices = typeof l === "number" ? new IndexArray(l) : [];
      var i = 0;
      forEach(target, function(value) {
        array[i] = value;
        indices[i] = i++;
      });
      return [array, indices];
    }
    exports.isArrayLike = isArrayLike;
    exports.guessLength = guessLength;
    exports.toArray = toArray;
    exports.toArrayWithIndices = toArrayWithIndices;
  }
});

// node_modules/mnemonist/lru-cache.js
var require_lru_cache = __commonJS({
  "node_modules/mnemonist/lru-cache.js"(exports, module2) {
    var Iterator = require_iterator();
    var forEach = require_foreach();
    var typed = require_typed_arrays();
    var iterables = require_iterables();
    function LRUCache(Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      this.capacity = capacity;
      if (typeof this.capacity !== "number" || this.capacity <= 0)
        throw new Error("mnemonist/lru-cache: capacity should be positive number.");
      var PointerArray = typed.getPointerArray(capacity);
      this.forward = new PointerArray(capacity);
      this.backward = new PointerArray(capacity);
      this.K = typeof Keys === "function" ? new Keys(capacity) : new Array(capacity);
      this.V = typeof Values === "function" ? new Values(capacity) : new Array(capacity);
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = {};
    }
    LRUCache.prototype.clear = function() {
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = {};
    };
    LRUCache.prototype.splayOnTop = function(pointer) {
      var oldHead = this.head;
      if (this.head === pointer)
        return this;
      var previous = this.backward[pointer], next = this.forward[pointer];
      if (this.tail === pointer) {
        this.tail = previous;
      } else {
        this.backward[next] = previous;
      }
      this.forward[previous] = next;
      this.backward[oldHead] = pointer;
      this.head = pointer;
      this.forward[pointer] = oldHead;
      return this;
    };
    LRUCache.prototype.set = function(key, value) {
      var pointer = this.items[key];
      if (typeof pointer !== "undefined") {
        this.splayOnTop(pointer);
        this.V[pointer] = value;
        return;
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        delete this.items[this.K[pointer]];
      }
      this.items[key] = pointer;
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
    };
    LRUCache.prototype.setpop = function(key, value) {
      var oldValue = null;
      var oldKey = null;
      var pointer = this.items[key];
      if (typeof pointer !== "undefined") {
        this.splayOnTop(pointer);
        oldValue = this.V[pointer];
        this.V[pointer] = value;
        return { evicted: false, key, value: oldValue };
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        oldValue = this.V[pointer];
        oldKey = this.K[pointer];
        delete this.items[this.K[pointer]];
      }
      this.items[key] = pointer;
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
      if (oldKey) {
        return { evicted: true, key: oldKey, value: oldValue };
      } else {
        return null;
      }
    };
    LRUCache.prototype.has = function(key) {
      return key in this.items;
    };
    LRUCache.prototype.get = function(key) {
      var pointer = this.items[key];
      if (typeof pointer === "undefined")
        return;
      this.splayOnTop(pointer);
      return this.V[pointer];
    };
    LRUCache.prototype.peek = function(key) {
      var pointer = this.items[key];
      if (typeof pointer === "undefined")
        return;
      return this.V[pointer];
    };
    LRUCache.prototype.forEach = function(callback, scope) {
      scope = arguments.length > 1 ? scope : this;
      var i = 0, l = this.size;
      var pointer = this.head, keys = this.K, values = this.V, forward = this.forward;
      while (i < l) {
        callback.call(scope, values[pointer], keys[pointer], this);
        pointer = forward[pointer];
        i++;
      }
    };
    LRUCache.prototype.keys = function() {
      var i = 0, l = this.size;
      var pointer = this.head, keys = this.K, forward = this.forward;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        var key = keys[pointer];
        i++;
        if (i < l)
          pointer = forward[pointer];
        return {
          done: false,
          value: key
        };
      });
    };
    LRUCache.prototype.values = function() {
      var i = 0, l = this.size;
      var pointer = this.head, values = this.V, forward = this.forward;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        var value = values[pointer];
        i++;
        if (i < l)
          pointer = forward[pointer];
        return {
          done: false,
          value
        };
      });
    };
    LRUCache.prototype.entries = function() {
      var i = 0, l = this.size;
      var pointer = this.head, keys = this.K, values = this.V, forward = this.forward;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        var key = keys[pointer], value = values[pointer];
        i++;
        if (i < l)
          pointer = forward[pointer];
        return {
          done: false,
          value: [key, value]
        };
      });
    };
    if (typeof Symbol !== "undefined")
      LRUCache.prototype[Symbol.iterator] = LRUCache.prototype.entries;
    LRUCache.prototype.inspect = function() {
      var proxy = /* @__PURE__ */ new Map();
      var iterator = this.entries(), step;
      while (step = iterator.next(), !step.done)
        proxy.set(step.value[0], step.value[1]);
      Object.defineProperty(proxy, "constructor", {
        value: LRUCache,
        enumerable: false
      });
      return proxy;
    };
    if (typeof Symbol !== "undefined")
      LRUCache.prototype[Symbol.for("nodejs.util.inspect.custom")] = LRUCache.prototype.inspect;
    LRUCache.from = function(iterable, Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = iterables.guessLength(iterable);
        if (typeof capacity !== "number")
          throw new Error("mnemonist/lru-cache.from: could not guess iterable length. Please provide desired capacity as last argument.");
      } else if (arguments.length === 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      var cache = new LRUCache(Keys, Values, capacity);
      forEach(iterable, function(value, key) {
        cache.set(key, value);
      });
      return cache;
    };
    module2.exports = LRUCache;
  }
});

// node_modules/@aws-sdk/endpoint-cache/dist-cjs/EndpointCache.js
var require_EndpointCache = __commonJS({
  "node_modules/@aws-sdk/endpoint-cache/dist-cjs/EndpointCache.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointCache = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var lru_cache_1 = tslib_1.__importDefault(require_lru_cache());
    var EndpointCache = class {
      constructor(capacity) {
        this.cache = new lru_cache_1.default(capacity);
      }
      getEndpoint(key) {
        const endpointsWithExpiry = this.get(key);
        if (!endpointsWithExpiry || endpointsWithExpiry.length === 0) {
          return void 0;
        }
        const endpoints = endpointsWithExpiry.map((endpoint) => endpoint.Address);
        return endpoints[Math.floor(Math.random() * endpoints.length)];
      }
      get(key) {
        if (!this.has(key)) {
          return;
        }
        const value = this.cache.get(key);
        if (!value) {
          return;
        }
        const now = Date.now();
        const endpointsWithExpiry = value.filter((endpoint) => now < endpoint.Expires);
        if (endpointsWithExpiry.length === 0) {
          this.delete(key);
          return void 0;
        }
        return endpointsWithExpiry;
      }
      set(key, endpoints) {
        const now = Date.now();
        this.cache.set(key, endpoints.map(({ Address, CachePeriodInMinutes }) => ({
          Address,
          Expires: now + CachePeriodInMinutes * 60 * 1e3
        })));
      }
      delete(key) {
        this.cache.set(key, []);
      }
      has(key) {
        if (!this.cache.has(key)) {
          return false;
        }
        const endpoints = this.cache.peek(key);
        if (!endpoints) {
          return false;
        }
        return endpoints.length > 0;
      }
      clear() {
        this.cache.clear();
      }
    };
    exports.EndpointCache = EndpointCache;
  }
});

// node_modules/@aws-sdk/endpoint-cache/dist-cjs/index.js
var require_dist_cjs3 = __commonJS({
  "node_modules/@aws-sdk/endpoint-cache/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Endpoint(), exports);
    tslib_1.__exportStar(require_EndpointCache(), exports);
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/resolveEndpointDiscoveryConfig.js
var require_resolveEndpointDiscoveryConfig = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/resolveEndpointDiscoveryConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpointDiscoveryConfig = void 0;
    var endpoint_cache_1 = require_dist_cjs3();
    var resolveEndpointDiscoveryConfig = (input, { endpointDiscoveryCommandCtor }) => {
      var _a;
      return {
        ...input,
        endpointDiscoveryCommandCtor,
        endpointCache: new endpoint_cache_1.EndpointCache((_a = input.endpointCacheSize) !== null && _a !== void 0 ? _a : 1e3),
        endpointDiscoveryEnabled: input.endpointDiscoveryEnabled !== void 0 ? () => Promise.resolve(input.endpointDiscoveryEnabled) : input.endpointDiscoveryEnabledProvider,
        isClientEndpointDiscoveryEnabled: input.endpointDiscoveryEnabled !== void 0
      };
    };
    exports.resolveEndpointDiscoveryConfig = resolveEndpointDiscoveryConfig;
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/index.js
var require_dist_cjs4 = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations(), exports);
    tslib_1.__exportStar(require_getEndpointDiscoveryPlugin(), exports);
    tslib_1.__exportStar(require_resolveEndpointDiscoveryConfig(), exports);
  }
});

// node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs5 = __commonJS({
  "node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHostHeaderPlugin = exports.hostHeaderMiddlewareOptions = exports.hostHeaderMiddleware = exports.resolveHostHeaderConfig = void 0;
    var protocol_http_1 = require_dist_cjs2();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    exports.resolveHostHeaderConfig = resolveHostHeaderConfig;
    var hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = "";
      } else if (!request.headers["host"]) {
        let host = request.hostname;
        if (request.port != null)
          host += `:${request.port}`;
        request.headers["host"] = host;
      }
      return next(args);
    };
    exports.hostHeaderMiddleware = hostHeaderMiddleware;
    exports.hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    var getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.hostHeaderMiddleware)(options), exports.hostHeaderMiddlewareOptions);
      }
    });
    exports.getHostHeaderPlugin = getHostHeaderPlugin;
  }
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js
var require_loggerMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLoggerPlugin = exports.loggerMiddlewareOptions = exports.loggerMiddleware = void 0;
    var loggerMiddleware = () => (next, context) => async (args) => {
      var _a, _b;
      try {
        const response = await next(args);
        const { clientName, commandName, logger: logger2, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog !== null && overrideInputFilterSensitiveLog !== void 0 ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog !== null && overrideOutputFilterSensitiveLog !== void 0 ? overrideOutputFilterSensitiveLog : context.outputFilterSensitiveLog;
        const { $metadata, ...outputWithoutMetadata } = response.output;
        (_a = logger2 === null || logger2 === void 0 ? void 0 : logger2.info) === null || _a === void 0 ? void 0 : _a.call(logger2, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
        return response;
      } catch (error) {
        const { clientName, commandName, logger: logger2, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog !== null && overrideInputFilterSensitiveLog !== void 0 ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
        (_b = logger2 === null || logger2 === void 0 ? void 0 : logger2.error) === null || _b === void 0 ? void 0 : _b.call(logger2, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          error,
          metadata: error.$metadata
        });
        throw error;
      }
    };
    exports.loggerMiddleware = loggerMiddleware;
    exports.loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    var getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.loggerMiddleware)(), exports.loggerMiddlewareOptions);
      }
    });
    exports.getLoggerPlugin = getLoggerPlugin;
  }
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs6 = __commonJS({
  "node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_loggerMiddleware(), exports);
  }
});

// node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js
var require_dist_cjs7 = __commonJS({
  "node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRecursionDetectionPlugin = exports.addRecursionDetectionMiddlewareOptions = exports.recursionDetectionMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
    var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
    var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
    var recursionDetectionMiddleware = (options) => (next) => async (args) => {
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = (str) => typeof str === "string" && str.length > 0;
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request
      });
    };
    exports.recursionDetectionMiddleware = recursionDetectionMiddleware;
    exports.addRecursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
    var getRecursionDetectionPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.recursionDetectionMiddleware)(options), exports.addRecursionDetectionMiddlewareOptions);
      }
    });
    exports.getRecursionDetectionPlugin = getRecursionDetectionPlugin;
  }
});

// node_modules/@smithy/property-provider/dist-cjs/ProviderError.js
var require_ProviderError = __commonJS({
  "node_modules/@smithy/property-provider/dist-cjs/ProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProviderError = void 0;
    var ProviderError = class _ProviderError extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = "ProviderError";
        Object.setPrototypeOf(this, _ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports.ProviderError = ProviderError;
  }
});

// node_modules/@smithy/property-provider/dist-cjs/CredentialsProviderError.js
var require_CredentialsProviderError = __commonJS({
  "node_modules/@smithy/property-provider/dist-cjs/CredentialsProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var CredentialsProviderError = class _CredentialsProviderError extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, _CredentialsProviderError.prototype);
      }
    };
    exports.CredentialsProviderError = CredentialsProviderError;
  }
});

// node_modules/@smithy/property-provider/dist-cjs/TokenProviderError.js
var require_TokenProviderError = __commonJS({
  "node_modules/@smithy/property-provider/dist-cjs/TokenProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var TokenProviderError = class _TokenProviderError extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, _TokenProviderError.prototype);
      }
    };
    exports.TokenProviderError = TokenProviderError;
  }
});

// node_modules/@smithy/property-provider/dist-cjs/chain.js
var require_chain = __commonJS({
  "node_modules/@smithy/property-provider/dist-cjs/chain.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chain = void 0;
    var ProviderError_1 = require_ProviderError();
    var chain = (...providers) => async () => {
      if (providers.length === 0) {
        throw new ProviderError_1.ProviderError("No providers in chain");
      }
      let lastProviderError;
      for (const provider of providers) {
        try {
          const credentials = await provider();
          return credentials;
        } catch (err) {
          lastProviderError = err;
          if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
            continue;
          }
          throw err;
        }
      }
      throw lastProviderError;
    };
    exports.chain = chain;
  }
});

// node_modules/@smithy/property-provider/dist-cjs/fromStatic.js
var require_fromStatic = __commonJS({
  "node_modules/@smithy/property-provider/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports.fromStatic = fromStatic;
  }
});

// node_modules/@smithy/property-provider/dist-cjs/memoize.js
var require_memoize = __commonJS({
  "node_modules/@smithy/property-provider/dist-cjs/memoize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports.memoize = memoize;
  }
});

// node_modules/@smithy/property-provider/dist-cjs/index.js
var require_dist_cjs8 = __commonJS({
  "node_modules/@smithy/property-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CredentialsProviderError(), exports);
    tslib_1.__exportStar(require_ProviderError(), exports);
    tslib_1.__exportStar(require_TokenProviderError(), exports);
    tslib_1.__exportStar(require_chain(), exports);
    tslib_1.__exportStar(require_fromStatic(), exports);
    tslib_1.__exportStar(require_memoize(), exports);
  }
});

// node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.es6.js
var tslib_es6_exports2 = {};
__export(tslib_es6_exports2, {
  __assign: () => __assign2,
  __asyncDelegator: () => __asyncDelegator2,
  __asyncGenerator: () => __asyncGenerator2,
  __asyncValues: () => __asyncValues2,
  __await: () => __await2,
  __awaiter: () => __awaiter2,
  __classPrivateFieldGet: () => __classPrivateFieldGet2,
  __classPrivateFieldSet: () => __classPrivateFieldSet2,
  __createBinding: () => __createBinding2,
  __decorate: () => __decorate2,
  __exportStar: () => __exportStar2,
  __extends: () => __extends2,
  __generator: () => __generator2,
  __importDefault: () => __importDefault2,
  __importStar: () => __importStar2,
  __makeTemplateObject: () => __makeTemplateObject2,
  __metadata: () => __metadata2,
  __param: () => __param2,
  __read: () => __read2,
  __rest: () => __rest2,
  __spread: () => __spread2,
  __spreadArrays: () => __spreadArrays2,
  __values: () => __values2
});
function __extends2(d, b) {
  extendStatics2(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest2(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate2(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param2(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata2(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter2(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator2(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding2(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  o[k2] = m[k];
}
function __exportStar2(m, exports) {
  for (var p in m)
    if (p !== "default" && !exports.hasOwnProperty(p))
      exports[p] = m[p];
}
function __values2(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read2(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread2() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read2(arguments[i]));
  return ar;
}
function __spreadArrays2() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __await2(v) {
  return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
}
function __asyncGenerator2(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator2(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await2(o[n](v)), done: n === "return" } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues2(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject2(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar2(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (Object.hasOwnProperty.call(mod, k))
        result[k] = mod[k];
  }
  result.default = mod;
  return result;
}
function __importDefault2(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet2(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet2(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics2, __assign2;
var init_tslib_es62 = __esm({
  "node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.es6.js"() {
    extendStatics2 = function(d, b) {
      extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics2(d, b);
    };
    __assign2 = function() {
      __assign2 = Object.assign || function __assign3(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist-cjs/pureJs.js
var require_pureJs = __commonJS({
  "node_modules/@aws-sdk/util-utf8-browser/dist-cjs/pureJs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8 = exports.fromUtf8 = void 0;
    var fromUtf8 = (input) => {
      const bytes = [];
      for (let i = 0, len = input.length; i < len; i++) {
        const value = input.charCodeAt(i);
        if (value < 128) {
          bytes.push(value);
        } else if (value < 2048) {
          bytes.push(value >> 6 | 192, value & 63 | 128);
        } else if (i + 1 < input.length && (value & 64512) === 55296 && (input.charCodeAt(i + 1) & 64512) === 56320) {
          const surrogatePair = 65536 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
          bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
        } else {
          bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
        }
      }
      return Uint8Array.from(bytes);
    };
    exports.fromUtf8 = fromUtf8;
    var toUtf8 = (input) => {
      let decoded = "";
      for (let i = 0, len = input.length; i < len; i++) {
        const byte = input[i];
        if (byte < 128) {
          decoded += String.fromCharCode(byte);
        } else if (192 <= byte && byte < 224) {
          const nextByte = input[++i];
          decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
        } else if (240 <= byte && byte < 365) {
          const surrogatePair = [byte, input[++i], input[++i], input[++i]];
          const encoded = "%" + surrogatePair.map((byteValue) => byteValue.toString(16)).join("%");
          decoded += decodeURIComponent(encoded);
        } else {
          decoded += String.fromCharCode((byte & 15) << 12 | (input[++i] & 63) << 6 | input[++i] & 63);
        }
      }
      return decoded;
    };
    exports.toUtf8 = toUtf8;
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist-cjs/whatwgEncodingApi.js
var require_whatwgEncodingApi = __commonJS({
  "node_modules/@aws-sdk/util-utf8-browser/dist-cjs/whatwgEncodingApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8 = exports.fromUtf8 = void 0;
    function fromUtf8(input) {
      return new TextEncoder().encode(input);
    }
    exports.fromUtf8 = fromUtf8;
    function toUtf8(input) {
      return new TextDecoder("utf-8").decode(input);
    }
    exports.toUtf8 = toUtf8;
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist-cjs/index.js
var require_dist_cjs9 = __commonJS({
  "node_modules/@aws-sdk/util-utf8-browser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8 = exports.fromUtf8 = void 0;
    var pureJs_1 = require_pureJs();
    var whatwgEncodingApi_1 = require_whatwgEncodingApi();
    var fromUtf8 = (input) => typeof TextEncoder === "function" ? (0, whatwgEncodingApi_1.fromUtf8)(input) : (0, pureJs_1.fromUtf8)(input);
    exports.fromUtf8 = fromUtf8;
    var toUtf8 = (input) => typeof TextDecoder === "function" ? (0, whatwgEncodingApi_1.toUtf8)(input) : (0, pureJs_1.toUtf8)(input);
    exports.toUtf8 = toUtf8;
  }
});

// node_modules/@aws-crypto/util/build/convertToBuffer.js
var require_convertToBuffer = __commonJS({
  "node_modules/@aws-crypto/util/build/convertToBuffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertToBuffer = void 0;
    var util_utf8_browser_1 = require_dist_cjs9();
    var fromUtf8 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : util_utf8_browser_1.fromUtf8;
    function convertToBuffer(data) {
      if (data instanceof Uint8Array)
        return data;
      if (typeof data === "string") {
        return fromUtf8(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    exports.convertToBuffer = convertToBuffer;
  }
});

// node_modules/@aws-crypto/util/build/isEmptyData.js
var require_isEmptyData = __commonJS({
  "node_modules/@aws-crypto/util/build/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
  }
});

// node_modules/@aws-crypto/util/build/numToUint8.js
var require_numToUint8 = __commonJS({
  "node_modules/@aws-crypto/util/build/numToUint8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.numToUint8 = void 0;
    function numToUint8(num) {
      return new Uint8Array([
        (num & 4278190080) >> 24,
        (num & 16711680) >> 16,
        (num & 65280) >> 8,
        num & 255
      ]);
    }
    exports.numToUint8 = numToUint8;
  }
});

// node_modules/@aws-crypto/util/build/uint32ArrayFrom.js
var require_uint32ArrayFrom = __commonJS({
  "node_modules/@aws-crypto/util/build/uint32ArrayFrom.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = void 0;
    function uint32ArrayFrom(a_lookUpTable) {
      if (!Uint32Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
          return_array[a_index] = a_lookUpTable[a_index];
          a_index += 1;
        }
        return return_array;
      }
      return Uint32Array.from(a_lookUpTable);
    }
    exports.uint32ArrayFrom = uint32ArrayFrom;
  }
});

// node_modules/@aws-crypto/util/build/index.js
var require_build = __commonJS({
  "node_modules/@aws-crypto/util/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
    var convertToBuffer_1 = require_convertToBuffer();
    Object.defineProperty(exports, "convertToBuffer", { enumerable: true, get: function() {
      return convertToBuffer_1.convertToBuffer;
    } });
    var isEmptyData_1 = require_isEmptyData();
    Object.defineProperty(exports, "isEmptyData", { enumerable: true, get: function() {
      return isEmptyData_1.isEmptyData;
    } });
    var numToUint8_1 = require_numToUint8();
    Object.defineProperty(exports, "numToUint8", { enumerable: true, get: function() {
      return numToUint8_1.numToUint8;
    } });
    var uint32ArrayFrom_1 = require_uint32ArrayFrom();
    Object.defineProperty(exports, "uint32ArrayFrom", { enumerable: true, get: function() {
      return uint32ArrayFrom_1.uint32ArrayFrom;
    } });
  }
});

// node_modules/@aws-crypto/crc32/build/aws_crc32.js
var require_aws_crc32 = __commonJS({
  "node_modules/@aws-crypto/crc32/build/aws_crc32.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AwsCrc32 = void 0;
    var tslib_1 = (init_tslib_es62(), __toCommonJS(tslib_es6_exports2));
    var util_1 = require_build();
    var index_1 = require_build2();
    var AwsCrc32 = (
      /** @class */
      function() {
        function AwsCrc322() {
          this.crc32 = new index_1.Crc32();
        }
        AwsCrc322.prototype.update = function(toHash) {
          if ((0, util_1.isEmptyData)(toHash))
            return;
          this.crc32.update((0, util_1.convertToBuffer)(toHash));
        };
        AwsCrc322.prototype.digest = function() {
          return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a) {
              return [2, (0, util_1.numToUint8)(this.crc32.digest())];
            });
          });
        };
        AwsCrc322.prototype.reset = function() {
          this.crc32 = new index_1.Crc32();
        };
        return AwsCrc322;
      }()
    );
    exports.AwsCrc32 = AwsCrc32;
  }
});

// node_modules/@aws-crypto/crc32/build/index.js
var require_build2 = __commonJS({
  "node_modules/@aws-crypto/crc32/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AwsCrc32 = exports.Crc32 = exports.crc32 = void 0;
    var tslib_1 = (init_tslib_es62(), __toCommonJS(tslib_es6_exports2));
    var util_1 = require_build();
    function crc32(data) {
      return new Crc32().update(data).digest();
    }
    exports.crc32 = crc32;
    var Crc32 = (
      /** @class */
      function() {
        function Crc322() {
          this.checksum = 4294967295;
        }
        Crc322.prototype.update = function(data) {
          var e_1, _a;
          try {
            for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
              var byte = data_1_1.value;
              this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (data_1_1 && !data_1_1.done && (_a = data_1.return))
                _a.call(data_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return this;
        };
        Crc322.prototype.digest = function() {
          return (this.checksum ^ 4294967295) >>> 0;
        };
        return Crc322;
      }()
    );
    exports.Crc32 = Crc32;
    var a_lookUpTable = [
      0,
      1996959894,
      3993919788,
      2567524794,
      124634137,
      1886057615,
      3915621685,
      2657392035,
      249268274,
      2044508324,
      3772115230,
      2547177864,
      162941995,
      2125561021,
      3887607047,
      2428444049,
      498536548,
      1789927666,
      4089016648,
      2227061214,
      450548861,
      1843258603,
      4107580753,
      2211677639,
      325883990,
      1684777152,
      4251122042,
      2321926636,
      335633487,
      1661365465,
      4195302755,
      2366115317,
      997073096,
      1281953886,
      3579855332,
      2724688242,
      1006888145,
      1258607687,
      3524101629,
      2768942443,
      901097722,
      1119000684,
      3686517206,
      2898065728,
      853044451,
      1172266101,
      3705015759,
      2882616665,
      651767980,
      1373503546,
      3369554304,
      3218104598,
      565507253,
      1454621731,
      3485111705,
      3099436303,
      671266974,
      1594198024,
      3322730930,
      2970347812,
      795835527,
      1483230225,
      3244367275,
      3060149565,
      1994146192,
      31158534,
      2563907772,
      4023717930,
      1907459465,
      112637215,
      2680153253,
      3904427059,
      2013776290,
      251722036,
      2517215374,
      3775830040,
      2137656763,
      141376813,
      2439277719,
      3865271297,
      1802195444,
      476864866,
      2238001368,
      4066508878,
      1812370925,
      453092731,
      2181625025,
      4111451223,
      1706088902,
      314042704,
      2344532202,
      4240017532,
      1658658271,
      366619977,
      2362670323,
      4224994405,
      1303535960,
      984961486,
      2747007092,
      3569037538,
      1256170817,
      1037604311,
      2765210733,
      3554079995,
      1131014506,
      879679996,
      2909243462,
      3663771856,
      1141124467,
      855842277,
      2852801631,
      3708648649,
      1342533948,
      654459306,
      3188396048,
      3373015174,
      1466479909,
      544179635,
      3110523913,
      3462522015,
      1591671054,
      702138776,
      2966460450,
      3352799412,
      1504918807,
      783551873,
      3082640443,
      3233442989,
      3988292384,
      2596254646,
      62317068,
      1957810842,
      3939845945,
      2647816111,
      81470997,
      1943803523,
      3814918930,
      2489596804,
      225274430,
      2053790376,
      3826175755,
      2466906013,
      167816743,
      2097651377,
      4027552580,
      2265490386,
      503444072,
      1762050814,
      4150417245,
      2154129355,
      426522225,
      1852507879,
      4275313526,
      2312317920,
      282753626,
      1742555852,
      4189708143,
      2394877945,
      397917763,
      1622183637,
      3604390888,
      2714866558,
      953729732,
      1340076626,
      3518719985,
      2797360999,
      1068828381,
      1219638859,
      3624741850,
      2936675148,
      906185462,
      1090812512,
      3747672003,
      2825379669,
      829329135,
      1181335161,
      3412177804,
      3160834842,
      628085408,
      1382605366,
      3423369109,
      3138078467,
      570562233,
      1426400815,
      3317316542,
      2998733608,
      733239954,
      1555261956,
      3268935591,
      3050360625,
      752459403,
      1541320221,
      2607071920,
      3965973030,
      1969922972,
      40735498,
      2617837225,
      3943577151,
      1913087877,
      83908371,
      2512341634,
      3803740692,
      2075208622,
      213261112,
      2463272603,
      3855990285,
      2094854071,
      198958881,
      2262029012,
      4057260610,
      1759359992,
      534414190,
      2176718541,
      4139329115,
      1873836001,
      414664567,
      2282248934,
      4279200368,
      1711684554,
      285281116,
      2405801727,
      4167216745,
      1634467795,
      376229701,
      2685067896,
      3608007406,
      1308918612,
      956543938,
      2808555105,
      3495958263,
      1231636301,
      1047427035,
      2932959818,
      3654703836,
      1088359270,
      936918e3,
      2847714899,
      3736837829,
      1202900863,
      817233897,
      3183342108,
      3401237130,
      1404277552,
      615818150,
      3134207493,
      3453421203,
      1423857449,
      601450431,
      3009837614,
      3294710456,
      1567103746,
      711928724,
      3020668471,
      3272380065,
      1510334235,
      755167117
    ];
    var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookUpTable);
    var aws_crc32_1 = require_aws_crc32();
    Object.defineProperty(exports, "AwsCrc32", { enumerable: true, get: function() {
      return aws_crc32_1.AwsCrc32;
    } });
  }
});

// node_modules/@smithy/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs10 = __commonJS({
  "node_modules/@smithy/util-hex-encoding/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toHex = exports.fromHex = void 0;
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    exports.fromHex = fromHex;
    function toHex(bytes) {
      let out = "";
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    exports.toHex = toHex;
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/Int64.js
var require_Int64 = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/Int64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Int64 = void 0;
    var util_hex_encoding_1 = require_dist_cjs10();
    var Int64 = class _Int64 {
      constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
          throw new Error("Int64 buffers must be exactly 8 bytes");
        }
      }
      static fromNumber(number) {
        if (number > 9223372036854776e3 || number < -9223372036854776e3) {
          throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
          bytes[i] = remaining;
        }
        if (number < 0) {
          negate(bytes);
        }
        return new _Int64(bytes);
      }
      valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 128;
        if (negative) {
          negate(bytes);
        }
        return parseInt((0, util_hex_encoding_1.toHex)(bytes), 16) * (negative ? -1 : 1);
      }
      toString() {
        return String(this.valueOf());
      }
    };
    exports.Int64 = Int64;
    function negate(bytes) {
      for (let i = 0; i < 8; i++) {
        bytes[i] ^= 255;
      }
      for (let i = 7; i > -1; i--) {
        bytes[i]++;
        if (bytes[i] !== 0)
          break;
      }
    }
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/HeaderMarshaller.js
var require_HeaderMarshaller = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/HeaderMarshaller.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HeaderMarshaller = void 0;
    var util_hex_encoding_1 = require_dist_cjs10();
    var Int64_1 = require_Int64();
    var HeaderMarshaller = class {
      constructor(toUtf8, fromUtf8) {
        this.toUtf8 = toUtf8;
        this.fromUtf8 = fromUtf8;
      }
      format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
          const bytes = this.fromUtf8(headerName);
          chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
          out.set(chunk, position);
          position += chunk.byteLength;
        }
        return out;
      }
      formatHeaderValue(header) {
        switch (header.type) {
          case "boolean":
            return Uint8Array.from([header.value ? 0 : 1]);
          case "byte":
            return Uint8Array.from([2, header.value]);
          case "short":
            const shortView = new DataView(new ArrayBuffer(3));
            shortView.setUint8(0, 3);
            shortView.setInt16(1, header.value, false);
            return new Uint8Array(shortView.buffer);
          case "integer":
            const intView = new DataView(new ArrayBuffer(5));
            intView.setUint8(0, 4);
            intView.setInt32(1, header.value, false);
            return new Uint8Array(intView.buffer);
          case "long":
            const longBytes = new Uint8Array(9);
            longBytes[0] = 5;
            longBytes.set(header.value.bytes, 1);
            return longBytes;
          case "binary":
            const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
            binView.setUint8(0, 6);
            binView.setUint16(1, header.value.byteLength, false);
            const binBytes = new Uint8Array(binView.buffer);
            binBytes.set(header.value, 3);
            return binBytes;
          case "string":
            const utf8Bytes = this.fromUtf8(header.value);
            const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
            strView.setUint8(0, 7);
            strView.setUint16(1, utf8Bytes.byteLength, false);
            const strBytes = new Uint8Array(strView.buffer);
            strBytes.set(utf8Bytes, 3);
            return strBytes;
          case "timestamp":
            const tsBytes = new Uint8Array(9);
            tsBytes[0] = 8;
            tsBytes.set(Int64_1.Int64.fromNumber(header.value.valueOf()).bytes, 1);
            return tsBytes;
          case "uuid":
            if (!UUID_PATTERN.test(header.value)) {
              throw new Error(`Invalid UUID received: ${header.value}`);
            }
            const uuidBytes = new Uint8Array(17);
            uuidBytes[0] = 9;
            uuidBytes.set((0, util_hex_encoding_1.fromHex)(header.value.replace(/\-/g, "")), 1);
            return uuidBytes;
        }
      }
      parse(headers) {
        const out = {};
        let position = 0;
        while (position < headers.byteLength) {
          const nameLength = headers.getUint8(position++);
          const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
          position += nameLength;
          switch (headers.getUint8(position++)) {
            case 0:
              out[name] = {
                type: BOOLEAN_TAG,
                value: true
              };
              break;
            case 1:
              out[name] = {
                type: BOOLEAN_TAG,
                value: false
              };
              break;
            case 2:
              out[name] = {
                type: BYTE_TAG,
                value: headers.getInt8(position++)
              };
              break;
            case 3:
              out[name] = {
                type: SHORT_TAG,
                value: headers.getInt16(position, false)
              };
              position += 2;
              break;
            case 4:
              out[name] = {
                type: INT_TAG,
                value: headers.getInt32(position, false)
              };
              position += 4;
              break;
            case 5:
              out[name] = {
                type: LONG_TAG,
                value: new Int64_1.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
              };
              position += 8;
              break;
            case 6:
              const binaryLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: BINARY_TAG,
                value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
              };
              position += binaryLength;
              break;
            case 7:
              const stringLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: STRING_TAG,
                value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
              };
              position += stringLength;
              break;
            case 8:
              out[name] = {
                type: TIMESTAMP_TAG,
                value: new Date(new Int64_1.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
              };
              position += 8;
              break;
            case 9:
              const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
              position += 16;
              out[name] = {
                type: UUID_TAG,
                value: `${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(0, 4))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(4, 6))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(6, 8))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(8, 10))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(10))}`
              };
              break;
            default:
              throw new Error(`Unrecognized header type tag`);
          }
        }
        return out;
      }
    };
    exports.HeaderMarshaller = HeaderMarshaller;
    var HEADER_VALUE_TYPE;
    (function(HEADER_VALUE_TYPE2) {
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["boolTrue"] = 0] = "boolTrue";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["boolFalse"] = 1] = "boolFalse";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["byte"] = 2] = "byte";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["short"] = 3] = "short";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["integer"] = 4] = "integer";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["long"] = 5] = "long";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["byteArray"] = 6] = "byteArray";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["string"] = 7] = "string";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["timestamp"] = 8] = "timestamp";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["uuid"] = 9] = "uuid";
    })(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
    var BOOLEAN_TAG = "boolean";
    var BYTE_TAG = "byte";
    var SHORT_TAG = "short";
    var INT_TAG = "integer";
    var LONG_TAG = "long";
    var BINARY_TAG = "binary";
    var STRING_TAG = "string";
    var TIMESTAMP_TAG = "timestamp";
    var UUID_TAG = "uuid";
    var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/splitMessage.js
var require_splitMessage = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/splitMessage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.splitMessage = void 0;
    var crc32_1 = require_build2();
    var PRELUDE_MEMBER_LENGTH = 4;
    var PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
    var CHECKSUM_LENGTH = 4;
    var MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
    function splitMessage({ byteLength, byteOffset, buffer }) {
      if (byteLength < MINIMUM_MESSAGE_LENGTH) {
        throw new Error("Provided message too short to accommodate event stream message overhead");
      }
      const view = new DataView(buffer, byteOffset, byteLength);
      const messageLength = view.getUint32(0, false);
      if (byteLength !== messageLength) {
        throw new Error("Reported message length does not match received message length");
      }
      const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
      const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
      const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
      const checksummer = new crc32_1.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
      if (expectedPreludeChecksum !== checksummer.digest()) {
        throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);
      }
      checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));
      if (expectedMessageChecksum !== checksummer.digest()) {
        throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);
      }
      return {
        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
        body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))
      };
    }
    exports.splitMessage = splitMessage;
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/EventStreamCodec.js
var require_EventStreamCodec = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/EventStreamCodec.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventStreamCodec = void 0;
    var crc32_1 = require_build2();
    var HeaderMarshaller_1 = require_HeaderMarshaller();
    var splitMessage_1 = require_splitMessage();
    var EventStreamCodec = class {
      constructor(toUtf8, fromUtf8) {
        this.headerMarshaller = new HeaderMarshaller_1.HeaderMarshaller(toUtf8, fromUtf8);
        this.messageBuffer = [];
        this.isEndOfStream = false;
      }
      feed(message) {
        this.messageBuffer.push(this.decode(message));
      }
      endOfStream() {
        this.isEndOfStream = true;
      }
      getMessage() {
        const message = this.messageBuffer.pop();
        const isEndOfStream = this.isEndOfStream;
        return {
          getMessage() {
            return message;
          },
          isEndOfStream() {
            return isEndOfStream;
          }
        };
      }
      getAvailableMessages() {
        const messages = this.messageBuffer;
        this.messageBuffer = [];
        const isEndOfStream = this.isEndOfStream;
        return {
          getMessages() {
            return messages;
          },
          isEndOfStream() {
            return isEndOfStream;
          }
        };
      }
      encode({ headers: rawHeaders, body }) {
        const headers = this.headerMarshaller.format(rawHeaders);
        const length = headers.byteLength + body.byteLength + 16;
        const out = new Uint8Array(length);
        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        const checksum = new crc32_1.Crc32();
        view.setUint32(0, length, false);
        view.setUint32(4, headers.byteLength, false);
        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
        out.set(headers, 12);
        out.set(body, headers.byteLength + 12);
        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
        return out;
      }
      decode(message) {
        const { headers, body } = (0, splitMessage_1.splitMessage)(message);
        return { headers: this.headerMarshaller.parse(headers), body };
      }
      formatHeaders(rawHeaders) {
        return this.headerMarshaller.format(rawHeaders);
      }
    };
    exports.EventStreamCodec = EventStreamCodec;
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/Message.js
var require_Message = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/Message.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/MessageDecoderStream.js
var require_MessageDecoderStream = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/MessageDecoderStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MessageDecoderStream = void 0;
    var MessageDecoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const bytes of this.options.inputStream) {
          const decoded = this.options.decoder.decode(bytes);
          yield decoded;
        }
      }
    };
    exports.MessageDecoderStream = MessageDecoderStream;
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/MessageEncoderStream.js
var require_MessageEncoderStream = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/MessageEncoderStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MessageEncoderStream = void 0;
    var MessageEncoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const msg of this.options.messageStream) {
          const encoded = this.options.encoder.encode(msg);
          yield encoded;
        }
        if (this.options.includeEndFrame) {
          yield new Uint8Array(0);
        }
      }
    };
    exports.MessageEncoderStream = MessageEncoderStream;
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/SmithyMessageDecoderStream.js
var require_SmithyMessageDecoderStream = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/SmithyMessageDecoderStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SmithyMessageDecoderStream = void 0;
    var SmithyMessageDecoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const message of this.options.messageStream) {
          const deserialized = await this.options.deserializer(message);
          if (deserialized === void 0)
            continue;
          yield deserialized;
        }
      }
    };
    exports.SmithyMessageDecoderStream = SmithyMessageDecoderStream;
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/SmithyMessageEncoderStream.js
var require_SmithyMessageEncoderStream = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/SmithyMessageEncoderStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SmithyMessageEncoderStream = void 0;
    var SmithyMessageEncoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const chunk of this.options.inputStream) {
          const payloadBuf = this.options.serializer(chunk);
          yield payloadBuf;
        }
      }
    };
    exports.SmithyMessageEncoderStream = SmithyMessageEncoderStream;
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/index.js
var require_dist_cjs11 = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EventStreamCodec(), exports);
    tslib_1.__exportStar(require_HeaderMarshaller(), exports);
    tslib_1.__exportStar(require_Int64(), exports);
    tslib_1.__exportStar(require_Message(), exports);
    tslib_1.__exportStar(require_MessageDecoderStream(), exports);
    tslib_1.__exportStar(require_MessageEncoderStream(), exports);
    tslib_1.__exportStar(require_SmithyMessageDecoderStream(), exports);
    tslib_1.__exportStar(require_SmithyMessageEncoderStream(), exports);
  }
});

// node_modules/@smithy/util-middleware/dist-cjs/getSmithyContext.js
var require_getSmithyContext = __commonJS({
  "node_modules/@smithy/util-middleware/dist-cjs/getSmithyContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSmithyContext = void 0;
    var types_1 = require_dist_cjs();
    var getSmithyContext = (context) => context[types_1.SMITHY_CONTEXT_KEY] || (context[types_1.SMITHY_CONTEXT_KEY] = {});
    exports.getSmithyContext = getSmithyContext;
  }
});

// node_modules/@smithy/util-middleware/dist-cjs/normalizeProvider.js
var require_normalizeProvider = __commonJS({
  "node_modules/@smithy/util-middleware/dist-cjs/normalizeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.normalizeProvider = void 0;
    var normalizeProvider = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
    exports.normalizeProvider = normalizeProvider;
  }
});

// node_modules/@smithy/util-middleware/dist-cjs/index.js
var require_dist_cjs12 = __commonJS({
  "node_modules/@smithy/util-middleware/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getSmithyContext(), exports);
    tslib_1.__exportStar(require_normalizeProvider(), exports);
  }
});

// node_modules/@smithy/is-array-buffer/dist-cjs/index.js
var require_dist_cjs13 = __commonJS({
  "node_modules/@smithy/is-array-buffer/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isArrayBuffer = void 0;
    var isArrayBuffer = (arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
    exports.isArrayBuffer = isArrayBuffer;
  }
});

// node_modules/@smithy/util-buffer-from/dist-cjs/index.js
var require_dist_cjs14 = __commonJS({
  "node_modules/@smithy/util-buffer-from/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromString = exports.fromArrayBuffer = void 0;
    var is_array_buffer_1 = require_dist_cjs13();
    var buffer_1 = require("buffer");
    var fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, is_array_buffer_1.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return buffer_1.Buffer.from(input, offset, length);
    };
    exports.fromArrayBuffer = fromArrayBuffer;
    var fromString = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
    };
    exports.fromString = fromString;
  }
});

// node_modules/@smithy/util-utf8/dist-cjs/fromUtf8.js
var require_fromUtf8 = __commonJS({
  "node_modules/@smithy/util-utf8/dist-cjs/fromUtf8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs14();
    var fromUtf8 = (input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
    exports.fromUtf8 = fromUtf8;
  }
});

// node_modules/@smithy/util-utf8/dist-cjs/toUint8Array.js
var require_toUint8Array = __commonJS({
  "node_modules/@smithy/util-utf8/dist-cjs/toUint8Array.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUint8Array = void 0;
    var fromUtf8_1 = require_fromUtf8();
    var toUint8Array = (data) => {
      if (typeof data === "string") {
        return (0, fromUtf8_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    };
    exports.toUint8Array = toUint8Array;
  }
});

// node_modules/@smithy/util-utf8/dist-cjs/toUtf8.js
var require_toUtf8 = __commonJS({
  "node_modules/@smithy/util-utf8/dist-cjs/toUtf8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs14();
    var toUtf8 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    exports.toUtf8 = toUtf8;
  }
});

// node_modules/@smithy/util-utf8/dist-cjs/index.js
var require_dist_cjs15 = __commonJS({
  "node_modules/@smithy/util-utf8/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromUtf8(), exports);
    tslib_1.__exportStar(require_toUint8Array(), exports);
    tslib_1.__exportStar(require_toUtf8(), exports);
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/constants.js
var require_constants = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_PRESIGNED_TTL = exports.KEY_TYPE_IDENTIFIER = exports.MAX_CACHE_SIZE = exports.UNSIGNED_PAYLOAD = exports.EVENT_ALGORITHM_IDENTIFIER = exports.ALGORITHM_IDENTIFIER_V4A = exports.ALGORITHM_IDENTIFIER = exports.UNSIGNABLE_PATTERNS = exports.SEC_HEADER_PATTERN = exports.PROXY_HEADER_PATTERN = exports.ALWAYS_UNSIGNABLE_HEADERS = exports.HOST_HEADER = exports.TOKEN_HEADER = exports.SHA256_HEADER = exports.SIGNATURE_HEADER = exports.GENERATED_HEADERS = exports.DATE_HEADER = exports.AMZ_DATE_HEADER = exports.AUTH_HEADER = exports.REGION_SET_PARAM = exports.TOKEN_QUERY_PARAM = exports.SIGNATURE_QUERY_PARAM = exports.EXPIRES_QUERY_PARAM = exports.SIGNED_HEADERS_QUERY_PARAM = exports.AMZ_DATE_QUERY_PARAM = exports.CREDENTIAL_QUERY_PARAM = exports.ALGORITHM_QUERY_PARAM = void 0;
    exports.ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    exports.CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    exports.AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    exports.SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    exports.EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    exports.SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    exports.TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    exports.REGION_SET_PARAM = "X-Amz-Region-Set";
    exports.AUTH_HEADER = "authorization";
    exports.AMZ_DATE_HEADER = exports.AMZ_DATE_QUERY_PARAM.toLowerCase();
    exports.DATE_HEADER = "date";
    exports.GENERATED_HEADERS = [exports.AUTH_HEADER, exports.AMZ_DATE_HEADER, exports.DATE_HEADER];
    exports.SIGNATURE_HEADER = exports.SIGNATURE_QUERY_PARAM.toLowerCase();
    exports.SHA256_HEADER = "x-amz-content-sha256";
    exports.TOKEN_HEADER = exports.TOKEN_QUERY_PARAM.toLowerCase();
    exports.HOST_HEADER = "host";
    exports.ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    exports.PROXY_HEADER_PATTERN = /^proxy-/;
    exports.SEC_HEADER_PATTERN = /^sec-/;
    exports.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    exports.ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    exports.ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
    exports.EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    exports.UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    exports.MAX_CACHE_SIZE = 50;
    exports.KEY_TYPE_IDENTIFIER = "aws4_request";
    exports.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/credentialDerivation.js
var require_credentialDerivation = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/credentialDerivation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.clearCredentialCache = exports.getSigningKey = exports.createScope = void 0;
    var util_hex_encoding_1 = require_dist_cjs10();
    var util_utf8_1 = require_dist_cjs15();
    var constants_1 = require_constants();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`;
    exports.createScope = createScope;
    var getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${(0, util_hex_encoding_1.toHex)(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, constants_1.KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    };
    exports.getSigningKey = getSigningKey;
    var clearCredentialCache = () => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    };
    exports.clearCredentialCache = clearCredentialCache;
    var hmac = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update((0, util_utf8_1.toUint8Array)(data));
      return hash.digest();
    };
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/getCanonicalHeaders.js
var require_getCanonicalHeaders = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/getCanonicalHeaders.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCanonicalHeaders = void 0;
    var constants_1 = require_constants();
    var getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) || constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    };
    exports.getCanonicalHeaders = getCanonicalHeaders;
  }
});

// node_modules/@smithy/util-uri-escape/dist-cjs/escape-uri.js
var require_escape_uri = __commonJS({
  "node_modules/@smithy/util-uri-escape/dist-cjs/escape-uri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUri = void 0;
    var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    exports.escapeUri = escapeUri;
    var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;
  }
});

// node_modules/@smithy/util-uri-escape/dist-cjs/escape-uri-path.js
var require_escape_uri_path = __commonJS({
  "node_modules/@smithy/util-uri-escape/dist-cjs/escape-uri-path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri();
    var escapeUriPath = (uri) => uri.split("/").map(escape_uri_1.escapeUri).join("/");
    exports.escapeUriPath = escapeUriPath;
  }
});

// node_modules/@smithy/util-uri-escape/dist-cjs/index.js
var require_dist_cjs16 = __commonJS({
  "node_modules/@smithy/util-uri-escape/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_escape_uri(), exports);
    tslib_1.__exportStar(require_escape_uri_path(), exports);
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/getCanonicalQuery.js
var require_getCanonicalQuery = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/getCanonicalQuery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCanonicalQuery = void 0;
    var util_uri_escape_1 = require_dist_cjs16();
    var constants_1 = require_constants();
    var getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") {
          serialized[key] = `${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value.slice(0).reduce((encoded, value2) => encoded.concat([`${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value2)}`]), []).sort().join("&");
        }
      }
      return keys.map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    };
    exports.getCanonicalQuery = getCanonicalQuery;
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/getPayloadHash.js
var require_getPayloadHash = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/getPayloadHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPayloadHash = void 0;
    var is_array_buffer_1 = require_dist_cjs13();
    var util_hex_encoding_1 = require_dist_cjs10();
    var util_utf8_1 = require_dist_cjs15();
    var constants_1 = require_constants();
    var getPayloadHash = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, is_array_buffer_1.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update((0, util_utf8_1.toUint8Array)(body));
        return (0, util_hex_encoding_1.toHex)(await hashCtor.digest());
      }
      return constants_1.UNSIGNED_PAYLOAD;
    };
    exports.getPayloadHash = getPayloadHash;
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/headerUtil.js
var require_headerUtil = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/headerUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deleteHeader = exports.getHeaderValue = exports.hasHeader = void 0;
    var hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
    exports.hasHeader = hasHeader;
    var getHeaderValue = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return headers[headerName];
        }
      }
      return void 0;
    };
    exports.getHeaderValue = getHeaderValue;
    var deleteHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          delete headers[headerName];
        }
      }
    };
    exports.deleteHeader = deleteHeader;
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/cloneRequest.js
var require_cloneRequest = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/cloneRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cloneQuery = exports.cloneRequest = void 0;
    var cloneRequest = ({ headers, query, ...rest }) => ({
      ...rest,
      headers: { ...headers },
      query: query ? (0, exports.cloneQuery)(query) : void 0
    });
    exports.cloneRequest = cloneRequest;
    var cloneQuery = (query) => Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return {
        ...carry,
        [paramName]: Array.isArray(param) ? [...param] : param
      };
    }, {});
    exports.cloneQuery = cloneQuery;
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/moveHeadersToQuery.js
var require_moveHeadersToQuery = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/moveHeadersToQuery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.moveHeadersToQuery = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var moveHeadersToQuery = (request, options = {}) => {
      var _a;
      const { headers, query = {} } = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !((_a = options.unhoistableHeaders) === null || _a === void 0 ? void 0 : _a.has(lname))) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query
      };
    };
    exports.moveHeadersToQuery = moveHeadersToQuery;
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/prepareRequest.js
var require_prepareRequest = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/prepareRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareRequest = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var constants_1 = require_constants();
    var prepareRequest = (request) => {
      request = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const headerName of Object.keys(request.headers)) {
        if (constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    };
    exports.prepareRequest = prepareRequest;
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/utilDate.js
var require_utilDate = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/utilDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toDate = exports.iso8601 = void 0;
    var iso8601 = (time) => (0, exports.toDate)(time).toISOString().replace(/\.\d{3}Z$/, "Z");
    exports.iso8601 = iso8601;
    var toDate = (time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
    exports.toDate = toDate;
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/SignatureV4.js
var require_SignatureV4 = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/SignatureV4.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SignatureV4 = void 0;
    var eventstream_codec_1 = require_dist_cjs11();
    var util_hex_encoding_1 = require_dist_cjs10();
    var util_middleware_1 = require_dist_cjs12();
    var util_utf8_1 = require_dist_cjs15();
    var constants_1 = require_constants();
    var credentialDerivation_1 = require_credentialDerivation();
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    var getPayloadHash_1 = require_getPayloadHash();
    var headerUtil_1 = require_headerUtil();
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    var prepareRequest_1 = require_prepareRequest();
    var utilDate_1 = require_utilDate();
    var SignatureV4 = class {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.headerMarshaller = new eventstream_codec_1.HeaderMarshaller(util_utf8_1.toUtf8, util_utf8_1.fromUtf8);
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0, util_middleware_1.normalizeProvider)(region);
        this.credentialProvider = (0, util_middleware_1.normalizeProvider)(credentials);
      }
      async presign(originalRequest, options = {}) {
        const { signingDate = /* @__PURE__ */ new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
          return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
        }
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const request = (0, moveHeadersToQuery_1.moveHeadersToQuery)((0, prepareRequest_1.prepareRequest)(originalRequest), { unhoistableHeaders });
        if (credentials.sessionToken) {
          request.query[constants_1.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[constants_1.ALGORITHM_QUERY_PARAM] = constants_1.ALGORITHM_IDENTIFIER;
        request.query[constants_1.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[constants_1.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await (0, getPayloadHash_1.getPayloadHash)(originalRequest, this.sha256)));
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else if (toSign.message) {
          return this.signMessage(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = /* @__PURE__ */ new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const hashedPayload = await (0, getPayloadHash_1.getPayloadHash)({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, util_hex_encoding_1.toHex)(await hash.digest());
        const stringToSign = [
          constants_1.EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signMessage(signableMessage, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService }) {
        const promise = this.signEvent({
          headers: this.headerMarshaller.format(signableMessage.message.headers),
          payload: signableMessage.message.body
        }, {
          signingDate,
          signingRegion,
          signingService,
          priorSignature: signableMessage.priorSignature
        });
        return promise.then((signature) => {
          return { message: signableMessage.message, signature };
        });
      }
      async signString(stringToSign, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      async signRequest(requestToSign, { signingDate = /* @__PURE__ */ new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const request = (0, prepareRequest_1.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await (0, getPayloadHash_1.getPayloadHash)(request, this.sha256);
        if (!(0, headerUtil_1.hasHeader)(constants_1.SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[constants_1.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[constants_1.AUTH_HEADER] = `${constants_1.ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, getCanonicalQuery_1.getCanonicalQuery)(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update((0, util_utf8_1.toUint8Array)(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${constants_1.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, util_hex_encoding_1.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split("/")) {
            if ((pathSegment === null || pathSegment === void 0 ? void 0 : pathSegment.length) === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${(path === null || path === void 0 ? void 0 : path.startsWith("/")) ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && (path === null || path === void 0 ? void 0 : path.endsWith("/")) ? "/" : ""}`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return (0, credentialDerivation_1.getSigningKey)(this.sha256, credentials, shortDate, region, service || this.service);
      }
      validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") {
          throw new Error("Resolved credential object is not valid");
        }
      }
    };
    exports.SignatureV4 = SignatureV4;
    var formatDate = (now) => {
      const longDate = (0, utilDate_1.iso8601)(now).replace(/[\-:]/g, "");
      return {
        longDate,
        shortDate: longDate.slice(0, 8)
      };
    };
    var getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(";");
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/index.js
var require_dist_cjs17 = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareRequest = exports.moveHeadersToQuery = exports.getPayloadHash = exports.getCanonicalQuery = exports.getCanonicalHeaders = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SignatureV4(), exports);
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    Object.defineProperty(exports, "getCanonicalHeaders", { enumerable: true, get: function() {
      return getCanonicalHeaders_1.getCanonicalHeaders;
    } });
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    Object.defineProperty(exports, "getCanonicalQuery", { enumerable: true, get: function() {
      return getCanonicalQuery_1.getCanonicalQuery;
    } });
    var getPayloadHash_1 = require_getPayloadHash();
    Object.defineProperty(exports, "getPayloadHash", { enumerable: true, get: function() {
      return getPayloadHash_1.getPayloadHash;
    } });
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    Object.defineProperty(exports, "moveHeadersToQuery", { enumerable: true, get: function() {
      return moveHeadersToQuery_1.moveHeadersToQuery;
    } });
    var prepareRequest_1 = require_prepareRequest();
    Object.defineProperty(exports, "prepareRequest", { enumerable: true, get: function() {
      return prepareRequest_1.prepareRequest;
    } });
    tslib_1.__exportStar(require_credentialDerivation(), exports);
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/awsAuthConfiguration.js
var require_awsAuthConfiguration = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/awsAuthConfiguration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSigV4AuthConfig = exports.resolveAwsAuthConfig = void 0;
    var property_provider_1 = require_dist_cjs8();
    var signature_v4_1 = require_dist_cjs17();
    var util_middleware_1 = require_dist_cjs12();
    var CREDENTIAL_EXPIRE_WINDOW = 3e5;
    var resolveAwsAuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else if (input.regionInfoProvider) {
        signer = () => (0, util_middleware_1.normalizeProvider)(input.region)().then(async (region) => [
          await input.regionInfoProvider(region, {
            useFipsEndpoint: await input.useFipsEndpoint(),
            useDualstackEndpoint: await input.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          input.signingRegion = input.signingRegion || signingRegion || region;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new SignerCtor(params);
        });
      } else {
        signer = async (authScheme) => {
          authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: input.signingName || input.defaultSigningName,
            signingRegion: await (0, util_middleware_1.normalizeProvider)(input.region)(),
            properties: {}
          }, authScheme);
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          input.signingRegion = input.signingRegion || signingRegion;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new SignerCtor(params);
        };
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    exports.resolveAwsAuthConfig = resolveAwsAuthConfig;
    var resolveSigV4AuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else {
        signer = (0, util_middleware_1.normalizeProvider)(new signature_v4_1.SignatureV4({
          credentials: normalizedCreds,
          region: input.region,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        }));
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    exports.resolveSigV4AuthConfig = resolveSigV4AuthConfig;
    var normalizeCredentialProvider = (credentials) => {
      if (typeof credentials === "function") {
        return (0, property_provider_1.memoize)(credentials, (credentials2) => credentials2.expiration !== void 0 && credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials2) => credentials2.expiration !== void 0);
      }
      return (0, util_middleware_1.normalizeProvider)(credentials);
    };
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js
var require_getSkewCorrectedDate = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSkewCorrectedDate = void 0;
    var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
    exports.getSkewCorrectedDate = getSkewCorrectedDate;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js
var require_isClockSkewed = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isClockSkewed = void 0;
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var isClockSkewed = (clockTime, systemClockOffset) => Math.abs((0, getSkewCorrectedDate_1.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 3e5;
    exports.isClockSkewed = isClockSkewed;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js
var require_getUpdatedSystemClockOffset = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUpdatedSystemClockOffset = void 0;
    var isClockSkewed_1 = require_isClockSkewed();
    var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if ((0, isClockSkewed_1.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
    exports.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/awsAuthMiddleware.js
var require_awsAuthMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/awsAuthMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin = exports.awsAuthMiddlewareOptions = exports.awsAuthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var getUpdatedSystemClockOffset_1 = require_getUpdatedSystemClockOffset();
    var awsAuthMiddleware = (options) => (next, context) => async function(args) {
      var _a, _b, _c, _d;
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const authScheme = (_c = (_b = (_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b.authSchemes) === null || _c === void 0 ? void 0 : _c[0];
      const multiRegionOverride = (authScheme === null || authScheme === void 0 ? void 0 : authScheme.name) === "sigv4a" ? (_d = authScheme === null || authScheme === void 0 ? void 0 : authScheme.signingRegionSet) === null || _d === void 0 ? void 0 : _d.join(",") : void 0;
      const signer = await options.signer(authScheme);
      const output = await next({
        ...args,
        request: await signer.sign(args.request, {
          signingDate: (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(options.systemClockOffset),
          signingRegion: multiRegionOverride || context["signing_region"],
          signingService: context["signing_service"]
        })
      }).catch((error) => {
        var _a2;
        const serverTime = (_a2 = error.ServerTime) !== null && _a2 !== void 0 ? _a2 : getDateHeader(error.$response);
        if (serverTime) {
          options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(serverTime, options.systemClockOffset);
        }
        throw error;
      });
      const dateHeader = getDateHeader(output.response);
      if (dateHeader) {
        options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(dateHeader, options.systemClockOffset);
      }
      return output;
    };
    exports.awsAuthMiddleware = awsAuthMiddleware;
    var getDateHeader = (response) => {
      var _a, _b, _c;
      return protocol_http_1.HttpResponse.isInstance(response) ? (_b = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.date) !== null && _b !== void 0 ? _b : (_c = response.headers) === null || _c === void 0 ? void 0 : _c.Date : void 0;
    };
    exports.awsAuthMiddlewareOptions = {
      name: "awsAuthMiddleware",
      tags: ["SIGNATURE", "AWSAUTH"],
      relation: "after",
      toMiddleware: "retryMiddleware",
      override: true
    };
    var getAwsAuthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.awsAuthMiddleware)(options), exports.awsAuthMiddlewareOptions);
      }
    });
    exports.getAwsAuthPlugin = getAwsAuthPlugin;
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js
var require_dist_cjs18 = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_awsAuthConfiguration(), exports);
    tslib_1.__exportStar(require_awsAuthMiddleware(), exports);
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js
var require_configurations2 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveUserAgentConfig = void 0;
    function resolveUserAgentConfig(input) {
      return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
      };
    }
    exports.resolveUserAgentConfig = resolveUserAgentConfig;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json
var require_partitions = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json"(exports, module2) {
    module2.exports = {
      partitions: [{
        id: "aws",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-east-1",
          name: "aws",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^(us|eu|ap|sa|ca|me|af|il)\\-\\w+\\-\\d+$",
        regions: {
          "af-south-1": {
            description: "Africa (Cape Town)"
          },
          "ap-east-1": {
            description: "Asia Pacific (Hong Kong)"
          },
          "ap-northeast-1": {
            description: "Asia Pacific (Tokyo)"
          },
          "ap-northeast-2": {
            description: "Asia Pacific (Seoul)"
          },
          "ap-northeast-3": {
            description: "Asia Pacific (Osaka)"
          },
          "ap-south-1": {
            description: "Asia Pacific (Mumbai)"
          },
          "ap-south-2": {
            description: "Asia Pacific (Hyderabad)"
          },
          "ap-southeast-1": {
            description: "Asia Pacific (Singapore)"
          },
          "ap-southeast-2": {
            description: "Asia Pacific (Sydney)"
          },
          "ap-southeast-3": {
            description: "Asia Pacific (Jakarta)"
          },
          "ap-southeast-4": {
            description: "Asia Pacific (Melbourne)"
          },
          "aws-global": {
            description: "AWS Standard global region"
          },
          "ca-central-1": {
            description: "Canada (Central)"
          },
          "eu-central-1": {
            description: "Europe (Frankfurt)"
          },
          "eu-central-2": {
            description: "Europe (Zurich)"
          },
          "eu-north-1": {
            description: "Europe (Stockholm)"
          },
          "eu-south-1": {
            description: "Europe (Milan)"
          },
          "eu-south-2": {
            description: "Europe (Spain)"
          },
          "eu-west-1": {
            description: "Europe (Ireland)"
          },
          "eu-west-2": {
            description: "Europe (London)"
          },
          "eu-west-3": {
            description: "Europe (Paris)"
          },
          "il-central-1": {
            description: "Israel (Tel Aviv)"
          },
          "me-central-1": {
            description: "Middle East (UAE)"
          },
          "me-south-1": {
            description: "Middle East (Bahrain)"
          },
          "sa-east-1": {
            description: "South America (Sao Paulo)"
          },
          "us-east-1": {
            description: "US East (N. Virginia)"
          },
          "us-east-2": {
            description: "US East (Ohio)"
          },
          "us-west-1": {
            description: "US West (N. California)"
          },
          "us-west-2": {
            description: "US West (Oregon)"
          }
        }
      }, {
        id: "aws-cn",
        outputs: {
          dnsSuffix: "amazonaws.com.cn",
          dualStackDnsSuffix: "api.amazonwebservices.com.cn",
          implicitGlobalRegion: "cn-northwest-1",
          name: "aws-cn",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        regions: {
          "aws-cn-global": {
            description: "AWS China global region"
          },
          "cn-north-1": {
            description: "China (Beijing)"
          },
          "cn-northwest-1": {
            description: "China (Ningxia)"
          }
        }
      }, {
        id: "aws-us-gov",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-gov-west-1",
          name: "aws-us-gov",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        regions: {
          "aws-us-gov-global": {
            description: "AWS GovCloud (US) global region"
          },
          "us-gov-east-1": {
            description: "AWS GovCloud (US-East)"
          },
          "us-gov-west-1": {
            description: "AWS GovCloud (US-West)"
          }
        }
      }, {
        id: "aws-iso",
        outputs: {
          dnsSuffix: "c2s.ic.gov",
          dualStackDnsSuffix: "c2s.ic.gov",
          implicitGlobalRegion: "us-iso-east-1",
          name: "aws-iso",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-global": {
            description: "AWS ISO (US) global region"
          },
          "us-iso-east-1": {
            description: "US ISO East"
          },
          "us-iso-west-1": {
            description: "US ISO WEST"
          }
        }
      }, {
        id: "aws-iso-b",
        outputs: {
          dnsSuffix: "sc2s.sgov.gov",
          dualStackDnsSuffix: "sc2s.sgov.gov",
          implicitGlobalRegion: "us-isob-east-1",
          name: "aws-iso-b",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-b-global": {
            description: "AWS ISOB (US) global region"
          },
          "us-isob-east-1": {
            description: "US ISOB East (Ohio)"
          }
        }
      }, {
        id: "aws-iso-e",
        outputs: {
          dnsSuffix: "cloud.adc-e.uk",
          dualStackDnsSuffix: "cloud.adc-e.uk",
          implicitGlobalRegion: "eu-isoe-west-1",
          name: "aws-iso-e",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^eu\\-isoe\\-\\w+\\-\\d+$",
        regions: {}
      }, {
        id: "aws-iso-f",
        outputs: {
          dnsSuffix: "csp.hci.ic.gov",
          dualStackDnsSuffix: "csp.hci.ic.gov",
          implicitGlobalRegion: "us-isof-south-1",
          name: "aws-iso-f",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isof\\-\\w+\\-\\d+$",
        regions: {}
      }],
      version: "1.1"
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js
var require_partition = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUserAgentPrefix = exports.useDefaultPartitionInfo = exports.setPartitionInfo = exports.partition = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var partitions_json_1 = tslib_1.__importDefault(require_partitions());
    var selectedPartitionsInfo = partitions_json_1.default;
    var selectedUserAgentPrefix = "";
    var partition = (value) => {
      const { partitions } = selectedPartitionsInfo;
      for (const partition2 of partitions) {
        const { regions, outputs } = partition2;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return {
              ...outputs,
              ...regionData
            };
          }
        }
      }
      for (const partition2 of partitions) {
        const { regionRegex, outputs } = partition2;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs
          };
        }
      }
      const DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
      if (!DEFAULT_PARTITION) {
        throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
      }
      return {
        ...DEFAULT_PARTITION.outputs
      };
    };
    exports.partition = partition;
    var setPartitionInfo = (partitionsInfo, userAgentPrefix = "") => {
      selectedPartitionsInfo = partitionsInfo;
      selectedUserAgentPrefix = userAgentPrefix;
    };
    exports.setPartitionInfo = setPartitionInfo;
    var useDefaultPartitionInfo = () => {
      (0, exports.setPartitionInfo)(partitions_json_1.default, "");
    };
    exports.useDefaultPartitionInfo = useDefaultPartitionInfo;
    var getUserAgentPrefix = () => selectedUserAgentPrefix;
    exports.getUserAgentPrefix = getUserAgentPrefix;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js
var require_isIpAddress = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isIpAddress = void 0;
    var IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
    var isIpAddress = (value) => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]");
    exports.isIpAddress = isIpAddress;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js
var require_debugId = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.debugId = void 0;
    exports.debugId = "endpoints";
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js
var require_toDebugString = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toDebugString = void 0;
    function toDebugString(input) {
      if (typeof input !== "object" || input == null) {
        return input;
      }
      if ("ref" in input) {
        return `$${toDebugString(input.ref)}`;
      }
      if ("fn" in input) {
        return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
      }
      return JSON.stringify(input, null, 2);
    }
    exports.toDebugString = toDebugString;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js
var require_debug = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_debugId(), exports);
    tslib_1.__exportStar(require_toDebugString(), exports);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js
var require_EndpointError = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointError = void 0;
    var EndpointError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "EndpointError";
      }
    };
    exports.EndpointError = EndpointError;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js
var require_EndpointRuleObject2 = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js
var require_ErrorRuleObject2 = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js
var require_RuleSetObject2 = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js
var require_TreeRuleObject2 = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js
var require_shared2 = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js
var require_types2 = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EndpointError(), exports);
    tslib_1.__exportStar(require_EndpointRuleObject2(), exports);
    tslib_1.__exportStar(require_ErrorRuleObject2(), exports);
    tslib_1.__exportStar(require_RuleSetObject2(), exports);
    tslib_1.__exportStar(require_TreeRuleObject2(), exports);
    tslib_1.__exportStar(require_shared2(), exports);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js
var require_isValidHostLabel = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isValidHostLabel = void 0;
    var VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
    var isValidHostLabel = (value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split(".");
      for (const label of labels) {
        if (!(0, exports.isValidHostLabel)(label)) {
          return false;
        }
      }
      return true;
    };
    exports.isValidHostLabel = isValidHostLabel;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js
var require_isVirtualHostableS3Bucket = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isVirtualHostableS3Bucket = void 0;
    var isIpAddress_1 = require_isIpAddress();
    var isValidHostLabel_1 = require_isValidHostLabel();
    var isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split(".")) {
          if (!(0, exports.isVirtualHostableS3Bucket)(label)) {
            return false;
          }
        }
        return true;
      }
      if (!(0, isValidHostLabel_1.isValidHostLabel)(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if ((0, isIpAddress_1.isIpAddress)(value)) {
        return false;
      }
      return true;
    };
    exports.isVirtualHostableS3Bucket = isVirtualHostableS3Bucket;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js
var require_parseArn = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseArn = void 0;
    var parseArn = (value) => {
      const segments = value.split(":");
      if (segments.length < 6)
        return null;
      const [arn, partition, service, region, accountId, ...resourceId] = segments;
      if (arn !== "arn" || partition === "" || service === "" || resourceId[0] === "")
        return null;
      return {
        partition,
        service,
        region,
        accountId,
        resourceId: resourceId[0].includes("/") ? resourceId[0].split("/") : resourceId
      };
    };
    exports.parseArn = parseArn;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js
var require_aws = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_isVirtualHostableS3Bucket(), exports);
    tslib_1.__exportStar(require_parseArn(), exports);
    tslib_1.__exportStar(require_partition(), exports);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js
var require_booleanEquals = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.booleanEquals = void 0;
    var booleanEquals = (value1, value2) => value1 === value2;
    exports.booleanEquals = booleanEquals;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js
var require_getAttrPathList = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAttrPathList = void 0;
    var types_1 = require_types2();
    var getAttrPathList = (path) => {
      const parts = path.split(".");
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
          if (part.indexOf("]") !== part.length - 1) {
            throw new types_1.EndpointError(`Path: '${path}' does not end with ']'`);
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new types_1.EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    };
    exports.getAttrPathList = getAttrPathList;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js
var require_getAttr = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAttr = void 0;
    var types_1 = require_types2();
    var getAttrPathList_1 = require_getAttrPathList();
    var getAttr = (value, path) => (0, getAttrPathList_1.getAttrPathList)(path).reduce((acc, index) => {
      if (typeof acc !== "object") {
        throw new types_1.EndpointError(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
      } else if (Array.isArray(acc)) {
        return acc[parseInt(index)];
      }
      return acc[index];
    }, value);
    exports.getAttr = getAttr;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js
var require_isSet = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSet = void 0;
    var isSet = (value) => value != null;
    exports.isSet = isSet;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js
var require_not = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.not = void 0;
    var not = (value) => !value;
    exports.not = not;
  }
});

// node_modules/@aws-sdk/types/dist-cjs/abort.js
var require_abort2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/abort.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/auth.js
var require_auth2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/auth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpAuthLocation = void 0;
    var types_1 = require_dist_cjs();
    Object.defineProperty(exports, "HttpAuthLocation", { enumerable: true, get: function() {
      return types_1.HttpAuthLocation;
    } });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/blob/blob-types.js
var require_blob_types = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/blob/blob-types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/checksum.js
var require_checksum3 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/checksum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/client.js
var require_client2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/command.js
var require_command2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/command.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/connection.js
var require_connection2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/connection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/credentials.js
var require_credentials = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/credentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/crypto.js
var require_crypto2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/dns.js
var require_dns = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/dns.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HostAddressType = void 0;
    var HostAddressType;
    (function(HostAddressType2) {
      HostAddressType2["AAAA"] = "AAAA";
      HostAddressType2["A"] = "A";
    })(HostAddressType = exports.HostAddressType || (exports.HostAddressType = {}));
  }
});

// node_modules/@aws-sdk/types/dist-cjs/encode.js
var require_encode2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/encode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/endpoint.js
var require_endpoint2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/endpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointURLScheme = void 0;
    var types_1 = require_dist_cjs();
    Object.defineProperty(exports, "EndpointURLScheme", { enumerable: true, get: function() {
      return types_1.EndpointURLScheme;
    } });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/eventStream.js
var require_eventStream2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/eventStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/extensions/index.js
var require_extensions3 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/extensions/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/http.js
var require_http2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/http.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/identity/AnonymousIdentity.js
var require_AnonymousIdentity = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/identity/AnonymousIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/identity/AwsCredentialIdentity.js
var require_AwsCredentialIdentity = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/identity/AwsCredentialIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/identity/Identity.js
var require_Identity = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/identity/Identity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/identity/LoginIdentity.js
var require_LoginIdentity = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/identity/LoginIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/identity/TokenIdentity.js
var require_TokenIdentity = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/identity/TokenIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/identity/index.js
var require_identity3 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/identity/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AnonymousIdentity(), exports);
    tslib_1.__exportStar(require_AwsCredentialIdentity(), exports);
    tslib_1.__exportStar(require_Identity(), exports);
    tslib_1.__exportStar(require_LoginIdentity(), exports);
    tslib_1.__exportStar(require_TokenIdentity(), exports);
  }
});

// node_modules/@aws-sdk/types/dist-cjs/logger.js
var require_logger2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/logger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/middleware.js
var require_middleware2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/pagination.js
var require_pagination2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/pagination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/profile.js
var require_profile2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/profile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/request.js
var require_request = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/response.js
var require_response2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/response.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/retry.js
var require_retry2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/serde.js
var require_serde2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/serde.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/shapes.js
var require_shapes2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/shapes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/signature.js
var require_signature2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/signature.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/stream.js
var require_stream2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/stream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/token.js
var require_token = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/token.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/transfer.js
var require_transfer2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/transfer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RequestHandlerProtocol = void 0;
    var types_1 = require_dist_cjs();
    Object.defineProperty(exports, "RequestHandlerProtocol", { enumerable: true, get: function() {
      return types_1.RequestHandlerProtocol;
    } });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/uri.js
var require_uri2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/uri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/util.js
var require_util2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/waiter.js
var require_waiter2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/waiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/index.js
var require_dist_cjs19 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_abort2(), exports);
    tslib_1.__exportStar(require_auth2(), exports);
    tslib_1.__exportStar(require_blob_types(), exports);
    tslib_1.__exportStar(require_checksum3(), exports);
    tslib_1.__exportStar(require_client2(), exports);
    tslib_1.__exportStar(require_command2(), exports);
    tslib_1.__exportStar(require_connection2(), exports);
    tslib_1.__exportStar(require_credentials(), exports);
    tslib_1.__exportStar(require_crypto2(), exports);
    tslib_1.__exportStar(require_dns(), exports);
    tslib_1.__exportStar(require_encode2(), exports);
    tslib_1.__exportStar(require_endpoint2(), exports);
    tslib_1.__exportStar(require_eventStream2(), exports);
    tslib_1.__exportStar(require_extensions3(), exports);
    tslib_1.__exportStar(require_http2(), exports);
    tslib_1.__exportStar(require_identity3(), exports);
    tslib_1.__exportStar(require_logger2(), exports);
    tslib_1.__exportStar(require_middleware2(), exports);
    tslib_1.__exportStar(require_pagination2(), exports);
    tslib_1.__exportStar(require_profile2(), exports);
    tslib_1.__exportStar(require_request(), exports);
    tslib_1.__exportStar(require_response2(), exports);
    tslib_1.__exportStar(require_retry2(), exports);
    tslib_1.__exportStar(require_serde2(), exports);
    tslib_1.__exportStar(require_shapes2(), exports);
    tslib_1.__exportStar(require_signature2(), exports);
    tslib_1.__exportStar(require_stream2(), exports);
    tslib_1.__exportStar(require_token(), exports);
    tslib_1.__exportStar(require_transfer2(), exports);
    tslib_1.__exportStar(require_uri2(), exports);
    tslib_1.__exportStar(require_util2(), exports);
    tslib_1.__exportStar(require_waiter2(), exports);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js
var require_parseURL = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseURL = void 0;
    var types_1 = require_dist_cjs19();
    var isIpAddress_1 = require_isIpAddress();
    var DEFAULT_PORTS = {
      [types_1.EndpointURLScheme.HTTP]: 80,
      [types_1.EndpointURLScheme.HTTPS]: 443
    };
    var parseURL = (value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === "object" && "hostname" in value) {
            const { hostname: hostname2, port, protocol: protocol2 = "", path = "", query = {} } = value;
            const url = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : ""}${path}`);
            url.search = Object.entries(query).map(([k, v]) => `${k}=${v}`).join("&");
            return url;
          }
          return new URL(value);
        } catch (error) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(types_1.EndpointURLScheme).includes(scheme)) {
        return null;
      }
      const isIp = (0, isIpAddress_1.isIpAddress)(hostname);
      const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
      const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
      };
    };
    exports.parseURL = parseURL;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js
var require_stringEquals = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringEquals = void 0;
    var stringEquals = (value1, value2) => value1 === value2;
    exports.stringEquals = stringEquals;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js
var require_substring = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.substring = void 0;
    var substring = (input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    };
    exports.substring = substring;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js
var require_uriEncode = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uriEncode = void 0;
    var uriEncode = (value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);
    exports.uriEncode = uriEncode;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js
var require_lib = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.aws = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    exports.aws = tslib_1.__importStar(require_aws());
    tslib_1.__exportStar(require_booleanEquals(), exports);
    tslib_1.__exportStar(require_getAttr(), exports);
    tslib_1.__exportStar(require_isSet(), exports);
    tslib_1.__exportStar(require_isValidHostLabel(), exports);
    tslib_1.__exportStar(require_not(), exports);
    tslib_1.__exportStar(require_parseURL(), exports);
    tslib_1.__exportStar(require_stringEquals(), exports);
    tslib_1.__exportStar(require_substring(), exports);
    tslib_1.__exportStar(require_uriEncode(), exports);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js
var require_evaluateTemplate = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateTemplate = void 0;
    var lib_1 = require_lib();
    var evaluateTemplate = (template, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      let currentIndex = 0;
      while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex));
          break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
          const [refName, attrName] = parameterName.split("#");
          evaluatedTemplateArr.push((0, lib_1.getAttr)(templateContext[refName], attrName));
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join("");
    };
    exports.evaluateTemplate = evaluateTemplate;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js
var require_getReferenceValue = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getReferenceValue = void 0;
    var getReferenceValue = ({ ref }, options) => {
      const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      return referenceRecord[ref];
    };
    exports.getReferenceValue = getReferenceValue;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js
var require_evaluateExpression = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateExpression = void 0;
    var types_1 = require_types2();
    var callFunction_1 = require_callFunction();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getReferenceValue_1 = require_getReferenceValue();
    var evaluateExpression = (obj, keyName, options) => {
      if (typeof obj === "string") {
        return (0, evaluateTemplate_1.evaluateTemplate)(obj, options);
      } else if (obj["fn"]) {
        return (0, callFunction_1.callFunction)(obj, options);
      } else if (obj["ref"]) {
        return (0, getReferenceValue_1.getReferenceValue)(obj, options);
      }
      throw new types_1.EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
    };
    exports.evaluateExpression = evaluateExpression;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js
var require_callFunction = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.callFunction = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var lib = tslib_1.__importStar(require_lib());
    var evaluateExpression_1 = require_evaluateExpression();
    var callFunction = ({ fn, argv }, options) => {
      const evaluatedArgs = argv.map((arg) => ["boolean", "number"].includes(typeof arg) ? arg : (0, evaluateExpression_1.evaluateExpression)(arg, "arg", options));
      return fn.split(".").reduce((acc, key) => acc[key], lib)(...evaluatedArgs);
    };
    exports.callFunction = callFunction;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js
var require_evaluateCondition = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateCondition = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types2();
    var callFunction_1 = require_callFunction();
    var evaluateCondition = ({ assign, ...fnArgs }, options) => {
      var _a, _b;
      if (assign && assign in options.referenceRecord) {
        throw new types_1.EndpointError(`'${assign}' is already defined in Reference Record.`);
      }
      const value = (0, callFunction_1.callFunction)(fnArgs, options);
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `evaluateCondition: ${(0, debug_1.toDebugString)(fnArgs)} = ${(0, debug_1.toDebugString)(value)}`);
      return {
        result: value === "" ? true : !!value,
        ...assign != null && { toAssign: { name: assign, value } }
      };
    };
    exports.evaluateCondition = evaluateCondition;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js
var require_evaluateConditions = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateConditions = void 0;
    var debug_1 = require_debug();
    var evaluateCondition_1 = require_evaluateCondition();
    var evaluateConditions = (conditions = [], options) => {
      var _a, _b;
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = (0, evaluateCondition_1.evaluateCondition)(condition, {
          ...options,
          referenceRecord: {
            ...options.referenceRecord,
            ...conditionsReferenceRecord
          }
        });
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `assign: ${toAssign.name} := ${(0, debug_1.toDebugString)(toAssign.value)}`);
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    };
    exports.evaluateConditions = evaluateConditions;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js
var require_getEndpointHeaders = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointHeaders = void 0;
    var types_1 = require_types2();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({
      ...acc,
      [headerKey]: headerVal.map((headerValEntry) => {
        const processedExpr = (0, evaluateExpression_1.evaluateExpression)(headerValEntry, "Header value entry", options);
        if (typeof processedExpr !== "string") {
          throw new types_1.EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);
        }
        return processedExpr;
      })
    }), {});
    exports.getEndpointHeaders = getEndpointHeaders;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js
var require_getEndpointProperty = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointProperty = void 0;
    var types_1 = require_types2();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointProperty = (property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) => (0, exports.getEndpointProperty)(propertyEntry, options));
      }
      switch (typeof property) {
        case "string":
          return (0, evaluateTemplate_1.evaluateTemplate)(property, options);
        case "object":
          if (property === null) {
            throw new types_1.EndpointError(`Unexpected endpoint property: ${property}`);
          }
          return (0, getEndpointProperties_1.getEndpointProperties)(property, options);
        case "boolean":
          return property;
        default:
          throw new types_1.EndpointError(`Unexpected endpoint property type: ${typeof property}`);
      }
    };
    exports.getEndpointProperty = getEndpointProperty;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js
var require_getEndpointProperties = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointProperties = void 0;
    var getEndpointProperty_1 = require_getEndpointProperty();
    var getEndpointProperties = (properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({
      ...acc,
      [propertyKey]: (0, getEndpointProperty_1.getEndpointProperty)(propertyVal, options)
    }), {});
    exports.getEndpointProperties = getEndpointProperties;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js
var require_getEndpointUrl = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointUrl = void 0;
    var types_1 = require_types2();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointUrl = (endpointUrl, options) => {
      const expression = (0, evaluateExpression_1.evaluateExpression)(endpointUrl, "Endpoint URL", options);
      if (typeof expression === "string") {
        try {
          return new URL(expression);
        } catch (error) {
          console.error(`Failed to construct URL with ${expression}`, error);
          throw error;
        }
      }
      throw new types_1.EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);
    };
    exports.getEndpointUrl = getEndpointUrl;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js
var require_evaluateEndpointRule = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateEndpointRule = void 0;
    var debug_1 = require_debug();
    var evaluateConditions_1 = require_evaluateConditions();
    var getEndpointHeaders_1 = require_getEndpointHeaders();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointUrl_1 = require_getEndpointUrl();
    var evaluateEndpointRule = (endpointRule, options) => {
      var _a, _b;
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      };
      const { url, properties, headers } = endpoint;
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `Resolving endpoint from template: ${(0, debug_1.toDebugString)(endpoint)}`);
      return {
        ...headers != void 0 && {
          headers: (0, getEndpointHeaders_1.getEndpointHeaders)(headers, endpointRuleOptions)
        },
        ...properties != void 0 && {
          properties: (0, getEndpointProperties_1.getEndpointProperties)(properties, endpointRuleOptions)
        },
        url: (0, getEndpointUrl_1.getEndpointUrl)(url, endpointRuleOptions)
      };
    };
    exports.evaluateEndpointRule = evaluateEndpointRule;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js
var require_evaluateErrorRule = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateErrorRule = void 0;
    var types_1 = require_types2();
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateExpression_1 = require_evaluateExpression();
    var evaluateErrorRule = (errorRule, options) => {
      const { conditions, error } = errorRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      throw new types_1.EndpointError((0, evaluateExpression_1.evaluateExpression)(error, "Error", {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      }));
    };
    exports.evaluateErrorRule = evaluateErrorRule;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js
var require_evaluateTreeRule = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateTreeRule = void 0;
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateRules_1 = require_evaluateRules();
    var evaluateTreeRule = (treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      return (0, evaluateRules_1.evaluateRules)(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      });
    };
    exports.evaluateTreeRule = evaluateTreeRule;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js
var require_evaluateRules = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateRules = void 0;
    var types_1 = require_types2();
    var evaluateEndpointRule_1 = require_evaluateEndpointRule();
    var evaluateErrorRule_1 = require_evaluateErrorRule();
    var evaluateTreeRule_1 = require_evaluateTreeRule();
    var evaluateRules = (rules, options) => {
      for (const rule of rules) {
        if (rule.type === "endpoint") {
          const endpointOrUndefined = (0, evaluateEndpointRule_1.evaluateEndpointRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === "error") {
          (0, evaluateErrorRule_1.evaluateErrorRule)(rule, options);
        } else if (rule.type === "tree") {
          const endpointOrUndefined = (0, evaluateTreeRule_1.evaluateTreeRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new types_1.EndpointError(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new types_1.EndpointError(`Rules evaluation failed`);
    };
    exports.evaluateRules = evaluateRules;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js
var require_utils = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_evaluateRules(), exports);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js
var require_resolveEndpoint = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpoint = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types2();
    var utils_1 = require_utils();
    var resolveEndpoint = (ruleSetObject, options) => {
      var _a, _b, _c, _d, _e, _f;
      const { endpointParams, logger: logger2 } = options;
      const { parameters, rules } = ruleSetObject;
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, `${debug_1.debugId} Initial EndpointParams: ${(0, debug_1.toDebugString)(endpointParams)}`);
      const paramsWithDefault = Object.entries(parameters).filter(([, v]) => v.default != null).map(([k, v]) => [k, v.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] = (_c = endpointParams[paramKey]) !== null && _c !== void 0 ? _c : paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters).filter(([, v]) => v.required).map(([k]) => k);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new types_1.EndpointError(`Missing required parameter: '${requiredParam}'`);
        }
      }
      const endpoint = (0, utils_1.evaluateRules)(rules, { endpointParams, logger: logger2, referenceRecord: {} });
      if ((_d = options.endpointParams) === null || _d === void 0 ? void 0 : _d.Endpoint) {
        try {
          const givenEndpoint = new URL(options.endpointParams.Endpoint);
          const { protocol, port } = givenEndpoint;
          endpoint.url.protocol = protocol;
          endpoint.url.port = port;
        } catch (e) {
        }
      }
      (_f = (_e = options.logger) === null || _e === void 0 ? void 0 : _e.debug) === null || _f === void 0 ? void 0 : _f.call(_e, `${debug_1.debugId} Resolved endpoint: ${(0, debug_1.toDebugString)(endpoint)}`);
      return endpoint;
    };
    exports.resolveEndpoint = resolveEndpoint;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js
var require_dist_cjs20 = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_partition(), exports);
    tslib_1.__exportStar(require_isIpAddress(), exports);
    tslib_1.__exportStar(require_resolveEndpoint(), exports);
    tslib_1.__exportStar(require_types2(), exports);
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js
var require_constants2 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UA_ESCAPE_CHAR = exports.UA_VALUE_ESCAPE_REGEX = exports.UA_NAME_ESCAPE_REGEX = exports.UA_NAME_SEPARATOR = exports.SPACE = exports.X_AMZ_USER_AGENT = exports.USER_AGENT = void 0;
    exports.USER_AGENT = "user-agent";
    exports.X_AMZ_USER_AGENT = "x-amz-user-agent";
    exports.SPACE = " ";
    exports.UA_NAME_SEPARATOR = "/";
    exports.UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
    exports.UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
    exports.UA_ESCAPE_CHAR = "-";
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js
var require_user_agent_middleware = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUserAgentPlugin = exports.getUserAgentMiddlewareOptions = exports.userAgentMiddleware = void 0;
    var util_endpoints_1 = require_dist_cjs20();
    var protocol_http_1 = require_dist_cjs2();
    var constants_1 = require_constants2();
    var userAgentMiddleware = (options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request))
        return next(args);
      const { headers } = request;
      const userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
      const prefix = (0, util_endpoints_1.getUserAgentPrefix)();
      const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent, ...userAgent, ...customUserAgent]).join(constants_1.SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(constants_1.SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[constants_1.X_AMZ_USER_AGENT] = headers[constants_1.X_AMZ_USER_AGENT] ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[constants_1.USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request
      });
    };
    exports.userAgentMiddleware = userAgentMiddleware;
    var escapeUserAgent = (userAgentPair) => {
      var _a;
      const name = userAgentPair[0].split(constants_1.UA_NAME_SEPARATOR).map((part) => part.replace(constants_1.UA_NAME_ESCAPE_REGEX, constants_1.UA_ESCAPE_CHAR)).join(constants_1.UA_NAME_SEPARATOR);
      const version2 = (_a = userAgentPair[1]) === null || _a === void 0 ? void 0 : _a.replace(constants_1.UA_VALUE_ESCAPE_REGEX, constants_1.UA_ESCAPE_CHAR);
      const prefixSeparatorIndex = name.indexOf(constants_1.UA_NAME_SEPARATOR);
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version2].filter((item) => item && item.length > 0).reduce((acc, item, index) => {
        switch (index) {
          case 0:
            return item;
          case 1:
            return `${acc}/${item}`;
          default:
            return `${acc}#${item}`;
        }
      }, "");
    };
    exports.getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    var getUserAgentPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.userAgentMiddleware)(config), exports.getUserAgentMiddlewareOptions);
      }
    });
    exports.getUserAgentPlugin = getUserAgentPlugin;
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs21 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations2(), exports);
    tslib_1.__exportStar(require_user_agent_middleware(), exports);
  }
});

// node_modules/@smithy/util-config-provider/dist-cjs/booleanSelector.js
var require_booleanSelector = __commonJS({
  "node_modules/@smithy/util-config-provider/dist-cjs/booleanSelector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.booleanSelector = exports.SelectorType = void 0;
    var SelectorType;
    (function(SelectorType2) {
      SelectorType2["ENV"] = "env";
      SelectorType2["CONFIG"] = "shared config entry";
    })(SelectorType = exports.SelectorType || (exports.SelectorType = {}));
    var booleanSelector = (obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === "true")
        return true;
      if (obj[key] === "false")
        return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    };
    exports.booleanSelector = booleanSelector;
  }
});

// node_modules/@smithy/util-config-provider/dist-cjs/index.js
var require_dist_cjs22 = __commonJS({
  "node_modules/@smithy/util-config-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_booleanSelector(), exports);
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var require_NodeUseDualstackEndpointConfigOptions = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = exports.DEFAULT_USE_DUALSTACK_ENDPOINT = exports.CONFIG_USE_DUALSTACK_ENDPOINT = exports.ENV_USE_DUALSTACK_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs22();
    exports.ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
    exports.CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
    exports.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports.ENV_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports.CONFIG_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var require_NodeUseFipsEndpointConfigOptions = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = exports.DEFAULT_USE_FIPS_ENDPOINT = exports.CONFIG_USE_FIPS_ENDPOINT = exports.ENV_USE_FIPS_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs22();
    exports.ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
    exports.CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
    exports.DEFAULT_USE_FIPS_ENDPOINT = false;
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports.ENV_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports.CONFIG_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js
var require_resolveCustomEndpointsConfig = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveCustomEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs12();
    var resolveCustomEndpointsConfig = (input) => {
      var _a, _b;
      const { endpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)((_b = input.useDualstackEndpoint) !== null && _b !== void 0 ? _b : false)
      };
    };
    exports.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js
var require_getEndpointFromRegion = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointFromRegion = void 0;
    var getEndpointFromRegion = async (input) => {
      var _a;
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error("Invalid region in client config");
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } = (_a = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) !== null && _a !== void 0 ? _a : {};
      if (!hostname) {
        throw new Error("Cannot resolve hostname from client config");
      }
      return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
    };
    exports.getEndpointFromRegion = getEndpointFromRegion;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js
var require_resolveEndpointsConfig = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs12();
    var getEndpointFromRegion_1 = require_getEndpointFromRegion();
    var resolveEndpointsConfig = (input) => {
      var _a, _b;
      const useDualstackEndpoint = (0, util_middleware_1.normalizeProvider)((_a = input.useDualstackEndpoint) !== null && _a !== void 0 ? _a : false);
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return {
        ...input,
        tls: (_b = input.tls) !== null && _b !== void 0 ? _b : true,
        endpoint: endpoint ? (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : () => (0, getEndpointFromRegion_1.getEndpointFromRegion)({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint
      };
    };
    exports.resolveEndpointsConfig = resolveEndpointsConfig;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/index.js
var require_endpointsConfig = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_NodeUseDualstackEndpointConfigOptions(), exports);
    tslib_1.__exportStar(require_NodeUseFipsEndpointConfigOptions(), exports);
    tslib_1.__exportStar(require_resolveCustomEndpointsConfig(), exports);
    tslib_1.__exportStar(require_resolveEndpointsConfig(), exports);
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionConfig/config.js
var require_config2 = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionConfig/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = exports.NODE_REGION_CONFIG_OPTIONS = exports.REGION_INI_NAME = exports.REGION_ENV_NAME = void 0;
    exports.REGION_ENV_NAME = "AWS_REGION";
    exports.REGION_INI_NAME = "region";
    exports.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports.REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionConfig/isFipsRegion.js
var require_isFipsRegion = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionConfig/isFipsRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isFipsRegion = void 0;
    var isFipsRegion = (region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
    exports.isFipsRegion = isFipsRegion;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionConfig/getRealRegion.js
var require_getRealRegion = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionConfig/getRealRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion();
    var getRealRegion = (region) => (0, isFipsRegion_1.isFipsRegion)(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;
    exports.getRealRegion = getRealRegion;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js
var require_resolveRegionConfig = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion();
    var isFipsRegion_1 = require_isFipsRegion();
    var resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === "string") {
            return (0, getRealRegion_1.getRealRegion)(region);
          }
          const providedRegion = await region();
          return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
      };
    };
    exports.resolveRegionConfig = resolveRegionConfig;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionConfig/index.js
var require_regionConfig = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionConfig/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_config2(), exports);
    tslib_1.__exportStar(require_resolveRegionConfig(), exports);
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionInfo/PartitionHash.js
var require_PartitionHash = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionInfo/PartitionHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionInfo/RegionHash.js
var require_RegionHash = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionInfo/RegionHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js
var require_getHostnameFromVariants = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHostnameFromVariants = void 0;
    var getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"))) === null || _a === void 0 ? void 0 : _a.hostname;
    };
    exports.getHostnameFromVariants = getHostnameFromVariants;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js
var require_getResolvedHostname = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedHostname = void 0;
    var getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) => regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : void 0;
    exports.getResolvedHostname = getResolvedHostname;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js
var require_getResolvedPartition = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedPartition = void 0;
    var getResolvedPartition = (region, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region))) !== null && _a !== void 0 ? _a : "aws";
    };
    exports.getResolvedPartition = getResolvedPartition;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js
var require_getResolvedSigningRegion = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedSigningRegion = void 0;
    var getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    };
    exports.getResolvedSigningRegion = getResolvedSigningRegion;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getRegionInfo.js
var require_getRegionInfo = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getRegionInfo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRegionInfo = void 0;
    var getHostnameFromVariants_1 = require_getHostnameFromVariants();
    var getResolvedHostname_1 = require_getResolvedHostname();
    var getResolvedPartition_1 = require_getResolvedPartition();
    var getResolvedSigningRegion_1 = require_getResolvedSigningRegion();
    var getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash }) => {
      var _a, _b, _c, _d, _e, _f;
      const partition = (0, getResolvedPartition_1.getResolvedPartition)(region, { partitionHash });
      const resolvedRegion = region in regionHash ? region : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null && _b !== void 0 ? _b : region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants, hostnameOptions);
      const partitionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);
      const hostname = (0, getResolvedHostname_1.getResolvedHostname)(resolvedRegion, { regionHostname, partitionHostname });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = (0, getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {
        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
      });
      return {
        partition,
        signingService,
        hostname,
        ...signingRegion && { signingRegion },
        ...((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {
          signingService: regionHash[resolvedRegion].signingService
        }
      };
    };
    exports.getRegionInfo = getRegionInfo;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionInfo/index.js
var require_regionInfo = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionInfo/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_PartitionHash(), exports);
    tslib_1.__exportStar(require_RegionHash(), exports);
    tslib_1.__exportStar(require_getRegionInfo(), exports);
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/index.js
var require_dist_cjs23 = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_endpointsConfig(), exports);
    tslib_1.__exportStar(require_regionConfig(), exports);
    tslib_1.__exportStar(require_regionInfo(), exports);
  }
});

// node_modules/@smithy/middleware-content-length/dist-cjs/index.js
var require_dist_cjs24 = __commonJS({
  "node_modules/@smithy/middleware-content-length/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getContentLengthPlugin = exports.contentLengthMiddlewareOptions = exports.contentLengthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var CONTENT_LENGTH_HEADER = "content-length";
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length)
              };
            } catch (error) {
            }
          }
        }
        return next({
          ...args,
          request
        });
      };
    }
    exports.contentLengthMiddleware = contentLengthMiddleware;
    exports.contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    var getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports.contentLengthMiddlewareOptions);
      }
    });
    exports.getContentLengthPlugin = getContentLengthPlugin;
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/service-customizations/s3.js
var require_s3 = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/service-customizations/s3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isArnBucketName = exports.isDnsCompatibleBucketName = exports.S3_HOSTNAME_PATTERN = exports.DOT_PATTERN = exports.resolveParamsForS3 = void 0;
    var resolveParamsForS3 = async (endpointParams) => {
      const bucket = (endpointParams === null || endpointParams === void 0 ? void 0 : endpointParams.Bucket) || "";
      if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
      }
      if ((0, exports.isArnBucketName)(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
      } else if (!(0, exports.isDnsCompatibleBucketName)(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    };
    exports.resolveParamsForS3 = resolveParamsForS3;
    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    exports.DOT_PATTERN = /\./;
    exports.S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
    var isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
    exports.isDnsCompatibleBucketName = isDnsCompatibleBucketName;
    var isArnBucketName = (bucketName) => {
      const [arn, partition, service, region, account, typeOrId] = bucketName.split(":");
      const isArn = arn === "arn" && bucketName.split(":").length >= 6;
      const isValidArn = [arn, partition, service, account, typeOrId].filter(Boolean).length === 5;
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return arn === "arn" && !!partition && !!service && !!account && !!typeOrId;
    };
    exports.isArnBucketName = isArnBucketName;
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/service-customizations/index.js
var require_service_customizations = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/service-customizations/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_s3(), exports);
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js
var require_createConfigValueProvider = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConfigValueProvider = void 0;
    var createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {
      const configProvider = async () => {
        var _a;
        const configValue = (_a = config[configKey]) !== null && _a !== void 0 ? _a : config[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
          return configValue();
        }
        return configValue;
      };
      if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) {
              return endpoint.url.href;
            }
            if ("hostname" in endpoint) {
              const { protocol, hostname, port, path } = endpoint;
              return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    };
    exports.createConfigValueProvider = createConfigValueProvider;
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js
var require_getEndpointFromInstructions = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveParams = exports.getEndpointFromInstructions = void 0;
    var service_customizations_1 = require_service_customizations();
    var createConfigValueProvider_1 = require_createConfigValueProvider();
    var getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {
      const endpointParams = await (0, exports.resolveParams)(commandInput, instructionsSupplier, clientConfig);
      if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
      }
      const endpoint = clientConfig.endpointProvider(endpointParams, context);
      return endpoint;
    };
    exports.getEndpointFromInstructions = getEndpointFromInstructions;
    var resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {
      var _a;
      const endpointParams = {};
      const instructions = ((_a = instructionsSupplier === null || instructionsSupplier === void 0 ? void 0 : instructionsSupplier.getEndpointParameterInstructions) === null || _a === void 0 ? void 0 : _a.call(instructionsSupplier)) || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
          case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
          case "clientContextParams":
          case "builtInParams":
            endpointParams[name] = await (0, createConfigValueProvider_1.createConfigValueProvider)(instruction.name, name, clientConfig)();
            break;
          default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await (0, service_customizations_1.resolveParamsForS3)(endpointParams);
      }
      return endpointParams;
    };
    exports.resolveParams = resolveParams;
  }
});

// node_modules/@smithy/querystring-parser/dist-cjs/index.js
var require_dist_cjs25 = __commonJS({
  "node_modules/@smithy/querystring-parser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, "");
      if (querystring) {
        for (const pair of querystring.split("&")) {
          let [key, value = null] = pair.split("=");
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    exports.parseQueryString = parseQueryString;
  }
});

// node_modules/@smithy/url-parser/dist-cjs/index.js
var require_dist_cjs26 = __commonJS({
  "node_modules/@smithy/url-parser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs25();
    var parseUrl = (url) => {
      if (typeof url === "string") {
        return (0, exports.parseUrl)(new URL(url));
      }
      const { hostname, pathname, port, protocol, search } = url;
      let query;
      if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    };
    exports.parseUrl = parseUrl;
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js
var require_toEndpointV1 = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toEndpointV1 = void 0;
    var url_parser_1 = require_dist_cjs26();
    var toEndpointV1 = (endpoint) => {
      if (typeof endpoint === "object") {
        if ("url" in endpoint) {
          return (0, url_parser_1.parseUrl)(endpoint.url);
        }
        return endpoint;
      }
      return (0, url_parser_1.parseUrl)(endpoint);
    };
    exports.toEndpointV1 = toEndpointV1;
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/index.js
var require_adaptors = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getEndpointFromInstructions(), exports);
    tslib_1.__exportStar(require_toEndpointV1(), exports);
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/endpointMiddleware.js
var require_endpointMiddleware = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/endpointMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.endpointMiddleware = void 0;
    var getEndpointFromInstructions_1 = require_getEndpointFromInstructions();
    var endpointMiddleware = ({ config, instructions }) => {
      return (next, context) => async (args) => {
        var _a, _b;
        const endpoint = await (0, getEndpointFromInstructions_1.getEndpointFromInstructions)(args.input, {
          getEndpointParameterInstructions() {
            return instructions;
          }
        }, { ...config }, context);
        context.endpointV2 = endpoint;
        context.authSchemes = (_a = endpoint.properties) === null || _a === void 0 ? void 0 : _a.authSchemes;
        const authScheme = (_b = context.authSchemes) === null || _b === void 0 ? void 0 : _b[0];
        if (authScheme) {
          context["signing_region"] = authScheme.signingRegion;
          context["signing_service"] = authScheme.signingName;
        }
        return next({
          ...args
        });
      };
    };
    exports.endpointMiddleware = endpointMiddleware;
  }
});

// node_modules/@smithy/middleware-serde/dist-cjs/deserializerMiddleware.js
var require_deserializerMiddleware = __commonJS({
  "node_modules/@smithy/middleware-serde/dist-cjs/deserializerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializerMiddleware = void 0;
    var deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error) {
        Object.defineProperty(error, "$response", {
          value: response
        });
        if (!("$metadata" in error)) {
          const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
          error.message += "\n  " + hint;
        }
        throw error;
      }
    };
    exports.deserializerMiddleware = deserializerMiddleware;
  }
});

// node_modules/@smithy/middleware-serde/dist-cjs/serializerMiddleware.js
var require_serializerMiddleware = __commonJS({
  "node_modules/@smithy/middleware-serde/dist-cjs/serializerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializerMiddleware = void 0;
    var serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
      var _a;
      const endpoint = ((_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.url) && options.urlParser ? async () => options.urlParser(context.endpointV2.url) : options.endpoint;
      if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
      }
      const request = await serializer(args.input, { ...options, endpoint });
      return next({
        ...args,
        request
      });
    };
    exports.serializerMiddleware = serializerMiddleware;
  }
});

// node_modules/@smithy/middleware-serde/dist-cjs/serdePlugin.js
var require_serdePlugin = __commonJS({
  "node_modules/@smithy/middleware-serde/dist-cjs/serdePlugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSerdePlugin = exports.serializerMiddlewareOption = exports.deserializerMiddlewareOption = void 0;
    var deserializerMiddleware_1 = require_deserializerMiddleware();
    var serializerMiddleware_1 = require_serializerMiddleware();
    exports.deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    exports.serializerMiddlewareOption = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add((0, deserializerMiddleware_1.deserializerMiddleware)(config, deserializer), exports.deserializerMiddlewareOption);
          commandStack.add((0, serializerMiddleware_1.serializerMiddleware)(config, serializer), exports.serializerMiddlewareOption);
        }
      };
    }
    exports.getSerdePlugin = getSerdePlugin;
  }
});

// node_modules/@smithy/middleware-serde/dist-cjs/index.js
var require_dist_cjs27 = __commonJS({
  "node_modules/@smithy/middleware-serde/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_deserializerMiddleware(), exports);
    tslib_1.__exportStar(require_serdePlugin(), exports);
    tslib_1.__exportStar(require_serializerMiddleware(), exports);
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/getEndpointPlugin.js
var require_getEndpointPlugin = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/getEndpointPlugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointPlugin = exports.endpointMiddlewareOptions = void 0;
    var middleware_serde_1 = require_dist_cjs27();
    var endpointMiddleware_1 = require_endpointMiddleware();
    exports.endpointMiddlewareOptions = {
      step: "serialize",
      tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
      name: "endpointV2Middleware",
      override: true,
      relation: "before",
      toMiddleware: middleware_serde_1.serializerMiddlewareOption.name
    };
    var getEndpointPlugin = (config, instructions) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, endpointMiddleware_1.endpointMiddleware)({
          config,
          instructions
        }), exports.endpointMiddlewareOptions);
      }
    });
    exports.getEndpointPlugin = getEndpointPlugin;
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/resolveEndpointConfig.js
var require_resolveEndpointConfig = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/resolveEndpointConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpointConfig = void 0;
    var util_middleware_1 = require_dist_cjs12();
    var toEndpointV1_1 = require_toEndpointV1();
    var resolveEndpointConfig = (input) => {
      var _a, _b, _c;
      const tls = (_a = input.tls) !== null && _a !== void 0 ? _a : true;
      const { endpoint } = input;
      const customEndpointProvider = endpoint != null ? async () => (0, toEndpointV1_1.toEndpointV1)(await (0, util_middleware_1.normalizeProvider)(endpoint)()) : void 0;
      const isCustomEndpoint = !!endpoint;
      return {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)((_b = input.useDualstackEndpoint) !== null && _b !== void 0 ? _b : false),
        useFipsEndpoint: (0, util_middleware_1.normalizeProvider)((_c = input.useFipsEndpoint) !== null && _c !== void 0 ? _c : false)
      };
    };
    exports.resolveEndpointConfig = resolveEndpointConfig;
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/types.js
var require_types3 = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/index.js
var require_dist_cjs28 = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_adaptors(), exports);
    tslib_1.__exportStar(require_endpointMiddleware(), exports);
    tslib_1.__exportStar(require_getEndpointPlugin(), exports);
    tslib_1.__exportStar(require_resolveEndpointConfig(), exports);
    tslib_1.__exportStar(require_types3(), exports);
  }
});

// node_modules/@smithy/util-retry/dist-cjs/config.js
var require_config3 = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_RETRY_MODE = exports.DEFAULT_MAX_ATTEMPTS = exports.RETRY_MODES = void 0;
    var RETRY_MODES;
    (function(RETRY_MODES2) {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
    })(RETRY_MODES = exports.RETRY_MODES || (exports.RETRY_MODES = {}));
    exports.DEFAULT_MAX_ATTEMPTS = 3;
    exports.DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;
  }
});

// node_modules/@smithy/service-error-classification/dist-cjs/constants.js
var require_constants3 = __commonJS({
  "node_modules/@smithy/service-error-classification/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = exports.TRANSIENT_ERROR_STATUS_CODES = exports.TRANSIENT_ERROR_CODES = exports.THROTTLING_ERROR_CODES = exports.CLOCK_SKEW_ERROR_CODES = void 0;
    exports.CLOCK_SKEW_ERROR_CODES = [
      "AuthFailure",
      "InvalidSignatureException",
      "RequestExpired",
      "RequestInTheFuture",
      "RequestTimeTooSkewed",
      "SignatureDoesNotMatch"
    ];
    exports.THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    exports.TRANSIENT_ERROR_CODES = ["TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    exports.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    exports.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "ECONNREFUSED", "EPIPE", "ETIMEDOUT"];
  }
});

// node_modules/@smithy/service-error-classification/dist-cjs/index.js
var require_dist_cjs29 = __commonJS({
  "node_modules/@smithy/service-error-classification/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isServerError = exports.isTransientError = exports.isThrottlingError = exports.isClockSkewError = exports.isRetryableByTrait = void 0;
    var constants_1 = require_constants3();
    var isRetryableByTrait = (error) => error.$retryable !== void 0;
    exports.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
    exports.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error) => {
      var _a, _b;
      return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || constants_1.THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
    };
    exports.isThrottlingError = isThrottlingError;
    var isTransientError = (error) => {
      var _a;
      return constants_1.TRANSIENT_ERROR_CODES.includes(error.name) || constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes((error === null || error === void 0 ? void 0 : error.code) || "") || constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
    };
    exports.isTransientError = isTransientError;
    var isServerError = (error) => {
      var _a;
      if (((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) !== void 0) {
        const statusCode = error.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !(0, exports.isTransientError)(error)) {
          return true;
        }
        return false;
      }
      return false;
    };
    exports.isServerError = isServerError;
  }
});

// node_modules/@smithy/util-retry/dist-cjs/DefaultRateLimiter.js
var require_DefaultRateLimiter = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/DefaultRateLimiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultRateLimiter = void 0;
    var service_error_classification_1 = require_dist_cjs29();
    var DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
        this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;
        this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;
        this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;
        this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, service_error_classification_1.isThrottlingError)(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    exports.DefaultRateLimiter = DefaultRateLimiter;
  }
});

// node_modules/@smithy/util-retry/dist-cjs/constants.js
var require_constants4 = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.REQUEST_HEADER = exports.INVOCATION_ID_HEADER = exports.NO_RETRY_INCREMENT = exports.TIMEOUT_RETRY_COST = exports.RETRY_COST = exports.INITIAL_RETRY_TOKENS = exports.THROTTLING_RETRY_DELAY_BASE = exports.MAXIMUM_RETRY_DELAY = exports.DEFAULT_RETRY_DELAY_BASE = void 0;
    exports.DEFAULT_RETRY_DELAY_BASE = 100;
    exports.MAXIMUM_RETRY_DELAY = 20 * 1e3;
    exports.THROTTLING_RETRY_DELAY_BASE = 500;
    exports.INITIAL_RETRY_TOKENS = 500;
    exports.RETRY_COST = 5;
    exports.TIMEOUT_RETRY_COST = 10;
    exports.NO_RETRY_INCREMENT = 1;
    exports.INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    exports.REQUEST_HEADER = "amz-sdk-request";
  }
});

// node_modules/@smithy/util-retry/dist-cjs/defaultRetryBackoffStrategy.js
var require_defaultRetryBackoffStrategy = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/defaultRetryBackoffStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultRetryBackoffStrategy = void 0;
    var constants_1 = require_constants4();
    var getDefaultRetryBackoffStrategy = () => {
      let delayBase = constants_1.DEFAULT_RETRY_DELAY_BASE;
      const computeNextBackoffDelay = (attempts) => {
        return Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
      };
      const setDelayBase = (delay) => {
        delayBase = delay;
      };
      return {
        computeNextBackoffDelay,
        setDelayBase
      };
    };
    exports.getDefaultRetryBackoffStrategy = getDefaultRetryBackoffStrategy;
  }
});

// node_modules/@smithy/util-retry/dist-cjs/defaultRetryToken.js
var require_defaultRetryToken = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/defaultRetryToken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDefaultRetryToken = void 0;
    var constants_1 = require_constants4();
    var createDefaultRetryToken = ({ retryDelay, retryCount, retryCost }) => {
      const getRetryCount = () => retryCount;
      const getRetryDelay = () => Math.min(constants_1.MAXIMUM_RETRY_DELAY, retryDelay);
      const getRetryCost = () => retryCost;
      return {
        getRetryCount,
        getRetryDelay,
        getRetryCost
      };
    };
    exports.createDefaultRetryToken = createDefaultRetryToken;
  }
});

// node_modules/@smithy/util-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/StandardRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StandardRetryStrategy = void 0;
    var config_1 = require_config3();
    var constants_1 = require_constants4();
    var defaultRetryBackoffStrategy_1 = require_defaultRetryBackoffStrategy();
    var defaultRetryToken_1 = require_defaultRetryToken();
    var StandardRetryStrategy = class {
      constructor(maxAttempts) {
        this.maxAttempts = maxAttempts;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.capacity = constants_1.INITIAL_RETRY_TOKENS;
        this.retryBackoffStrategy = (0, defaultRetryBackoffStrategy_1.getDefaultRetryBackoffStrategy)();
        this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts;
      }
      async acquireInitialRetryToken(retryTokenScope) {
        return (0, defaultRetryToken_1.createDefaultRetryToken)({
          retryDelay: constants_1.DEFAULT_RETRY_DELAY_BASE,
          retryCount: 0
        });
      }
      async refreshRetryTokenForRetry(token, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(token, errorInfo, maxAttempts)) {
          const errorType = errorInfo.errorType;
          this.retryBackoffStrategy.setDelayBase(errorType === "THROTTLING" ? constants_1.THROTTLING_RETRY_DELAY_BASE : constants_1.DEFAULT_RETRY_DELAY_BASE);
          const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
          const retryDelay = errorInfo.retryAfterHint ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType) : delayFromErrorType;
          const capacityCost = this.getCapacityCost(errorType);
          this.capacity -= capacityCost;
          return (0, defaultRetryToken_1.createDefaultRetryToken)({
            retryDelay,
            retryCount: token.getRetryCount() + 1,
            retryCost: capacityCost
          });
        }
        throw new Error("No retry token available");
      }
      recordSuccess(token) {
        var _a;
        this.capacity = Math.max(constants_1.INITIAL_RETRY_TOKENS, this.capacity + ((_a = token.getRetryCost()) !== null && _a !== void 0 ? _a : constants_1.NO_RETRY_INCREMENT));
      }
      getCapacity() {
        return this.capacity;
      }
      async getMaxAttempts() {
        try {
          return await this.maxAttemptsProvider();
        } catch (error) {
          console.warn(`Max attempts provider could not resolve. Using default of ${config_1.DEFAULT_MAX_ATTEMPTS}`);
          return config_1.DEFAULT_MAX_ATTEMPTS;
        }
      }
      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount() + 1;
        return attempts < maxAttempts && this.capacity >= this.getCapacityCost(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
      }
      getCapacityCost(errorType) {
        return errorType === "TRANSIENT" ? constants_1.TIMEOUT_RETRY_COST : constants_1.RETRY_COST;
      }
      isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
      }
    };
    exports.StandardRetryStrategy = StandardRetryStrategy;
  }
});

// node_modules/@smithy/util-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AdaptiveRetryStrategy = void 0;
    var config_1 = require_config3();
    var DefaultRateLimiter_1 = require_DefaultRateLimiter();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var AdaptiveRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
        const { rateLimiter } = options !== null && options !== void 0 ? options : {};
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.standardRetryStrategy = new StandardRetryStrategy_1.StandardRetryStrategy(maxAttemptsProvider);
      }
      async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
      }
      recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
      }
    };
    exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

// node_modules/@smithy/util-retry/dist-cjs/ConfiguredRetryStrategy.js
var require_ConfiguredRetryStrategy = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/ConfiguredRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConfiguredRetryStrategy = void 0;
    var constants_1 = require_constants4();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var ConfiguredRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttempts, computeNextBackoffDelay = constants_1.DEFAULT_RETRY_DELAY_BASE) {
        super(typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts);
        if (typeof computeNextBackoffDelay === "number") {
          this.computeNextBackoffDelay = () => computeNextBackoffDelay;
        } else {
          this.computeNextBackoffDelay = computeNextBackoffDelay;
        }
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        const token = await super.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
        token.getRetryDelay = () => this.computeNextBackoffDelay(token.getRetryCount());
        return token;
      }
    };
    exports.ConfiguredRetryStrategy = ConfiguredRetryStrategy;
  }
});

// node_modules/@smithy/util-retry/dist-cjs/types.js
var require_types4 = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/util-retry/dist-cjs/index.js
var require_dist_cjs30 = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AdaptiveRetryStrategy(), exports);
    tslib_1.__exportStar(require_ConfiguredRetryStrategy(), exports);
    tslib_1.__exportStar(require_DefaultRateLimiter(), exports);
    tslib_1.__exportStar(require_StandardRetryStrategy(), exports);
    tslib_1.__exportStar(require_config3(), exports);
    tslib_1.__exportStar(require_constants4(), exports);
    tslib_1.__exportStar(require_types4(), exports);
  }
});

// node_modules/uuid/dist/esm-node/rng.js
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    import_crypto.default.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var import_crypto, rnds8Pool, poolPtr;
var init_rng = __esm({
  "node_modules/uuid/dist/esm-node/rng.js"() {
    import_crypto = __toESM(require("crypto"));
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  }
});

// node_modules/uuid/dist/esm-node/regex.js
var regex_default;
var init_regex = __esm({
  "node_modules/uuid/dist/esm-node/regex.js"() {
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// node_modules/uuid/dist/esm-node/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "node_modules/uuid/dist/esm-node/validate.js"() {
    init_regex();
    validate_default = validate;
  }
});

// node_modules/uuid/dist/esm-node/stringify.js
function stringify(arr, offset = 0) {
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, stringify_default;
var init_stringify = __esm({
  "node_modules/uuid/dist/esm-node/stringify.js"() {
    init_validate();
    byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    stringify_default = stringify;
  }
});

// node_modules/uuid/dist/esm-node/v1.js
function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  const tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || stringify_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "node_modules/uuid/dist/esm-node/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

// node_modules/uuid/dist/esm-node/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "node_modules/uuid/dist/esm-node/parse.js"() {
    init_validate();
    parse_default = parse;
  }
});

// node_modules/uuid/dist/esm-node/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "node_modules/uuid/dist/esm-node/v35.js"() {
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// node_modules/uuid/dist/esm-node/md5.js
function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto2.default.createHash("md5").update(bytes).digest();
}
var import_crypto2, md5_default;
var init_md5 = __esm({
  "node_modules/uuid/dist/esm-node/md5.js"() {
    import_crypto2 = __toESM(require("crypto"));
    md5_default = md5;
  }
});

// node_modules/uuid/dist/esm-node/v3.js
var v3, v3_default;
var init_v3 = __esm({
  "node_modules/uuid/dist/esm-node/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35_default("v3", 48, md5_default);
    v3_default = v3;
  }
});

// node_modules/uuid/dist/esm-node/v4.js
function v4(options, buf, offset) {
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  "node_modules/uuid/dist/esm-node/v4.js"() {
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

// node_modules/uuid/dist/esm-node/sha1.js
function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto3.default.createHash("sha1").update(bytes).digest();
}
var import_crypto3, sha1_default;
var init_sha1 = __esm({
  "node_modules/uuid/dist/esm-node/sha1.js"() {
    import_crypto3 = __toESM(require("crypto"));
    sha1_default = sha1;
  }
});

// node_modules/uuid/dist/esm-node/v5.js
var v5, v5_default;
var init_v5 = __esm({
  "node_modules/uuid/dist/esm-node/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35_default("v5", 80, sha1_default);
    v5_default = v5;
  }
});

// node_modules/uuid/dist/esm-node/nil.js
var nil_default;
var init_nil = __esm({
  "node_modules/uuid/dist/esm-node/nil.js"() {
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

// node_modules/uuid/dist/esm-node/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default;
var init_version = __esm({
  "node_modules/uuid/dist/esm-node/version.js"() {
    init_validate();
    version_default = version;
  }
});

// node_modules/uuid/dist/esm-node/index.js
var esm_node_exports = {};
__export(esm_node_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_node = __esm({
  "node_modules/uuid/dist/esm-node/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js
var require_defaultRetryQuota = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultRetryQuota = void 0;
    var util_retry_1 = require_dist_cjs30();
    var getDefaultRetryQuota = (initialRetryTokens, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement = (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0 ? _a : util_retry_1.NO_RETRY_INCREMENT;
      const retryCost = (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0 ? _b : util_retry_1.RETRY_COST;
      const timeoutRetryCost = (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0 ? _c : util_retry_1.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = (error) => error.name === "TimeoutError" ? timeoutRetryCost : retryCost;
      const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;
      const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
      });
    };
    exports.getDefaultRetryQuota = getDefaultRetryQuota;
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js
var require_delayDecider = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultDelayDecider = void 0;
    var util_retry_1 = require_dist_cjs30();
    var defaultDelayDecider = (delayBase, attempts) => Math.floor(Math.min(util_retry_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    exports.defaultDelayDecider = defaultDelayDecider;
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js
var require_retryDecider = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultRetryDecider = void 0;
    var service_error_classification_1 = require_dist_cjs29();
    var defaultRetryDecider = (error) => {
      if (!error) {
        return false;
      }
      return (0, service_error_classification_1.isRetryableByTrait)(error) || (0, service_error_classification_1.isClockSkewError)(error) || (0, service_error_classification_1.isThrottlingError)(error) || (0, service_error_classification_1.isTransientError)(error);
    };
    exports.defaultRetryDecider = defaultRetryDecider;
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/util.js
var require_util3 = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.asSdkError = void 0;
    var asSdkError = (error) => {
      if (error instanceof Error)
        return error;
      if (error instanceof Object)
        return Object.assign(new Error(), error);
      if (typeof error === "string")
        return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    };
    exports.asSdkError = asSdkError;
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy2 = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/StandardRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StandardRetryStrategy = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var service_error_classification_1 = require_dist_cjs29();
    var util_retry_1 = require_dist_cjs30();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var defaultRetryQuota_1 = require_defaultRetryQuota();
    var delayDecider_1 = require_delayDecider();
    var retryDecider_1 = require_retryDecider();
    var util_1 = require_util3();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = util_retry_1.RETRY_MODES.STANDARD;
        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;
        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;
        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            if (options === null || options === void 0 ? void 0 : options.beforeRequest) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (options === null || options === void 0 ? void 0 : options.afterRequest) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = (0, util_1.asSdkError)(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);
              const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
              const delay = Math.max(delayFromResponse || 0, delayFromDecider);
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    exports.StandardRetryStrategy = StandardRetryStrategy;
    var getDelayFromRetryAfterHeader = (response) => {
      if (!protocol_http_1.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return retryAfterSeconds * 1e3;
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate.getTime() - Date.now();
    };
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy2 = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AdaptiveRetryStrategy = void 0;
    var util_retry_1 = require_dist_cjs30();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy2();
    var AdaptiveRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options !== null && options !== void 0 ? options : {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new util_retry_1.DefaultRateLimiter();
        this.mode = util_retry_1.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          }
        });
      }
    };
    exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/configurations.js
var require_configurations3 = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = exports.CONFIG_RETRY_MODE = exports.ENV_RETRY_MODE = exports.resolveRetryConfig = exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = exports.CONFIG_MAX_ATTEMPTS = exports.ENV_MAX_ATTEMPTS = void 0;
    var util_middleware_1 = require_dist_cjs12();
    var util_retry_1 = require_dist_cjs30();
    exports.ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
    exports.CONFIG_MAX_ATTEMPTS = "max_attempts";
    exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        const value = env[exports.ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${exports.ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[exports.CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${exports.CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: util_retry_1.DEFAULT_MAX_ATTEMPTS
    };
    var resolveRetryConfig = (input) => {
      var _a;
      const { retryStrategy } = input;
      const maxAttempts = (0, util_middleware_1.normalizeProvider)((_a = input.maxAttempts) !== null && _a !== void 0 ? _a : util_retry_1.DEFAULT_MAX_ATTEMPTS);
      return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
          if (retryStrategy) {
            return retryStrategy;
          }
          const retryMode = await (0, util_middleware_1.normalizeProvider)(input.retryMode)();
          if (retryMode === util_retry_1.RETRY_MODES.ADAPTIVE) {
            return new util_retry_1.AdaptiveRetryStrategy(maxAttempts);
          }
          return new util_retry_1.StandardRetryStrategy(maxAttempts);
        }
      };
    };
    exports.resolveRetryConfig = resolveRetryConfig;
    exports.ENV_RETRY_MODE = "AWS_RETRY_MODE";
    exports.CONFIG_RETRY_MODE = "retry_mode";
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[exports.CONFIG_RETRY_MODE],
      default: util_retry_1.DEFAULT_RETRY_MODE
    };
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js
var require_omitRetryHeadersMiddleware = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getOmitRetryHeadersPlugin = exports.omitRetryHeadersMiddlewareOptions = exports.omitRetryHeadersMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var util_retry_1 = require_dist_cjs30();
    var omitRetryHeadersMiddleware = () => (next) => async (args) => {
      const { request } = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        delete request.headers[util_retry_1.INVOCATION_ID_HEADER];
        delete request.headers[util_retry_1.REQUEST_HEADER];
      }
      return next(args);
    };
    exports.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;
    exports.omitRetryHeadersMiddlewareOptions = {
      name: "omitRetryHeadersMiddleware",
      tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
      relation: "before",
      toMiddleware: "awsAuthMiddleware",
      override: true
    };
    var getOmitRetryHeadersPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.omitRetryHeadersMiddleware)(), exports.omitRetryHeadersMiddlewareOptions);
      }
    });
    exports.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/retryMiddleware.js
var require_retryMiddleware = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/retryMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRetryAfterHint = exports.getRetryPlugin = exports.retryMiddlewareOptions = exports.retryMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var service_error_classification_1 = require_dist_cjs29();
    var util_retry_1 = require_dist_cjs30();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var util_1 = require_util3();
    var retryMiddleware = (options) => (next, context) => async (args) => {
      let retryStrategy = await options.retryStrategy();
      const maxAttempts = await options.maxAttempts();
      if (isRetryStrategyV2(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            const { response, output } = await next(args);
            retryStrategy.recordSuccess(retryToken);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalRetryDelay;
            return { response, output };
          } catch (e) {
            const retryErrorInfo = getRetryErrorInfo(e);
            lastError = (0, util_1.asSdkError)(e);
            try {
              retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
            } catch (refreshError) {
              if (!lastError.$metadata) {
                lastError.$metadata = {};
              }
              lastError.$metadata.attempts = attempts + 1;
              lastError.$metadata.totalRetryDelay = totalRetryDelay;
              throw lastError;
            }
            attempts = retryToken.getRetryCount();
            const delay = retryToken.getRetryDelay();
            totalRetryDelay += delay;
            await new Promise((resolve) => setTimeout(resolve, delay));
          }
        }
      } else {
        retryStrategy = retryStrategy;
        if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)
          context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
        return retryStrategy.retry(next, args);
      }
    };
    exports.retryMiddleware = retryMiddleware;
    var isRetryStrategyV2 = (retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined";
    var getRetryErrorInfo = (error) => {
      const errorInfo = {
        errorType: getRetryErrorType(error)
      };
      const retryAfterHint = (0, exports.getRetryAfterHint)(error.$response);
      if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
      }
      return errorInfo;
    };
    var getRetryErrorType = (error) => {
      if ((0, service_error_classification_1.isThrottlingError)(error))
        return "THROTTLING";
      if ((0, service_error_classification_1.isTransientError)(error))
        return "TRANSIENT";
      if ((0, service_error_classification_1.isServerError)(error))
        return "SERVER_ERROR";
      return "CLIENT_ERROR";
    };
    exports.retryMiddlewareOptions = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    var getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.retryMiddleware)(options), exports.retryMiddlewareOptions);
      }
    });
    exports.getRetryPlugin = getRetryPlugin;
    var getRetryAfterHint = (response) => {
      if (!protocol_http_1.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1e3);
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate;
    };
    exports.getRetryAfterHint = getRetryAfterHint;
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/index.js
var require_dist_cjs31 = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AdaptiveRetryStrategy2(), exports);
    tslib_1.__exportStar(require_StandardRetryStrategy2(), exports);
    tslib_1.__exportStar(require_configurations3(), exports);
    tslib_1.__exportStar(require_delayDecider(), exports);
    tslib_1.__exportStar(require_omitRetryHeadersMiddleware(), exports);
    tslib_1.__exportStar(require_retryDecider(), exports);
    tslib_1.__exportStar(require_retryMiddleware(), exports);
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/NoOpLogger.js
var require_NoOpLogger = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/NoOpLogger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NoOpLogger = void 0;
    var NoOpLogger = class {
      trace() {
      }
      debug() {
      }
      info() {
      }
      warn() {
      }
      error() {
      }
    };
    exports.NoOpLogger = NoOpLogger;
  }
});

// node_modules/@smithy/middleware-stack/dist-cjs/MiddlewareStack.js
var require_MiddlewareStack = __commonJS({
  "node_modules/@smithy/middleware-stack/dist-cjs/MiddlewareStack.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.constructStack = void 0;
    var getAllAliases = (name, aliases) => {
      const _aliases = [];
      if (name) {
        _aliases.push(name);
      }
      if (aliases) {
        for (const alias of aliases) {
          _aliases.push(alias);
        }
      }
      return _aliases;
    };
    var getMiddlewareNameWithAliases = (name, aliases) => {
      return `${name || "anonymous"}${aliases && aliases.length > 0 ? ` (a.k.a. ${aliases.join(",")})` : ""}`;
    };
    var constructStack = () => {
      let absoluteEntries = [];
      let relativeEntries = [];
      let identifyOnResolve = false;
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
      const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          const aliases = getAllAliases(entry.name, entry.aliases);
          if (aliases.includes(toRemove)) {
            isRemoved = true;
            for (const alias of aliases) {
              entriesNameSet.delete(alias);
            }
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            for (const alias of getAllAliases(entry.name, entry.aliases)) {
              entriesNameSet.delete(alias);
            }
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const cloneTo = (toStack) => {
        var _a;
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        (_a = toStack.identifyOnResolve) === null || _a === void 0 ? void 0 : _a.call(toStack, stack.identifyOnResolve());
        return toStack;
      };
      const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      };
      const getMiddlewareList = (debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
            normalizedEntriesNameMap[alias] = normalizedEntry;
          }
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
            normalizedEntriesNameMap[alias] = normalizedEntry;
          }
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug) {
                return;
              }
              throw new Error(`${entry.toMiddleware} is not found when adding ${getMiddlewareNameWithAliases(entry.name, entry.aliases)} middleware ${entry.relation} ${entry.toMiddleware}`);
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expandedMiddlewareList) => {
          wholeList.push(...expandedMiddlewareList);
          return wholeList;
        }, []);
        return mainChain;
      };
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override, aliases: _aliases } = options;
          const entry = {
            step: "initialize",
            priority: "normal",
            middleware,
            ...options
          };
          const aliases = getAllAliases(name, _aliases);
          if (aliases.length > 0) {
            if (aliases.some((alias) => entriesNameSet.has(alias))) {
              if (!override)
                throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
              for (const alias of aliases) {
                const toOverrideIndex = absoluteEntries.findIndex((entry2) => {
                  var _a;
                  return entry2.name === alias || ((_a = entry2.aliases) === null || _a === void 0 ? void 0 : _a.some((a) => a === alias));
                });
                if (toOverrideIndex === -1) {
                  continue;
                }
                const toOverride = absoluteEntries[toOverrideIndex];
                if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) {
                  throw new Error(`"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware with ${entry.priority} priority in ${entry.step} step.`);
                }
                absoluteEntries.splice(toOverrideIndex, 1);
              }
            }
            for (const alias of aliases) {
              entriesNameSet.add(alias);
            }
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override, aliases: _aliases } = options;
          const entry = {
            middleware,
            ...options
          };
          const aliases = getAllAliases(name, _aliases);
          if (aliases.length > 0) {
            if (aliases.some((alias) => entriesNameSet.has(alias))) {
              if (!override)
                throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
              for (const alias of aliases) {
                const toOverrideIndex = relativeEntries.findIndex((entry2) => {
                  var _a;
                  return entry2.name === alias || ((_a = entry2.aliases) === null || _a === void 0 ? void 0 : _a.some((a) => a === alias));
                });
                if (toOverrideIndex === -1) {
                  continue;
                }
                const toOverride = relativeEntries[toOverrideIndex];
                if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                  throw new Error(`"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
                }
                relativeEntries.splice(toOverrideIndex, 1);
              }
            }
            for (const alias of aliases) {
              entriesNameSet.add(alias);
            }
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo((0, exports.constructStack)()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = (entry) => {
            const { tags, name, aliases: _aliases } = entry;
            if (tags && tags.includes(toRemove)) {
              const aliases = getAllAliases(name, _aliases);
              for (const alias of aliases) {
                entriesNameSet.delete(alias);
              }
              isRemoved = true;
              return false;
            }
            return true;
          };
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          var _a, _b;
          const cloned = cloneTo((0, exports.constructStack)());
          cloned.use(from);
          cloned.identifyOnResolve(identifyOnResolve || cloned.identifyOnResolve() || ((_b = (_a = from.identifyOnResolve) === null || _a === void 0 ? void 0 : _a.call(from)) !== null && _b !== void 0 ? _b : false));
          return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
          return getMiddlewareList(true).map((mw) => {
            var _a;
            const step = (_a = mw.step) !== null && _a !== void 0 ? _a : mw.relation + " " + mw.toMiddleware;
            return getMiddlewareNameWithAliases(mw.name, mw.aliases) + " - " + step;
          });
        },
        identifyOnResolve(toggle) {
          if (typeof toggle === "boolean")
            identifyOnResolve = toggle;
          return identifyOnResolve;
        },
        resolve: (handler2, context) => {
          for (const middleware of getMiddlewareList().map((entry) => entry.middleware).reverse()) {
            handler2 = middleware(handler2, context);
          }
          if (identifyOnResolve) {
            console.log(stack.identify());
          }
          return handler2;
        }
      };
      return stack;
    };
    exports.constructStack = constructStack;
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});

// node_modules/@smithy/middleware-stack/dist-cjs/index.js
var require_dist_cjs32 = __commonJS({
  "node_modules/@smithy/middleware-stack/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_MiddlewareStack(), exports);
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/client.js
var require_client3 = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Client = void 0;
    var middleware_stack_1 = require_dist_cjs32();
    var Client = class {
      constructor(config) {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
        this.config = config;
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler2 = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) {
          handler2(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
          });
        } else {
          return handler2(command).then((result) => result.output);
        }
      }
      destroy() {
        if (this.config.requestHandler.destroy)
          this.config.requestHandler.destroy();
      }
    };
    exports.Client = Client;
  }
});

// node_modules/@smithy/util-base64/dist-cjs/fromBase64.js
var require_fromBase64 = __commonJS({
  "node_modules/@smithy/util-base64/dist-cjs/fromBase64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs14();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    var fromBase64 = (input) => {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    };
    exports.fromBase64 = fromBase64;
  }
});

// node_modules/@smithy/util-base64/dist-cjs/toBase64.js
var require_toBase64 = __commonJS({
  "node_modules/@smithy/util-base64/dist-cjs/toBase64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs14();
    var toBase64 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    exports.toBase64 = toBase64;
  }
});

// node_modules/@smithy/util-base64/dist-cjs/index.js
var require_dist_cjs33 = __commonJS({
  "node_modules/@smithy/util-base64/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromBase64(), exports);
    tslib_1.__exportStar(require_toBase64(), exports);
  }
});

// node_modules/@smithy/util-stream/dist-cjs/blob/transforms.js
var require_transforms = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/blob/transforms.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.transformFromString = exports.transformToString = void 0;
    var util_base64_1 = require_dist_cjs33();
    var util_utf8_1 = require_dist_cjs15();
    var Uint8ArrayBlobAdapter_1 = require_Uint8ArrayBlobAdapter();
    function transformToString(payload, encoding = "utf-8") {
      if (encoding === "base64") {
        return (0, util_base64_1.toBase64)(payload);
      }
      return (0, util_utf8_1.toUtf8)(payload);
    }
    exports.transformToString = transformToString;
    function transformFromString(str, encoding) {
      if (encoding === "base64") {
        return Uint8ArrayBlobAdapter_1.Uint8ArrayBlobAdapter.mutate((0, util_base64_1.fromBase64)(str));
      }
      return Uint8ArrayBlobAdapter_1.Uint8ArrayBlobAdapter.mutate((0, util_utf8_1.fromUtf8)(str));
    }
    exports.transformFromString = transformFromString;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/blob/Uint8ArrayBlobAdapter.js
var require_Uint8ArrayBlobAdapter = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/blob/Uint8ArrayBlobAdapter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Uint8ArrayBlobAdapter = void 0;
    var transforms_1 = require_transforms();
    var Uint8ArrayBlobAdapter = class _Uint8ArrayBlobAdapter extends Uint8Array {
      static fromString(source, encoding = "utf-8") {
        switch (typeof source) {
          case "string":
            return (0, transforms_1.transformFromString)(source, encoding);
          default:
            throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);
        }
      }
      static mutate(source) {
        Object.setPrototypeOf(source, _Uint8ArrayBlobAdapter.prototype);
        return source;
      }
      transformToString(encoding = "utf-8") {
        return (0, transforms_1.transformToString)(this, encoding);
      }
    };
    exports.Uint8ArrayBlobAdapter = Uint8ArrayBlobAdapter;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js
var require_getAwsChunkedEncodingStream = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAwsChunkedEncodingStream = void 0;
    var stream_1 = require("stream");
    var getAwsChunkedEncodingStream = (readableStream, options) => {
      const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;
      const checksumRequired = base64Encoder !== void 0 && checksumAlgorithmFn !== void 0 && checksumLocationName !== void 0 && streamHasher !== void 0;
      const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : void 0;
      const awsChunkedEncodingStream = new stream_1.Readable({ read: () => {
      } });
      readableStream.on("data", (data) => {
        const length = bodyLengthChecker(data) || 0;
        awsChunkedEncodingStream.push(`${length.toString(16)}\r
`);
        awsChunkedEncodingStream.push(data);
        awsChunkedEncodingStream.push("\r\n");
      });
      readableStream.on("end", async () => {
        awsChunkedEncodingStream.push(`0\r
`);
        if (checksumRequired) {
          const checksum = base64Encoder(await digest);
          awsChunkedEncodingStream.push(`${checksumLocationName}:${checksum}\r
`);
          awsChunkedEncodingStream.push(`\r
`);
        }
        awsChunkedEncodingStream.push(null);
      });
      return awsChunkedEncodingStream;
    };
    exports.getAwsChunkedEncodingStream = getAwsChunkedEncodingStream;
  }
});

// node_modules/@smithy/querystring-builder/dist-cjs/index.js
var require_dist_cjs34 = __commonJS({
  "node_modules/@smithy/querystring-builder/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildQueryString = void 0;
    var util_uri_escape_1 = require_dist_cjs16();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, util_uri_escape_1.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, util_uri_escape_1.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === "string") {
            qsEntry += `=${(0, util_uri_escape_1.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join("&");
    }
    exports.buildQueryString = buildQueryString;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/constants.js
var require_constants5 = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = void 0;
    exports.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/get-transformed-headers.js
var require_get_transformed_headers = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/get-transformed-headers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTransformedHeaders = void 0;
    var getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    };
    exports.getTransformedHeaders = getTransformedHeaders;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/set-connection-timeout.js
var require_set_connection_timeout = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/set-connection-timeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setConnectionTimeout = void 0;
    var setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      const timeoutId = setTimeout(() => {
        request.destroy();
        reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
          name: "TimeoutError"
        }));
      }, timeoutInMs);
      request.on("socket", (socket) => {
        if (socket.connecting) {
          socket.on("connect", () => {
            clearTimeout(timeoutId);
          });
        } else {
          clearTimeout(timeoutId);
        }
      });
    };
    exports.setConnectionTimeout = setConnectionTimeout;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/set-socket-keep-alive.js
var require_set_socket_keep_alive = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/set-socket-keep-alive.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setSocketKeepAlive = void 0;
    var setSocketKeepAlive = (request, { keepAlive, keepAliveMsecs }) => {
      if (keepAlive !== true) {
        return;
      }
      request.on("socket", (socket) => {
        socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
      });
    };
    exports.setSocketKeepAlive = setSocketKeepAlive;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/set-socket-timeout.js
var require_set_socket_timeout = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/set-socket-timeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setSocketTimeout = void 0;
    var setSocketTimeout = (request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
      });
    };
    exports.setSocketTimeout = setSocketTimeout;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/write-request-body.js
var require_write_request_body = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/write-request-body.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.writeRequestBody = void 0;
    var stream_1 = require("stream");
    var MIN_WAIT_TIME = 1e3;
    async function writeRequestBody(httpRequest, request, maxContinueTimeoutMs = MIN_WAIT_TIME) {
      var _a;
      const headers = (_a = request.headers) !== null && _a !== void 0 ? _a : {};
      const expect = headers["Expect"] || headers["expect"];
      let timeoutId = -1;
      let hasError = false;
      if (expect === "100-continue") {
        await Promise.race([
          new Promise((resolve) => {
            timeoutId = Number(setTimeout(resolve, Math.max(MIN_WAIT_TIME, maxContinueTimeoutMs)));
          }),
          new Promise((resolve) => {
            httpRequest.on("continue", () => {
              clearTimeout(timeoutId);
              resolve();
            });
            httpRequest.on("error", () => {
              hasError = true;
              clearTimeout(timeoutId);
              resolve();
            });
          })
        ]);
      }
      if (!hasError) {
        writeBody(httpRequest, request.body);
      }
    }
    exports.writeRequestBody = writeRequestBody;
    function writeBody(httpRequest, body) {
      if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest);
      } else if (body) {
        httpRequest.end(Buffer.from(body));
      } else {
        httpRequest.end();
      }
    }
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/node-http-handler.js
var require_node_http_handler = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/node-http-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttpHandler = exports.DEFAULT_REQUEST_TIMEOUT = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var querystring_builder_1 = require_dist_cjs34();
    var http_1 = require("http");
    var https_1 = require("https");
    var constants_1 = require_constants5();
    var get_transformed_headers_1 = require_get_transformed_headers();
    var set_connection_timeout_1 = require_set_connection_timeout();
    var set_socket_keep_alive_1 = require_set_socket_keep_alive();
    var set_socket_timeout_1 = require_set_socket_timeout();
    var write_request_body_1 = require_write_request_body();
    exports.DEFAULT_REQUEST_TIMEOUT = 0;
    var NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { requestTimeout, connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          requestTimeout: requestTimeout !== null && requestTimeout !== void 0 ? requestTimeout : socketTimeout,
          httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),
          httpsAgent: httpsAgent || new https_1.Agent({ keepAlive, maxSockets })
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0 ? void 0 : _b.destroy();
        (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0 ? void 0 : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((_resolve, _reject) => {
          var _a, _b;
          let writeRequestBodyPromise = void 0;
          const resolve = async (arg) => {
            await writeRequestBodyPromise;
            _resolve(arg);
          };
          const reject = async (arg) => {
            await writeRequestBodyPromise;
            _reject(arg);
          };
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === "https:";
          const queryString = (0, querystring_builder_1.buildQueryString)(request.query || {});
          let auth = void 0;
          if (request.username != null || request.password != null) {
            const username = (_a = request.username) !== null && _a !== void 0 ? _a : "";
            const password = (_b = request.password) !== null && _b !== void 0 ? _b : "";
            auth = `${username}:${password}`;
          }
          let path = request.path;
          if (queryString) {
            path += `?${queryString}`;
          }
          if (request.fragment) {
            path += `#${request.fragment}`;
          }
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path,
            port: request.port,
            agent: isSSL ? this.config.httpsAgent : this.config.httpAgent,
            auth
          };
          const requestFunc = isSSL ? https_1.request : http_1.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: res.statusCode || -1,
              reason: res.statusMessage,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          (0, set_connection_timeout_1.setConnectionTimeout)(req, reject, this.config.connectionTimeout);
          (0, set_socket_timeout_1.setSocketTimeout)(req, reject, this.config.requestTimeout);
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          const httpAgent = nodeHttpsOptions.agent;
          if (typeof httpAgent === "object" && "keepAlive" in httpAgent) {
            (0, set_socket_keep_alive_1.setSocketKeepAlive)(req, {
              keepAlive: httpAgent.keepAlive,
              keepAliveMsecs: httpAgent.keepAliveMsecs
            });
          }
          writeRequestBodyPromise = (0, write_request_body_1.writeRequestBody)(req, request, this.config.requestTimeout).catch(_reject);
        });
      }
      updateHttpClientConfig(key, value) {
        this.config = void 0;
        this.configProvider = this.configProvider.then((config) => {
          return {
            ...config,
            [key]: value
          };
        });
      }
      httpHandlerConfigs() {
        var _a;
        return (_a = this.config) !== null && _a !== void 0 ? _a : {};
      }
    };
    exports.NodeHttpHandler = NodeHttpHandler;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/node-http2-connection-pool.js
var require_node_http2_connection_pool = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/node-http2-connection-pool.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttp2ConnectionPool = void 0;
    var NodeHttp2ConnectionPool = class {
      constructor(sessions) {
        this.sessions = [];
        this.sessions = sessions !== null && sessions !== void 0 ? sessions : [];
      }
      poll() {
        if (this.sessions.length > 0) {
          return this.sessions.shift();
        }
      }
      offerLast(session) {
        this.sessions.push(session);
      }
      contains(session) {
        return this.sessions.includes(session);
      }
      remove(session) {
        this.sessions = this.sessions.filter((s) => s !== session);
      }
      [Symbol.iterator]() {
        return this.sessions[Symbol.iterator]();
      }
      destroy(connection) {
        for (const session of this.sessions) {
          if (session === connection) {
            if (!session.destroyed) {
              session.destroy();
            }
          }
        }
      }
    };
    exports.NodeHttp2ConnectionPool = NodeHttp2ConnectionPool;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/node-http2-connection-manager.js
var require_node_http2_connection_manager = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/node-http2-connection-manager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttp2ConnectionManager = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var http2_1 = tslib_1.__importDefault(require("http2"));
    var node_http2_connection_pool_1 = require_node_http2_connection_pool();
    var NodeHttp2ConnectionManager = class {
      constructor(config) {
        this.sessionCache = /* @__PURE__ */ new Map();
        this.config = config;
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
          throw new RangeError("maxConcurrency must be greater than zero.");
        }
      }
      lease(requestContext, connectionConfiguration) {
        const url = this.getUrlString(requestContext);
        const existingPool = this.sessionCache.get(url);
        if (existingPool) {
          const existingSession = existingPool.poll();
          if (existingSession && !this.config.disableConcurrency) {
            return existingSession;
          }
        }
        const session = http2_1.default.connect(url);
        if (this.config.maxConcurrency) {
          session.settings({ maxConcurrentStreams: this.config.maxConcurrency }, (err) => {
            if (err) {
              throw new Error("Fail to set maxConcurrentStreams to " + this.config.maxConcurrency + "when creating new session for " + requestContext.destination.toString());
            }
          });
        }
        session.unref();
        const destroySessionCb = () => {
          session.destroy();
          this.deleteSession(url, session);
        };
        session.on("goaway", destroySessionCb);
        session.on("error", destroySessionCb);
        session.on("frameError", destroySessionCb);
        session.on("close", () => this.deleteSession(url, session));
        if (connectionConfiguration.requestTimeout) {
          session.setTimeout(connectionConfiguration.requestTimeout, destroySessionCb);
        }
        const connectionPool = this.sessionCache.get(url) || new node_http2_connection_pool_1.NodeHttp2ConnectionPool();
        connectionPool.offerLast(session);
        this.sessionCache.set(url, connectionPool);
        return session;
      }
      deleteSession(authority, session) {
        const existingConnectionPool = this.sessionCache.get(authority);
        if (!existingConnectionPool) {
          return;
        }
        if (!existingConnectionPool.contains(session)) {
          return;
        }
        existingConnectionPool.remove(session);
        this.sessionCache.set(authority, existingConnectionPool);
      }
      release(requestContext, session) {
        var _a;
        const cacheKey = this.getUrlString(requestContext);
        (_a = this.sessionCache.get(cacheKey)) === null || _a === void 0 ? void 0 : _a.offerLast(session);
      }
      destroy() {
        for (const [key, connectionPool] of this.sessionCache) {
          for (const session of connectionPool) {
            if (!session.destroyed) {
              session.destroy();
            }
            connectionPool.remove(session);
          }
          this.sessionCache.delete(key);
        }
      }
      setMaxConcurrentStreams(maxConcurrentStreams) {
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
          throw new RangeError("maxConcurrentStreams must be greater than zero.");
        }
        this.config.maxConcurrency = maxConcurrentStreams;
      }
      setDisableConcurrentStreams(disableConcurrentStreams) {
        this.config.disableConcurrency = disableConcurrentStreams;
      }
      getUrlString(request) {
        return request.destination.toString();
      }
    };
    exports.NodeHttp2ConnectionManager = NodeHttp2ConnectionManager;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/node-http2-handler.js
var require_node_http2_handler = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/node-http2-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttp2Handler = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var querystring_builder_1 = require_dist_cjs34();
    var http2_1 = require("http2");
    var get_transformed_headers_1 = require_get_transformed_headers();
    var node_http2_connection_manager_1 = require_node_http2_connection_manager();
    var write_request_body_1 = require_write_request_body();
    var NodeHttp2Handler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "h2" };
        this.connectionManager = new node_http2_connection_manager_1.NodeHttp2ConnectionManager({});
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((opts) => {
              resolve(opts || {});
            }).catch(reject);
          } else {
            resolve(options || {});
          }
        });
      }
      destroy() {
        this.connectionManager.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
          this.connectionManager.setDisableConcurrentStreams(this.config.disableConcurrentStreams || false);
          if (this.config.maxConcurrentStreams) {
            this.connectionManager.setMaxConcurrentStreams(this.config.maxConcurrentStreams);
          }
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((_resolve, _reject) => {
          var _a, _b, _c;
          let fulfilled = false;
          let writeRequestBodyPromise = void 0;
          const resolve = async (arg) => {
            await writeRequestBodyPromise;
            _resolve(arg);
          };
          const reject = async (arg) => {
            await writeRequestBodyPromise;
            _reject(arg);
          };
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const { hostname, method, port, protocol, query } = request;
          let auth = "";
          if (request.username != null || request.password != null) {
            const username = (_a = request.username) !== null && _a !== void 0 ? _a : "";
            const password = (_b = request.password) !== null && _b !== void 0 ? _b : "";
            auth = `${username}:${password}@`;
          }
          const authority = `${protocol}//${auth}${hostname}${port ? `:${port}` : ""}`;
          const requestContext = { destination: new URL(authority) };
          const session = this.connectionManager.lease(requestContext, {
            requestTimeout: (_c = this.config) === null || _c === void 0 ? void 0 : _c.sessionTimeout,
            disableConcurrentStreams: disableConcurrentStreams || false
          });
          const rejectWithDestroy = (err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            reject(err);
          };
          const queryString = (0, querystring_builder_1.buildQueryString)(query || {});
          let path = request.path;
          if (queryString) {
            path += `?${queryString}`;
          }
          if (request.fragment) {
            path += `#${request.fragment}`;
          }
          const req = session.request({
            ...request.headers,
            [http2_1.constants.HTTP2_HEADER_PATH]: path,
            [http2_1.constants.HTTP2_HEADER_METHOD]: method
          });
          session.ref();
          req.on("response", (headers) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: headers[":status"] || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(headers),
              body: req
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.connectionManager.deleteSession(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = "TimeoutError";
              rejectWithDestroy(timeoutError);
            });
          }
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.close();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              rejectWithDestroy(abortError);
            };
          }
          req.on("frameError", (type, code, id) => {
            rejectWithDestroy(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on("error", rejectWithDestroy);
          req.on("aborted", () => {
            rejectWithDestroy(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));
          });
          req.on("close", () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              rejectWithDestroy(new Error("Unexpected error: http2 request did not get a response"));
            }
          });
          writeRequestBodyPromise = (0, write_request_body_1.writeRequestBody)(req, request, requestTimeout);
        });
      }
      updateHttpClientConfig(key, value) {
        this.config = void 0;
        this.configProvider = this.configProvider.then((config) => {
          return {
            ...config,
            [key]: value
          };
        });
      }
      httpHandlerConfigs() {
        var _a;
        return (_a = this.config) !== null && _a !== void 0 ? _a : {};
      }
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
    };
    exports.NodeHttp2Handler = NodeHttp2Handler;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/stream-collector/collector.js
var require_collector = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/stream-collector/collector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Collector = void 0;
    var stream_1 = require("stream");
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    exports.Collector = Collector;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/stream-collector/index.js
var require_stream_collector = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/stream-collector/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.streamCollector = void 0;
    var collector_1 = require_collector();
    var streamCollector = (stream) => new Promise((resolve, reject) => {
      const collector = new collector_1.Collector();
      stream.pipe(collector);
      stream.on("error", (err) => {
        collector.end();
        reject(err);
      });
      collector.on("error", reject);
      collector.on("finish", function() {
        const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
        resolve(bytes);
      });
    });
    exports.streamCollector = streamCollector;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/index.js
var require_dist_cjs35 = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_node_http_handler(), exports);
    tslib_1.__exportStar(require_node_http2_handler(), exports);
    tslib_1.__exportStar(require_stream_collector(), exports);
  }
});

// node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js
var require_sdk_stream_mixin = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sdkStreamMixin = void 0;
    var node_http_handler_1 = require_dist_cjs35();
    var util_buffer_from_1 = require_dist_cjs14();
    var stream_1 = require("stream");
    var util_1 = require("util");
    var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
    var sdkStreamMixin = (stream) => {
      var _a, _b;
      if (!(stream instanceof stream_1.Readable)) {
        const name = ((_b = (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;
        throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await (0, node_http_handler_1.streamCollector)(stream);
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === void 0 || Buffer.isEncoding(encoding)) {
            return (0, util_buffer_from_1.fromArrayBuffer)(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding);
          } else {
            const decoder = new util_1.TextDecoder(encoding);
            return decoder.decode(buf);
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
          }
          if (stream.readableFlowing !== null) {
            throw new Error("The stream has been consumed by other callbacks.");
          }
          if (typeof stream_1.Readable.toWeb !== "function") {
            throw new Error("Readable.toWeb() is not supported. Please make sure you are using Node.js >= 17.0.0, or polyfill is available.");
          }
          transformed = true;
          return stream_1.Readable.toWeb(stream);
        }
      });
    };
    exports.sdkStreamMixin = sdkStreamMixin;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/index.js
var require_dist_cjs36 = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Uint8ArrayBlobAdapter(), exports);
    tslib_1.__exportStar(require_getAwsChunkedEncodingStream(), exports);
    tslib_1.__exportStar(require_sdk_stream_mixin(), exports);
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/collect-stream-body.js
var require_collect_stream_body = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/collect-stream-body.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.collectBody = void 0;
    var util_stream_1 = require_dist_cjs36();
    var collectBody = async (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return util_stream_1.Uint8ArrayBlobAdapter.mutate(streamBody);
      }
      if (!streamBody) {
        return util_stream_1.Uint8ArrayBlobAdapter.mutate(new Uint8Array());
      }
      const fromContext = context.streamCollector(streamBody);
      return util_stream_1.Uint8ArrayBlobAdapter.mutate(await fromContext);
    };
    exports.collectBody = collectBody;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/command.js
var require_command3 = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/command.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Command = void 0;
    var middleware_stack_1 = require_dist_cjs32();
    var Command = class {
      constructor() {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
      }
    };
    exports.Command = Command;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/constants.js
var require_constants6 = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SENSITIVE_STRING = void 0;
    exports.SENSITIVE_STRING = "***SensitiveInformation***";
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/create-aggregated-client.js
var require_create_aggregated_client = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/create-aggregated-client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAggregatedClient = void 0;
    var createAggregatedClient = (commands, Client) => {
      for (const command of Object.keys(commands)) {
        const CommandCtor = commands[command];
        const methodImpl = async function(args, optionsOrCb, cb) {
          const command2 = new CommandCtor(args);
          if (typeof optionsOrCb === "function") {
            this.send(command2, optionsOrCb);
          } else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
              throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
            this.send(command2, optionsOrCb || {}, cb);
          } else {
            return this.send(command2, optionsOrCb);
          }
        };
        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
        Client.prototype[methodName] = methodImpl;
      }
    };
    exports.createAggregatedClient = createAggregatedClient;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/parse-utils.js
var require_parse_utils = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/parse-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.logger = exports.strictParseByte = exports.strictParseShort = exports.strictParseInt32 = exports.strictParseInt = exports.strictParseLong = exports.limitedParseFloat32 = exports.limitedParseFloat = exports.handleFloat = exports.limitedParseDouble = exports.strictParseFloat32 = exports.strictParseFloat = exports.strictParseDouble = exports.expectUnion = exports.expectString = exports.expectObject = exports.expectNonNull = exports.expectByte = exports.expectShort = exports.expectInt32 = exports.expectInt = exports.expectLong = exports.expectFloat32 = exports.expectNumber = exports.expectBoolean = exports.parseBoolean = void 0;
    var parseBoolean = (value) => {
      switch (value) {
        case "true":
          return true;
        case "false":
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    };
    exports.parseBoolean = parseBoolean;
    var expectBoolean = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "number") {
        if (value === 0 || value === 1) {
          exports.logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (value === 0) {
          return false;
        }
        if (value === 1) {
          return true;
        }
      }
      if (typeof value === "string") {
        const lower = value.toLowerCase();
        if (lower === "false" || lower === "true") {
          exports.logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (lower === "false") {
          return false;
        }
        if (lower === "true") {
          return true;
        }
      }
      if (typeof value === "boolean") {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
    };
    exports.expectBoolean = expectBoolean;
    var expectNumber = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
          if (String(parsed) !== String(value)) {
            exports.logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
          }
          return parsed;
        }
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
    };
    exports.expectNumber = expectNumber;
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = (value) => {
      const expected = (0, exports.expectNumber)(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    };
    exports.expectFloat32 = expectFloat32;
    var expectLong = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
    };
    exports.expectLong = expectLong;
    exports.expectInt = exports.expectLong;
    var expectInt32 = (value) => expectSizedInt(value, 32);
    exports.expectInt32 = expectInt32;
    var expectShort = (value) => expectSizedInt(value, 16);
    exports.expectShort = expectShort;
    var expectByte = (value) => expectSizedInt(value, 8);
    exports.expectByte = expectByte;
    var expectSizedInt = (value, size) => {
      const expected = (0, exports.expectLong)(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    };
    var castInt = (value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    };
    var expectNonNull = (value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    };
    exports.expectNonNull = expectNonNull;
    var expectObject = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      const receivedType = Array.isArray(value) ? "array" : typeof value;
      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
    };
    exports.expectObject = expectObject;
    var expectString = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      if (["boolean", "number", "bigint"].includes(typeof value)) {
        exports.logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
      }
      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
    };
    exports.expectString = expectString;
    var expectUnion = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = (0, exports.expectObject)(value);
      const setKeys = Object.entries(asObject).filter(([, v]) => v != null).map(([k]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    };
    exports.expectUnion = expectUnion;
    var strictParseDouble = (value) => {
      if (typeof value == "string") {
        return (0, exports.expectNumber)(parseNumber(value));
      }
      return (0, exports.expectNumber)(value);
    };
    exports.strictParseDouble = strictParseDouble;
    exports.strictParseFloat = exports.strictParseDouble;
    var strictParseFloat32 = (value) => {
      if (typeof value == "string") {
        return (0, exports.expectFloat32)(parseNumber(value));
      }
      return (0, exports.expectFloat32)(value);
    };
    exports.strictParseFloat32 = strictParseFloat32;
    var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = (value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    };
    var limitedParseDouble = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports.expectNumber)(value);
    };
    exports.limitedParseDouble = limitedParseDouble;
    exports.handleFloat = exports.limitedParseDouble;
    exports.limitedParseFloat = exports.limitedParseDouble;
    var limitedParseFloat32 = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports.expectFloat32)(value);
    };
    exports.limitedParseFloat32 = limitedParseFloat32;
    var parseFloatString = (value) => {
      switch (value) {
        case "NaN":
          return NaN;
        case "Infinity":
          return Infinity;
        case "-Infinity":
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    };
    var strictParseLong = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectLong)(parseNumber(value));
      }
      return (0, exports.expectLong)(value);
    };
    exports.strictParseLong = strictParseLong;
    exports.strictParseInt = exports.strictParseLong;
    var strictParseInt32 = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectInt32)(parseNumber(value));
      }
      return (0, exports.expectInt32)(value);
    };
    exports.strictParseInt32 = strictParseInt32;
    var strictParseShort = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectShort)(parseNumber(value));
      }
      return (0, exports.expectShort)(value);
    };
    exports.strictParseShort = strictParseShort;
    var strictParseByte = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectByte)(parseNumber(value));
      }
      return (0, exports.expectByte)(value);
    };
    exports.strictParseByte = strictParseByte;
    var stackTraceWarning = (message) => {
      return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s) => !s.includes("stackTraceWarning")).join("\n");
    };
    exports.logger = {
      warn: console.warn
    };
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/date-utils.js
var require_date_utils = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/date-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseEpochTimestamp = exports.parseRfc7231DateTime = exports.parseRfc3339DateTimeWithOffset = exports.parseRfc3339DateTime = exports.dateToUtcString = void 0;
    var parse_utils_1 = require_parse_utils();
    var DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    exports.dateToUtcString = dateToUtcString;
    var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    var parseRfc3339DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    };
    exports.parseRfc3339DateTime = parseRfc3339DateTime;
    var RFC3339_WITH_OFFSET = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/);
    var parseRfc3339DateTimeWithOffset = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339_WITH_OFFSET.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
      if (offsetStr.toUpperCase() != "Z") {
        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
      }
      return date;
    };
    exports.parseRfc3339DateTimeWithOffset = parseRfc3339DateTimeWithOffset;
    var IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
    var parseRfc7231DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
          hours,
          minutes,
          seconds,
          fractionalMilliseconds
        }));
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      throw new TypeError("Invalid RFC-7231 date-time value");
    };
    exports.parseRfc7231DateTime = parseRfc7231DateTime;
    var parseEpochTimestamp = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === "number") {
        valueAsDouble = value;
      } else if (typeof value === "string") {
        valueAsDouble = (0, parse_utils_1.strictParseDouble)(value);
      } else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    };
    exports.parseEpochTimestamp = parseEpochTimestamp;
    var buildDate = (year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
    };
    var parseTwoDigitYear = (value) => {
      const thisYear = (/* @__PURE__ */ new Date()).getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    };
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = (input) => {
      if (input.getTime() - (/* @__PURE__ */ new Date()).getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
      }
      return input;
    };
    var parseMonthByShortName = (value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    };
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = (year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    };
    var isLeapYear = (year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    var parseDateValue = (value, type, lower, upper) => {
      const dateVal = (0, parse_utils_1.strictParseByte)(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    };
    var parseMilliseconds = (value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return (0, parse_utils_1.strictParseFloat32)("0." + value) * 1e3;
    };
    var parseOffsetToMilliseconds = (value) => {
      const directionStr = value[0];
      let direction = 1;
      if (directionStr == "+") {
        direction = 1;
      } else if (directionStr == "-") {
        direction = -1;
      } else {
        throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
      }
      const hour = Number(value.substring(1, 3));
      const minute = Number(value.substring(4, 6));
      return direction * (hour * 60 + minute) * 60 * 1e3;
    };
    var stripLeadingZeroes = (value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    };
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/exceptions.js
var require_exceptions = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/exceptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateServiceException = exports.ServiceException = void 0;
    var ServiceException = class _ServiceException extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, _ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    exports.ServiceException = ServiceException;
    var decorateServiceException = (exception, additions = {}) => {
      Object.entries(additions).filter(([, v]) => v !== void 0).forEach(([k, v]) => {
        if (exception[k] == void 0 || exception[k] === "") {
          exception[k] = v;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    };
    exports.decorateServiceException = decorateServiceException;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/default-error-handler.js
var require_default_error_handler = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/default-error-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.withBaseException = exports.throwDefaultError = void 0;
    var exceptions_1 = require_exceptions();
    var throwDefaultError = ({ output, parsedBody, exceptionCtor, errorCode }) => {
      const $metadata = deserializeMetadata(output);
      const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
      const response = new exceptionCtor({
        name: (parsedBody === null || parsedBody === void 0 ? void 0 : parsedBody.code) || (parsedBody === null || parsedBody === void 0 ? void 0 : parsedBody.Code) || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
      });
      throw (0, exceptions_1.decorateServiceException)(response, parsedBody);
    };
    exports.throwDefaultError = throwDefaultError;
    var withBaseException = (ExceptionCtor) => {
      return ({ output, parsedBody, errorCode }) => {
        (0, exports.throwDefaultError)({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });
      };
    };
    exports.withBaseException = withBaseException;
    var deserializeMetadata = (output) => {
      var _a, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_b = (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"]) !== null && _b !== void 0 ? _b : output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/defaults-mode.js
var require_defaults_mode = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/defaults-mode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadConfigsForDefaultMode = void 0;
    var loadConfigsForDefaultMode = (mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    };
    exports.loadConfigsForDefaultMode = loadConfigsForDefaultMode;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js
var require_emitWarningIfUnsupportedVersion = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.emitWarningIfUnsupportedVersion = void 0;
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion = (version2) => {
      if (version2 && !warningEmitted && parseInt(version2.substring(1, version2.indexOf("."))) < 14) {
        warningEmitted = true;
      }
    };
    exports.emitWarningIfUnsupportedVersion = emitWarningIfUnsupportedVersion;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/extensions/checksum.js
var require_checksum4 = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/extensions/checksum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveChecksumRuntimeConfig = exports.getChecksumConfiguration = exports.AlgorithmId = void 0;
    var types_1 = require_dist_cjs();
    Object.defineProperty(exports, "AlgorithmId", { enumerable: true, get: function() {
      return types_1.AlgorithmId;
    } });
    var getChecksumConfiguration = (runtimeConfig) => {
      const checksumAlgorithms = [];
      for (const id in types_1.AlgorithmId) {
        const algorithmId = types_1.AlgorithmId[id];
        if (runtimeConfig[algorithmId] === void 0) {
          continue;
        }
        checksumAlgorithms.push({
          algorithmId: () => algorithmId,
          checksumConstructor: () => runtimeConfig[algorithmId]
        });
      }
      return {
        _checksumAlgorithms: checksumAlgorithms,
        addChecksumAlgorithm(algo) {
          this._checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return this._checksumAlgorithms;
        }
      };
    };
    exports.getChecksumConfiguration = getChecksumConfiguration;
    var resolveChecksumRuntimeConfig = (clientConfig) => {
      const runtimeConfig = {};
      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    };
    exports.resolveChecksumRuntimeConfig = resolveChecksumRuntimeConfig;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/extensions/retry.js
var require_retry3 = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/extensions/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveRetryRuntimeConfig = exports.getRetryConfiguration = void 0;
    var getRetryConfiguration = (runtimeConfig) => {
      let _retryStrategy = runtimeConfig.retryStrategy;
      return {
        setRetryStrategy(retryStrategy) {
          _retryStrategy = retryStrategy;
        },
        retryStrategy() {
          return _retryStrategy;
        }
      };
    };
    exports.getRetryConfiguration = getRetryConfiguration;
    var resolveRetryRuntimeConfig = (retryStrategyConfiguration) => {
      const runtimeConfig = {};
      runtimeConfig.retryStrategy = retryStrategyConfiguration.retryStrategy();
      return runtimeConfig;
    };
    exports.resolveRetryRuntimeConfig = resolveRetryRuntimeConfig;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/extensions/defaultExtensionConfiguration.js
var require_defaultExtensionConfiguration2 = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/extensions/defaultExtensionConfiguration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveDefaultRuntimeConfig = exports.getDefaultClientConfiguration = exports.getDefaultExtensionConfiguration = void 0;
    var checksum_1 = require_checksum4();
    var retry_1 = require_retry3();
    var getDefaultExtensionConfiguration = (runtimeConfig) => {
      return {
        ...(0, checksum_1.getChecksumConfiguration)(runtimeConfig),
        ...(0, retry_1.getRetryConfiguration)(runtimeConfig)
      };
    };
    exports.getDefaultExtensionConfiguration = getDefaultExtensionConfiguration;
    exports.getDefaultClientConfiguration = exports.getDefaultExtensionConfiguration;
    var resolveDefaultRuntimeConfig = (config) => {
      return {
        ...(0, checksum_1.resolveChecksumRuntimeConfig)(config),
        ...(0, retry_1.resolveRetryRuntimeConfig)(config)
      };
    };
    exports.resolveDefaultRuntimeConfig = resolveDefaultRuntimeConfig;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/extensions/index.js
var require_extensions4 = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/extensions/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_defaultExtensionConfiguration2(), exports);
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/extended-encode-uri-component.js
var require_extended_encode_uri_component = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/extended-encode-uri-component.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extendedEncodeURIComponent = void 0;
    function extendedEncodeURIComponent(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    exports.extendedEncodeURIComponent = extendedEncodeURIComponent;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/get-array-if-single-item.js
var require_get_array_if_single_item = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/get-array-if-single-item.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getArrayIfSingleItem = void 0;
    var getArrayIfSingleItem = (mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
    exports.getArrayIfSingleItem = getArrayIfSingleItem;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/get-value-from-text-node.js
var require_get_value_from_text_node = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/get-value-from-text-node.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getValueFromTextNode = void 0;
    var getValueFromTextNode = (obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = (0, exports.getValueFromTextNode)(obj[key]);
        }
      }
      return obj;
    };
    exports.getValueFromTextNode = getValueFromTextNode;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/lazy-json.js
var require_lazy_json = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/lazy-json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LazyJsonString = exports.StringWrapper = void 0;
    var StringWrapper = function() {
      const Class = Object.getPrototypeOf(this).constructor;
      const Constructor = Function.bind.apply(String, [null, ...arguments]);
      const instance = new Constructor();
      Object.setPrototypeOf(instance, Class.prototype);
      return instance;
    };
    exports.StringWrapper = StringWrapper;
    exports.StringWrapper.prototype = Object.create(String.prototype, {
      constructor: {
        value: exports.StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    Object.setPrototypeOf(exports.StringWrapper, String);
    var LazyJsonString = class _LazyJsonString extends exports.StringWrapper {
      deserializeJSON() {
        return JSON.parse(super.toString());
      }
      toJSON() {
        return super.toString();
      }
      static fromObject(object) {
        if (object instanceof _LazyJsonString) {
          return object;
        } else if (object instanceof String || typeof object === "string") {
          return new _LazyJsonString(object);
        }
        return new _LazyJsonString(JSON.stringify(object));
      }
    };
    exports.LazyJsonString = LazyJsonString;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/object-mapping.js
var require_object_mapping = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/object-mapping.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.take = exports.convertMap = exports.map = void 0;
    function map(arg0, arg1, arg2) {
      let target;
      let filter;
      let instructions;
      if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
        target = {};
        instructions = arg0;
      } else {
        target = arg0;
        if (typeof arg1 === "function") {
          filter = arg1;
          instructions = arg2;
          return mapWithFilter(target, filter, instructions);
        } else {
          instructions = arg1;
        }
      }
      for (const key of Object.keys(instructions)) {
        if (!Array.isArray(instructions[key])) {
          target[key] = instructions[key];
          continue;
        }
        applyInstruction(target, null, instructions, key);
      }
      return target;
    }
    exports.map = map;
    var convertMap = (target) => {
      const output = {};
      for (const [k, v] of Object.entries(target || {})) {
        output[k] = [, v];
      }
      return output;
    };
    exports.convertMap = convertMap;
    var take = (source, instructions) => {
      const out = {};
      for (const key in instructions) {
        applyInstruction(out, source, instructions, key);
      }
      return out;
    };
    exports.take = take;
    var mapWithFilter = (target, filter, instructions) => {
      return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
        if (Array.isArray(value)) {
          _instructions[key] = value;
        } else {
          if (typeof value === "function") {
            _instructions[key] = [filter, value()];
          } else {
            _instructions[key] = [filter, value];
          }
        }
        return _instructions;
      }, {}));
    };
    var applyInstruction = (target, source, instructions, targetKey) => {
      if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === "function") {
          instruction = [, instruction];
        }
        const [filter2 = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
        if (typeof filter2 === "function" && filter2(source[sourceKey]) || typeof filter2 !== "function" && !!filter2) {
          target[targetKey] = valueFn(source[sourceKey]);
        }
        return;
      }
      let [filter, value] = instructions[targetKey];
      if (typeof value === "function") {
        let _value;
        const defaultFilterPassed = filter === void 0 && (_value = value()) != null;
        const customFilterPassed = typeof filter === "function" && !!filter(void 0) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed) {
          target[targetKey] = _value;
        } else if (customFilterPassed) {
          target[targetKey] = value();
        }
      } else {
        const defaultFilterPassed = filter === void 0 && value != null;
        const customFilterPassed = typeof filter === "function" && !!filter(value) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed || customFilterPassed) {
          target[targetKey] = value;
        }
      }
    };
    var nonNullish = (_) => _ != null;
    var pass = (_) => _;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/resolve-path.js
var require_resolve_path = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/resolve-path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolvedPath = void 0;
    var extended_encode_uri_component_1 = require_extended_encode_uri_component();
    var resolvedPath = (resolvedPath2, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath2 = resolvedPath2.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment) => (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(segment)).join("/") : (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(labelValue));
      } else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
      }
      return resolvedPath2;
    };
    exports.resolvedPath = resolvedPath;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/ser-utils.js
var require_ser_utils = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/ser-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeFloat = void 0;
    var serializeFloat = (value) => {
      if (value !== value) {
        return "NaN";
      }
      switch (value) {
        case Infinity:
          return "Infinity";
        case -Infinity:
          return "-Infinity";
        default:
          return value;
      }
    };
    exports.serializeFloat = serializeFloat;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/serde-json.js
var require_serde_json = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/serde-json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._json = void 0;
    var _json = (obj) => {
      if (obj == null) {
        return {};
      }
      if (Array.isArray(obj)) {
        return obj.filter((_) => _ != null);
      }
      if (typeof obj === "object") {
        const target = {};
        for (const key of Object.keys(obj)) {
          if (obj[key] == null) {
            continue;
          }
          target[key] = (0, exports._json)(obj[key]);
        }
        return target;
      }
      return obj;
    };
    exports._json = _json;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/split-every.js
var require_split_every = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/split-every.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.splitEvery = void 0;
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = "";
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === "") {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = "";
        }
      }
      if (currentSegment !== "") {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    exports.splitEvery = splitEvery;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/index.js
var require_dist_cjs37 = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_NoOpLogger(), exports);
    tslib_1.__exportStar(require_client3(), exports);
    tslib_1.__exportStar(require_collect_stream_body(), exports);
    tslib_1.__exportStar(require_command3(), exports);
    tslib_1.__exportStar(require_constants6(), exports);
    tslib_1.__exportStar(require_create_aggregated_client(), exports);
    tslib_1.__exportStar(require_date_utils(), exports);
    tslib_1.__exportStar(require_default_error_handler(), exports);
    tslib_1.__exportStar(require_defaults_mode(), exports);
    tslib_1.__exportStar(require_emitWarningIfUnsupportedVersion(), exports);
    tslib_1.__exportStar(require_extensions4(), exports);
    tslib_1.__exportStar(require_exceptions(), exports);
    tslib_1.__exportStar(require_extended_encode_uri_component(), exports);
    tslib_1.__exportStar(require_get_array_if_single_item(), exports);
    tslib_1.__exportStar(require_get_value_from_text_node(), exports);
    tslib_1.__exportStar(require_lazy_json(), exports);
    tslib_1.__exportStar(require_object_mapping(), exports);
    tslib_1.__exportStar(require_parse_utils(), exports);
    tslib_1.__exportStar(require_resolve_path(), exports);
    tslib_1.__exportStar(require_ser_utils(), exports);
    tslib_1.__exportStar(require_serde_json(), exports);
    tslib_1.__exportStar(require_split_every(), exports);
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/DynamoDBServiceException.js
var require_DynamoDBServiceException = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/DynamoDBServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DynamoDBServiceException = exports.__ServiceException = void 0;
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "__ServiceException", { enumerable: true, get: function() {
      return smithy_client_1.ServiceException;
    } });
    var DynamoDBServiceException = class _DynamoDBServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _DynamoDBServiceException.prototype);
      }
    };
    exports.DynamoDBServiceException = DynamoDBServiceException;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/models_0.js
var require_models_0 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GlobalTableNotFoundException = exports.ExportNotFoundException = exports.S3SseAlgorithm = exports.ExportViewType = exports.ExportType = exports.ExportStatus = exports.ExportFormat = exports.TransactionConflictException = exports.ReturnValue = exports.ResourceInUseException = exports.TableStatus = exports.IndexStatus = exports.GlobalTableAlreadyExistsException = exports.TableClass = exports.ReplicaStatus = exports.GlobalTableStatus = exports.TableNotFoundException = exports.TableInUseException = exports.LimitExceededException = exports.ContributorInsightsStatus = exports.ContributorInsightsAction = exports.ContinuousBackupsUnavailableException = exports.PointInTimeRecoveryStatus = exports.ContinuousBackupsStatus = exports.ConditionalOperator = exports.ComparisonOperator = exports.ItemCollectionSizeLimitExceededException = exports.ReturnItemCollectionMetrics = exports.ResourceNotFoundException = exports.ProvisionedThroughputExceededException = exports.InvalidEndpointException = exports.RequestLimitExceeded = exports.InternalServerError = exports.BatchStatementErrorCodeEnum = exports.ReturnValuesOnConditionCheckFailure = exports.ReturnConsumedCapacity = exports.BackupTypeFilter = exports.BackupNotFoundException = exports.BackupInUseException = exports.TimeToLiveStatus = exports.StreamViewType = exports.SSEStatus = exports.SSEType = exports.ProjectionType = exports.KeyType = exports.BillingMode = exports.BackupType = exports.BackupStatus = exports.ScalarAttributeType = exports.AttributeAction = void 0;
    exports.TransactionCanceledException = exports.ConditionalCheckFailedException = exports.AttributeValue = exports.IndexNotFoundException = exports.ReplicaNotFoundException = exports.ReplicaAlreadyExistsException = exports.InvalidRestoreTimeException = exports.TableAlreadyExistsException = exports.Select = exports.ImportConflictException = exports.PointInTimeRecoveryUnavailableException = exports.InvalidExportTimeException = exports.ExportConflictException = exports.TransactionInProgressException = exports.IdempotentParameterMismatchException = exports.DuplicateItemException = exports.DestinationStatus = exports.ImportNotFoundException = exports.InputFormat = exports.InputCompressionType = exports.ImportStatus = void 0;
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    exports.AttributeAction = {
      ADD: "ADD",
      DELETE: "DELETE",
      PUT: "PUT"
    };
    exports.ScalarAttributeType = {
      B: "B",
      N: "N",
      S: "S"
    };
    exports.BackupStatus = {
      AVAILABLE: "AVAILABLE",
      CREATING: "CREATING",
      DELETED: "DELETED"
    };
    exports.BackupType = {
      AWS_BACKUP: "AWS_BACKUP",
      SYSTEM: "SYSTEM",
      USER: "USER"
    };
    exports.BillingMode = {
      PAY_PER_REQUEST: "PAY_PER_REQUEST",
      PROVISIONED: "PROVISIONED"
    };
    exports.KeyType = {
      HASH: "HASH",
      RANGE: "RANGE"
    };
    exports.ProjectionType = {
      ALL: "ALL",
      INCLUDE: "INCLUDE",
      KEYS_ONLY: "KEYS_ONLY"
    };
    exports.SSEType = {
      AES256: "AES256",
      KMS: "KMS"
    };
    exports.SSEStatus = {
      DISABLED: "DISABLED",
      DISABLING: "DISABLING",
      ENABLED: "ENABLED",
      ENABLING: "ENABLING",
      UPDATING: "UPDATING"
    };
    exports.StreamViewType = {
      KEYS_ONLY: "KEYS_ONLY",
      NEW_AND_OLD_IMAGES: "NEW_AND_OLD_IMAGES",
      NEW_IMAGE: "NEW_IMAGE",
      OLD_IMAGE: "OLD_IMAGE"
    };
    exports.TimeToLiveStatus = {
      DISABLED: "DISABLED",
      DISABLING: "DISABLING",
      ENABLED: "ENABLED",
      ENABLING: "ENABLING"
    };
    var BackupInUseException = class _BackupInUseException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "BackupInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "BackupInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _BackupInUseException.prototype);
      }
    };
    exports.BackupInUseException = BackupInUseException;
    var BackupNotFoundException = class _BackupNotFoundException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "BackupNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "BackupNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _BackupNotFoundException.prototype);
      }
    };
    exports.BackupNotFoundException = BackupNotFoundException;
    exports.BackupTypeFilter = {
      ALL: "ALL",
      AWS_BACKUP: "AWS_BACKUP",
      SYSTEM: "SYSTEM",
      USER: "USER"
    };
    exports.ReturnConsumedCapacity = {
      INDEXES: "INDEXES",
      NONE: "NONE",
      TOTAL: "TOTAL"
    };
    exports.ReturnValuesOnConditionCheckFailure = {
      ALL_OLD: "ALL_OLD",
      NONE: "NONE"
    };
    exports.BatchStatementErrorCodeEnum = {
      AccessDenied: "AccessDenied",
      ConditionalCheckFailed: "ConditionalCheckFailed",
      DuplicateItem: "DuplicateItem",
      InternalServerError: "InternalServerError",
      ItemCollectionSizeLimitExceeded: "ItemCollectionSizeLimitExceeded",
      ProvisionedThroughputExceeded: "ProvisionedThroughputExceeded",
      RequestLimitExceeded: "RequestLimitExceeded",
      ResourceNotFound: "ResourceNotFound",
      ThrottlingError: "ThrottlingError",
      TransactionConflict: "TransactionConflict",
      ValidationError: "ValidationError"
    };
    var InternalServerError = class _InternalServerError extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "InternalServerError",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalServerError.prototype);
      }
    };
    exports.InternalServerError = InternalServerError;
    var RequestLimitExceeded = class _RequestLimitExceeded extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "RequestLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "RequestLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, _RequestLimitExceeded.prototype);
      }
    };
    exports.RequestLimitExceeded = RequestLimitExceeded;
    var InvalidEndpointException = class _InvalidEndpointException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "InvalidEndpointException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidEndpointException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidEndpointException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidEndpointException = InvalidEndpointException;
    var ProvisionedThroughputExceededException = class _ProvisionedThroughputExceededException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ProvisionedThroughputExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ProvisionedThroughputExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ProvisionedThroughputExceededException.prototype);
      }
    };
    exports.ProvisionedThroughputExceededException = ProvisionedThroughputExceededException;
    var ResourceNotFoundException = class _ResourceNotFoundException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
      }
    };
    exports.ResourceNotFoundException = ResourceNotFoundException;
    exports.ReturnItemCollectionMetrics = {
      NONE: "NONE",
      SIZE: "SIZE"
    };
    var ItemCollectionSizeLimitExceededException = class _ItemCollectionSizeLimitExceededException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ItemCollectionSizeLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ItemCollectionSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ItemCollectionSizeLimitExceededException.prototype);
      }
    };
    exports.ItemCollectionSizeLimitExceededException = ItemCollectionSizeLimitExceededException;
    exports.ComparisonOperator = {
      BEGINS_WITH: "BEGINS_WITH",
      BETWEEN: "BETWEEN",
      CONTAINS: "CONTAINS",
      EQ: "EQ",
      GE: "GE",
      GT: "GT",
      IN: "IN",
      LE: "LE",
      LT: "LT",
      NE: "NE",
      NOT_CONTAINS: "NOT_CONTAINS",
      NOT_NULL: "NOT_NULL",
      NULL: "NULL"
    };
    exports.ConditionalOperator = {
      AND: "AND",
      OR: "OR"
    };
    exports.ContinuousBackupsStatus = {
      DISABLED: "DISABLED",
      ENABLED: "ENABLED"
    };
    exports.PointInTimeRecoveryStatus = {
      DISABLED: "DISABLED",
      ENABLED: "ENABLED"
    };
    var ContinuousBackupsUnavailableException = class _ContinuousBackupsUnavailableException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ContinuousBackupsUnavailableException",
          $fault: "client",
          ...opts
        });
        this.name = "ContinuousBackupsUnavailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ContinuousBackupsUnavailableException.prototype);
      }
    };
    exports.ContinuousBackupsUnavailableException = ContinuousBackupsUnavailableException;
    exports.ContributorInsightsAction = {
      DISABLE: "DISABLE",
      ENABLE: "ENABLE"
    };
    exports.ContributorInsightsStatus = {
      DISABLED: "DISABLED",
      DISABLING: "DISABLING",
      ENABLED: "ENABLED",
      ENABLING: "ENABLING",
      FAILED: "FAILED"
    };
    var LimitExceededException = class _LimitExceededException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "LimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _LimitExceededException.prototype);
      }
    };
    exports.LimitExceededException = LimitExceededException;
    var TableInUseException = class _TableInUseException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "TableInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "TableInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TableInUseException.prototype);
      }
    };
    exports.TableInUseException = TableInUseException;
    var TableNotFoundException = class _TableNotFoundException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "TableNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "TableNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TableNotFoundException.prototype);
      }
    };
    exports.TableNotFoundException = TableNotFoundException;
    exports.GlobalTableStatus = {
      ACTIVE: "ACTIVE",
      CREATING: "CREATING",
      DELETING: "DELETING",
      UPDATING: "UPDATING"
    };
    exports.ReplicaStatus = {
      ACTIVE: "ACTIVE",
      CREATING: "CREATING",
      CREATION_FAILED: "CREATION_FAILED",
      DELETING: "DELETING",
      INACCESSIBLE_ENCRYPTION_CREDENTIALS: "INACCESSIBLE_ENCRYPTION_CREDENTIALS",
      REGION_DISABLED: "REGION_DISABLED",
      UPDATING: "UPDATING"
    };
    exports.TableClass = {
      STANDARD: "STANDARD",
      STANDARD_INFREQUENT_ACCESS: "STANDARD_INFREQUENT_ACCESS"
    };
    var GlobalTableAlreadyExistsException = class _GlobalTableAlreadyExistsException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "GlobalTableAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "GlobalTableAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _GlobalTableAlreadyExistsException.prototype);
      }
    };
    exports.GlobalTableAlreadyExistsException = GlobalTableAlreadyExistsException;
    exports.IndexStatus = {
      ACTIVE: "ACTIVE",
      CREATING: "CREATING",
      DELETING: "DELETING",
      UPDATING: "UPDATING"
    };
    exports.TableStatus = {
      ACTIVE: "ACTIVE",
      ARCHIVED: "ARCHIVED",
      ARCHIVING: "ARCHIVING",
      CREATING: "CREATING",
      DELETING: "DELETING",
      INACCESSIBLE_ENCRYPTION_CREDENTIALS: "INACCESSIBLE_ENCRYPTION_CREDENTIALS",
      UPDATING: "UPDATING"
    };
    var ResourceInUseException = class _ResourceInUseException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ResourceInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceInUseException.prototype);
      }
    };
    exports.ResourceInUseException = ResourceInUseException;
    exports.ReturnValue = {
      ALL_NEW: "ALL_NEW",
      ALL_OLD: "ALL_OLD",
      NONE: "NONE",
      UPDATED_NEW: "UPDATED_NEW",
      UPDATED_OLD: "UPDATED_OLD"
    };
    var TransactionConflictException = class _TransactionConflictException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "TransactionConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "TransactionConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TransactionConflictException.prototype);
      }
    };
    exports.TransactionConflictException = TransactionConflictException;
    exports.ExportFormat = {
      DYNAMODB_JSON: "DYNAMODB_JSON",
      ION: "ION"
    };
    exports.ExportStatus = {
      COMPLETED: "COMPLETED",
      FAILED: "FAILED",
      IN_PROGRESS: "IN_PROGRESS"
    };
    exports.ExportType = {
      FULL_EXPORT: "FULL_EXPORT",
      INCREMENTAL_EXPORT: "INCREMENTAL_EXPORT"
    };
    exports.ExportViewType = {
      NEW_AND_OLD_IMAGES: "NEW_AND_OLD_IMAGES",
      NEW_IMAGE: "NEW_IMAGE"
    };
    exports.S3SseAlgorithm = {
      AES256: "AES256",
      KMS: "KMS"
    };
    var ExportNotFoundException = class _ExportNotFoundException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ExportNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ExportNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExportNotFoundException.prototype);
      }
    };
    exports.ExportNotFoundException = ExportNotFoundException;
    var GlobalTableNotFoundException = class _GlobalTableNotFoundException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "GlobalTableNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "GlobalTableNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _GlobalTableNotFoundException.prototype);
      }
    };
    exports.GlobalTableNotFoundException = GlobalTableNotFoundException;
    exports.ImportStatus = {
      CANCELLED: "CANCELLED",
      CANCELLING: "CANCELLING",
      COMPLETED: "COMPLETED",
      FAILED: "FAILED",
      IN_PROGRESS: "IN_PROGRESS"
    };
    exports.InputCompressionType = {
      GZIP: "GZIP",
      NONE: "NONE",
      ZSTD: "ZSTD"
    };
    exports.InputFormat = {
      CSV: "CSV",
      DYNAMODB_JSON: "DYNAMODB_JSON",
      ION: "ION"
    };
    var ImportNotFoundException = class _ImportNotFoundException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ImportNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ImportNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ImportNotFoundException.prototype);
      }
    };
    exports.ImportNotFoundException = ImportNotFoundException;
    exports.DestinationStatus = {
      ACTIVE: "ACTIVE",
      DISABLED: "DISABLED",
      DISABLING: "DISABLING",
      ENABLE_FAILED: "ENABLE_FAILED",
      ENABLING: "ENABLING"
    };
    var DuplicateItemException = class _DuplicateItemException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "DuplicateItemException",
          $fault: "client",
          ...opts
        });
        this.name = "DuplicateItemException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DuplicateItemException.prototype);
      }
    };
    exports.DuplicateItemException = DuplicateItemException;
    var IdempotentParameterMismatchException = class _IdempotentParameterMismatchException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "IdempotentParameterMismatchException",
          $fault: "client",
          ...opts
        });
        this.name = "IdempotentParameterMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IdempotentParameterMismatchException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.IdempotentParameterMismatchException = IdempotentParameterMismatchException;
    var TransactionInProgressException = class _TransactionInProgressException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "TransactionInProgressException",
          $fault: "client",
          ...opts
        });
        this.name = "TransactionInProgressException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TransactionInProgressException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.TransactionInProgressException = TransactionInProgressException;
    var ExportConflictException = class _ExportConflictException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ExportConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ExportConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExportConflictException.prototype);
      }
    };
    exports.ExportConflictException = ExportConflictException;
    var InvalidExportTimeException = class _InvalidExportTimeException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "InvalidExportTimeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidExportTimeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidExportTimeException.prototype);
      }
    };
    exports.InvalidExportTimeException = InvalidExportTimeException;
    var PointInTimeRecoveryUnavailableException = class _PointInTimeRecoveryUnavailableException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "PointInTimeRecoveryUnavailableException",
          $fault: "client",
          ...opts
        });
        this.name = "PointInTimeRecoveryUnavailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _PointInTimeRecoveryUnavailableException.prototype);
      }
    };
    exports.PointInTimeRecoveryUnavailableException = PointInTimeRecoveryUnavailableException;
    var ImportConflictException = class _ImportConflictException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ImportConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ImportConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ImportConflictException.prototype);
      }
    };
    exports.ImportConflictException = ImportConflictException;
    exports.Select = {
      ALL_ATTRIBUTES: "ALL_ATTRIBUTES",
      ALL_PROJECTED_ATTRIBUTES: "ALL_PROJECTED_ATTRIBUTES",
      COUNT: "COUNT",
      SPECIFIC_ATTRIBUTES: "SPECIFIC_ATTRIBUTES"
    };
    var TableAlreadyExistsException = class _TableAlreadyExistsException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "TableAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "TableAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TableAlreadyExistsException.prototype);
      }
    };
    exports.TableAlreadyExistsException = TableAlreadyExistsException;
    var InvalidRestoreTimeException = class _InvalidRestoreTimeException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "InvalidRestoreTimeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRestoreTimeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRestoreTimeException.prototype);
      }
    };
    exports.InvalidRestoreTimeException = InvalidRestoreTimeException;
    var ReplicaAlreadyExistsException = class _ReplicaAlreadyExistsException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ReplicaAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "ReplicaAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ReplicaAlreadyExistsException.prototype);
      }
    };
    exports.ReplicaAlreadyExistsException = ReplicaAlreadyExistsException;
    var ReplicaNotFoundException = class _ReplicaNotFoundException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ReplicaNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ReplicaNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ReplicaNotFoundException.prototype);
      }
    };
    exports.ReplicaNotFoundException = ReplicaNotFoundException;
    var IndexNotFoundException = class _IndexNotFoundException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "IndexNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "IndexNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IndexNotFoundException.prototype);
      }
    };
    exports.IndexNotFoundException = IndexNotFoundException;
    var AttributeValue;
    (function(AttributeValue2) {
      AttributeValue2.visit = (value, visitor) => {
        if (value.S !== void 0)
          return visitor.S(value.S);
        if (value.N !== void 0)
          return visitor.N(value.N);
        if (value.B !== void 0)
          return visitor.B(value.B);
        if (value.SS !== void 0)
          return visitor.SS(value.SS);
        if (value.NS !== void 0)
          return visitor.NS(value.NS);
        if (value.BS !== void 0)
          return visitor.BS(value.BS);
        if (value.M !== void 0)
          return visitor.M(value.M);
        if (value.L !== void 0)
          return visitor.L(value.L);
        if (value.NULL !== void 0)
          return visitor.NULL(value.NULL);
        if (value.BOOL !== void 0)
          return visitor.BOOL(value.BOOL);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(AttributeValue = exports.AttributeValue || (exports.AttributeValue = {}));
    var ConditionalCheckFailedException = class _ConditionalCheckFailedException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "ConditionalCheckFailedException",
          $fault: "client",
          ...opts
        });
        this.name = "ConditionalCheckFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ConditionalCheckFailedException.prototype);
        this.Item = opts.Item;
      }
    };
    exports.ConditionalCheckFailedException = ConditionalCheckFailedException;
    var TransactionCanceledException = class _TransactionCanceledException extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: "TransactionCanceledException",
          $fault: "client",
          ...opts
        });
        this.name = "TransactionCanceledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TransactionCanceledException.prototype);
        this.Message = opts.Message;
        this.CancellationReasons = opts.CancellationReasons;
      }
    };
    exports.TransactionCanceledException = TransactionCanceledException;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/protocols/Aws_json1_0.js
var require_Aws_json1_0 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/protocols/Aws_json1_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.se_UpdateItemCommand = exports.se_UpdateGlobalTableSettingsCommand = exports.se_UpdateGlobalTableCommand = exports.se_UpdateContributorInsightsCommand = exports.se_UpdateContinuousBackupsCommand = exports.se_UntagResourceCommand = exports.se_TransactWriteItemsCommand = exports.se_TransactGetItemsCommand = exports.se_TagResourceCommand = exports.se_ScanCommand = exports.se_RestoreTableToPointInTimeCommand = exports.se_RestoreTableFromBackupCommand = exports.se_QueryCommand = exports.se_PutItemCommand = exports.se_ListTagsOfResourceCommand = exports.se_ListTablesCommand = exports.se_ListImportsCommand = exports.se_ListGlobalTablesCommand = exports.se_ListExportsCommand = exports.se_ListContributorInsightsCommand = exports.se_ListBackupsCommand = exports.se_ImportTableCommand = exports.se_GetItemCommand = exports.se_ExportTableToPointInTimeCommand = exports.se_ExecuteTransactionCommand = exports.se_ExecuteStatementCommand = exports.se_EnableKinesisStreamingDestinationCommand = exports.se_DisableKinesisStreamingDestinationCommand = exports.se_DescribeTimeToLiveCommand = exports.se_DescribeTableReplicaAutoScalingCommand = exports.se_DescribeTableCommand = exports.se_DescribeLimitsCommand = exports.se_DescribeKinesisStreamingDestinationCommand = exports.se_DescribeImportCommand = exports.se_DescribeGlobalTableSettingsCommand = exports.se_DescribeGlobalTableCommand = exports.se_DescribeExportCommand = exports.se_DescribeEndpointsCommand = exports.se_DescribeContributorInsightsCommand = exports.se_DescribeContinuousBackupsCommand = exports.se_DescribeBackupCommand = exports.se_DeleteTableCommand = exports.se_DeleteItemCommand = exports.se_DeleteBackupCommand = exports.se_CreateTableCommand = exports.se_CreateGlobalTableCommand = exports.se_CreateBackupCommand = exports.se_BatchWriteItemCommand = exports.se_BatchGetItemCommand = exports.se_BatchExecuteStatementCommand = void 0;
    exports.de_UpdateContributorInsightsCommand = exports.de_UpdateContinuousBackupsCommand = exports.de_UntagResourceCommand = exports.de_TransactWriteItemsCommand = exports.de_TransactGetItemsCommand = exports.de_TagResourceCommand = exports.de_ScanCommand = exports.de_RestoreTableToPointInTimeCommand = exports.de_RestoreTableFromBackupCommand = exports.de_QueryCommand = exports.de_PutItemCommand = exports.de_ListTagsOfResourceCommand = exports.de_ListTablesCommand = exports.de_ListImportsCommand = exports.de_ListGlobalTablesCommand = exports.de_ListExportsCommand = exports.de_ListContributorInsightsCommand = exports.de_ListBackupsCommand = exports.de_ImportTableCommand = exports.de_GetItemCommand = exports.de_ExportTableToPointInTimeCommand = exports.de_ExecuteTransactionCommand = exports.de_ExecuteStatementCommand = exports.de_EnableKinesisStreamingDestinationCommand = exports.de_DisableKinesisStreamingDestinationCommand = exports.de_DescribeTimeToLiveCommand = exports.de_DescribeTableReplicaAutoScalingCommand = exports.de_DescribeTableCommand = exports.de_DescribeLimitsCommand = exports.de_DescribeKinesisStreamingDestinationCommand = exports.de_DescribeImportCommand = exports.de_DescribeGlobalTableSettingsCommand = exports.de_DescribeGlobalTableCommand = exports.de_DescribeExportCommand = exports.de_DescribeEndpointsCommand = exports.de_DescribeContributorInsightsCommand = exports.de_DescribeContinuousBackupsCommand = exports.de_DescribeBackupCommand = exports.de_DeleteTableCommand = exports.de_DeleteItemCommand = exports.de_DeleteBackupCommand = exports.de_CreateTableCommand = exports.de_CreateGlobalTableCommand = exports.de_CreateBackupCommand = exports.de_BatchWriteItemCommand = exports.de_BatchGetItemCommand = exports.de_BatchExecuteStatementCommand = exports.se_UpdateTimeToLiveCommand = exports.se_UpdateTableReplicaAutoScalingCommand = exports.se_UpdateTableCommand = void 0;
    exports.de_UpdateTimeToLiveCommand = exports.de_UpdateTableReplicaAutoScalingCommand = exports.de_UpdateTableCommand = exports.de_UpdateItemCommand = exports.de_UpdateGlobalTableSettingsCommand = exports.de_UpdateGlobalTableCommand = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs37();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    var models_0_1 = require_models_0();
    var se_BatchExecuteStatementCommand = async (input, context) => {
      const headers = sharedHeaders("BatchExecuteStatement");
      let body;
      body = JSON.stringify(se_BatchExecuteStatementInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_BatchExecuteStatementCommand = se_BatchExecuteStatementCommand;
    var se_BatchGetItemCommand = async (input, context) => {
      const headers = sharedHeaders("BatchGetItem");
      let body;
      body = JSON.stringify(se_BatchGetItemInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_BatchGetItemCommand = se_BatchGetItemCommand;
    var se_BatchWriteItemCommand = async (input, context) => {
      const headers = sharedHeaders("BatchWriteItem");
      let body;
      body = JSON.stringify(se_BatchWriteItemInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_BatchWriteItemCommand = se_BatchWriteItemCommand;
    var se_CreateBackupCommand = async (input, context) => {
      const headers = sharedHeaders("CreateBackup");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_CreateBackupCommand = se_CreateBackupCommand;
    var se_CreateGlobalTableCommand = async (input, context) => {
      const headers = sharedHeaders("CreateGlobalTable");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_CreateGlobalTableCommand = se_CreateGlobalTableCommand;
    var se_CreateTableCommand = async (input, context) => {
      const headers = sharedHeaders("CreateTable");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_CreateTableCommand = se_CreateTableCommand;
    var se_DeleteBackupCommand = async (input, context) => {
      const headers = sharedHeaders("DeleteBackup");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DeleteBackupCommand = se_DeleteBackupCommand;
    var se_DeleteItemCommand = async (input, context) => {
      const headers = sharedHeaders("DeleteItem");
      let body;
      body = JSON.stringify(se_DeleteItemInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DeleteItemCommand = se_DeleteItemCommand;
    var se_DeleteTableCommand = async (input, context) => {
      const headers = sharedHeaders("DeleteTable");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DeleteTableCommand = se_DeleteTableCommand;
    var se_DescribeBackupCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeBackup");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeBackupCommand = se_DescribeBackupCommand;
    var se_DescribeContinuousBackupsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeContinuousBackups");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeContinuousBackupsCommand = se_DescribeContinuousBackupsCommand;
    var se_DescribeContributorInsightsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeContributorInsights");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeContributorInsightsCommand = se_DescribeContributorInsightsCommand;
    var se_DescribeEndpointsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeEndpoints");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeEndpointsCommand = se_DescribeEndpointsCommand;
    var se_DescribeExportCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeExport");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeExportCommand = se_DescribeExportCommand;
    var se_DescribeGlobalTableCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeGlobalTable");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeGlobalTableCommand = se_DescribeGlobalTableCommand;
    var se_DescribeGlobalTableSettingsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeGlobalTableSettings");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeGlobalTableSettingsCommand = se_DescribeGlobalTableSettingsCommand;
    var se_DescribeImportCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeImport");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeImportCommand = se_DescribeImportCommand;
    var se_DescribeKinesisStreamingDestinationCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeKinesisStreamingDestination");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeKinesisStreamingDestinationCommand = se_DescribeKinesisStreamingDestinationCommand;
    var se_DescribeLimitsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeLimits");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeLimitsCommand = se_DescribeLimitsCommand;
    var se_DescribeTableCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeTable");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeTableCommand = se_DescribeTableCommand;
    var se_DescribeTableReplicaAutoScalingCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeTableReplicaAutoScaling");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeTableReplicaAutoScalingCommand = se_DescribeTableReplicaAutoScalingCommand;
    var se_DescribeTimeToLiveCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeTimeToLive");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeTimeToLiveCommand = se_DescribeTimeToLiveCommand;
    var se_DisableKinesisStreamingDestinationCommand = async (input, context) => {
      const headers = sharedHeaders("DisableKinesisStreamingDestination");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DisableKinesisStreamingDestinationCommand = se_DisableKinesisStreamingDestinationCommand;
    var se_EnableKinesisStreamingDestinationCommand = async (input, context) => {
      const headers = sharedHeaders("EnableKinesisStreamingDestination");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_EnableKinesisStreamingDestinationCommand = se_EnableKinesisStreamingDestinationCommand;
    var se_ExecuteStatementCommand = async (input, context) => {
      const headers = sharedHeaders("ExecuteStatement");
      let body;
      body = JSON.stringify(se_ExecuteStatementInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ExecuteStatementCommand = se_ExecuteStatementCommand;
    var se_ExecuteTransactionCommand = async (input, context) => {
      const headers = sharedHeaders("ExecuteTransaction");
      let body;
      body = JSON.stringify(se_ExecuteTransactionInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ExecuteTransactionCommand = se_ExecuteTransactionCommand;
    var se_ExportTableToPointInTimeCommand = async (input, context) => {
      const headers = sharedHeaders("ExportTableToPointInTime");
      let body;
      body = JSON.stringify(se_ExportTableToPointInTimeInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ExportTableToPointInTimeCommand = se_ExportTableToPointInTimeCommand;
    var se_GetItemCommand = async (input, context) => {
      const headers = sharedHeaders("GetItem");
      let body;
      body = JSON.stringify(se_GetItemInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetItemCommand = se_GetItemCommand;
    var se_ImportTableCommand = async (input, context) => {
      const headers = sharedHeaders("ImportTable");
      let body;
      body = JSON.stringify(se_ImportTableInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ImportTableCommand = se_ImportTableCommand;
    var se_ListBackupsCommand = async (input, context) => {
      const headers = sharedHeaders("ListBackups");
      let body;
      body = JSON.stringify(se_ListBackupsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListBackupsCommand = se_ListBackupsCommand;
    var se_ListContributorInsightsCommand = async (input, context) => {
      const headers = sharedHeaders("ListContributorInsights");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListContributorInsightsCommand = se_ListContributorInsightsCommand;
    var se_ListExportsCommand = async (input, context) => {
      const headers = sharedHeaders("ListExports");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListExportsCommand = se_ListExportsCommand;
    var se_ListGlobalTablesCommand = async (input, context) => {
      const headers = sharedHeaders("ListGlobalTables");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListGlobalTablesCommand = se_ListGlobalTablesCommand;
    var se_ListImportsCommand = async (input, context) => {
      const headers = sharedHeaders("ListImports");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListImportsCommand = se_ListImportsCommand;
    var se_ListTablesCommand = async (input, context) => {
      const headers = sharedHeaders("ListTables");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListTablesCommand = se_ListTablesCommand;
    var se_ListTagsOfResourceCommand = async (input, context) => {
      const headers = sharedHeaders("ListTagsOfResource");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListTagsOfResourceCommand = se_ListTagsOfResourceCommand;
    var se_PutItemCommand = async (input, context) => {
      const headers = sharedHeaders("PutItem");
      let body;
      body = JSON.stringify(se_PutItemInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_PutItemCommand = se_PutItemCommand;
    var se_QueryCommand = async (input, context) => {
      const headers = sharedHeaders("Query");
      let body;
      body = JSON.stringify(se_QueryInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_QueryCommand = se_QueryCommand;
    var se_RestoreTableFromBackupCommand = async (input, context) => {
      const headers = sharedHeaders("RestoreTableFromBackup");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_RestoreTableFromBackupCommand = se_RestoreTableFromBackupCommand;
    var se_RestoreTableToPointInTimeCommand = async (input, context) => {
      const headers = sharedHeaders("RestoreTableToPointInTime");
      let body;
      body = JSON.stringify(se_RestoreTableToPointInTimeInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_RestoreTableToPointInTimeCommand = se_RestoreTableToPointInTimeCommand;
    var se_ScanCommand = async (input, context) => {
      const headers = sharedHeaders("Scan");
      let body;
      body = JSON.stringify(se_ScanInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ScanCommand = se_ScanCommand;
    var se_TagResourceCommand = async (input, context) => {
      const headers = sharedHeaders("TagResource");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_TagResourceCommand = se_TagResourceCommand;
    var se_TransactGetItemsCommand = async (input, context) => {
      const headers = sharedHeaders("TransactGetItems");
      let body;
      body = JSON.stringify(se_TransactGetItemsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_TransactGetItemsCommand = se_TransactGetItemsCommand;
    var se_TransactWriteItemsCommand = async (input, context) => {
      const headers = sharedHeaders("TransactWriteItems");
      let body;
      body = JSON.stringify(se_TransactWriteItemsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_TransactWriteItemsCommand = se_TransactWriteItemsCommand;
    var se_UntagResourceCommand = async (input, context) => {
      const headers = sharedHeaders("UntagResource");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UntagResourceCommand = se_UntagResourceCommand;
    var se_UpdateContinuousBackupsCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateContinuousBackups");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateContinuousBackupsCommand = se_UpdateContinuousBackupsCommand;
    var se_UpdateContributorInsightsCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateContributorInsights");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateContributorInsightsCommand = se_UpdateContributorInsightsCommand;
    var se_UpdateGlobalTableCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateGlobalTable");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateGlobalTableCommand = se_UpdateGlobalTableCommand;
    var se_UpdateGlobalTableSettingsCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateGlobalTableSettings");
      let body;
      body = JSON.stringify(se_UpdateGlobalTableSettingsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateGlobalTableSettingsCommand = se_UpdateGlobalTableSettingsCommand;
    var se_UpdateItemCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateItem");
      let body;
      body = JSON.stringify(se_UpdateItemInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateItemCommand = se_UpdateItemCommand;
    var se_UpdateTableCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateTable");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateTableCommand = se_UpdateTableCommand;
    var se_UpdateTableReplicaAutoScalingCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateTableReplicaAutoScaling");
      let body;
      body = JSON.stringify(se_UpdateTableReplicaAutoScalingInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateTableReplicaAutoScalingCommand = se_UpdateTableReplicaAutoScalingCommand;
    var se_UpdateTimeToLiveCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateTimeToLive");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateTimeToLiveCommand = se_UpdateTimeToLiveCommand;
    var de_BatchExecuteStatementCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_BatchExecuteStatementCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_BatchExecuteStatementOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_BatchExecuteStatementCommand = de_BatchExecuteStatementCommand;
    var de_BatchExecuteStatementCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_BatchGetItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_BatchGetItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_BatchGetItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_BatchGetItemCommand = de_BatchGetItemCommand;
    var de_BatchGetItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_BatchWriteItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_BatchWriteItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_BatchWriteItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_BatchWriteItemCommand = de_BatchWriteItemCommand;
    var de_BatchWriteItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_CreateBackupCommand = de_CreateBackupCommand;
    var de_CreateBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BackupInUseException":
        case "com.amazonaws.dynamodb#BackupInUseException":
          throw await de_BackupInUseExceptionRes(parsedOutput, context);
        case "ContinuousBackupsUnavailableException":
        case "com.amazonaws.dynamodb#ContinuousBackupsUnavailableException":
          throw await de_ContinuousBackupsUnavailableExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "TableInUseException":
        case "com.amazonaws.dynamodb#TableInUseException":
          throw await de_TableInUseExceptionRes(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_CreateGlobalTableCommand = de_CreateGlobalTableCommand;
    var de_CreateGlobalTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalTableAlreadyExistsException":
        case "com.amazonaws.dynamodb#GlobalTableAlreadyExistsException":
          throw await de_GlobalTableAlreadyExistsExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_CreateTableCommand = de_CreateTableCommand;
    var de_CreateTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DeleteBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_DeleteBackupCommand = de_DeleteBackupCommand;
    var de_DeleteBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BackupInUseException":
        case "com.amazonaws.dynamodb#BackupInUseException":
          throw await de_BackupInUseExceptionRes(parsedOutput, context);
        case "BackupNotFoundException":
        case "com.amazonaws.dynamodb#BackupNotFoundException":
          throw await de_BackupNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DeleteItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_DeleteItemCommand = de_DeleteItemCommand;
    var de_DeleteItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConditionalCheckFailedException":
        case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
          throw await de_ConditionalCheckFailedExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TransactionConflictException":
        case "com.amazonaws.dynamodb#TransactionConflictException":
          throw await de_TransactionConflictExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DeleteTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_DeleteTableCommand = de_DeleteTableCommand;
    var de_DeleteTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_DescribeBackupCommand = de_DescribeBackupCommand;
    var de_DescribeBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BackupNotFoundException":
        case "com.amazonaws.dynamodb#BackupNotFoundException":
          throw await de_BackupNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeContinuousBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeContinuousBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeContinuousBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_DescribeContinuousBackupsCommand = de_DescribeContinuousBackupsCommand;
    var de_DescribeContinuousBackupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeContributorInsightsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_DescribeContributorInsightsCommand = de_DescribeContributorInsightsCommand;
    var de_DescribeContributorInsightsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeEndpointsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeEndpointsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_DescribeEndpointsCommand = de_DescribeEndpointsCommand;
    var de_DescribeEndpointsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
    };
    var de_DescribeExportCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeExportCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeExportOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_DescribeExportCommand = de_DescribeExportCommand;
    var de_DescribeExportCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExportNotFoundException":
        case "com.amazonaws.dynamodb#ExportNotFoundException":
          throw await de_ExportNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_DescribeGlobalTableCommand = de_DescribeGlobalTableCommand;
    var de_DescribeGlobalTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalTableNotFoundException":
        case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
          throw await de_GlobalTableNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeGlobalTableSettingsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeGlobalTableSettingsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeGlobalTableSettingsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_DescribeGlobalTableSettingsCommand = de_DescribeGlobalTableSettingsCommand;
    var de_DescribeGlobalTableSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalTableNotFoundException":
        case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
          throw await de_GlobalTableNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeImportCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeImportCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeImportOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_DescribeImportCommand = de_DescribeImportCommand;
    var de_DescribeImportCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ImportNotFoundException":
        case "com.amazonaws.dynamodb#ImportNotFoundException":
          throw await de_ImportNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeKinesisStreamingDestinationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeKinesisStreamingDestinationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_DescribeKinesisStreamingDestinationCommand = de_DescribeKinesisStreamingDestinationCommand;
    var de_DescribeKinesisStreamingDestinationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeLimitsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeLimitsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_DescribeLimitsCommand = de_DescribeLimitsCommand;
    var de_DescribeLimitsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_DescribeTableCommand = de_DescribeTableCommand;
    var de_DescribeTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeTableReplicaAutoScalingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeTableReplicaAutoScalingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeTableReplicaAutoScalingOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_DescribeTableReplicaAutoScalingCommand = de_DescribeTableReplicaAutoScalingCommand;
    var de_DescribeTableReplicaAutoScalingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeTimeToLiveCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeTimeToLiveCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_DescribeTimeToLiveCommand = de_DescribeTimeToLiveCommand;
    var de_DescribeTimeToLiveCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DisableKinesisStreamingDestinationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DisableKinesisStreamingDestinationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_DisableKinesisStreamingDestinationCommand = de_DisableKinesisStreamingDestinationCommand;
    var de_DisableKinesisStreamingDestinationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_EnableKinesisStreamingDestinationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_EnableKinesisStreamingDestinationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_EnableKinesisStreamingDestinationCommand = de_EnableKinesisStreamingDestinationCommand;
    var de_EnableKinesisStreamingDestinationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ExecuteStatementCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ExecuteStatementCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ExecuteStatementOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_ExecuteStatementCommand = de_ExecuteStatementCommand;
    var de_ExecuteStatementCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConditionalCheckFailedException":
        case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
          throw await de_ConditionalCheckFailedExceptionRes(parsedOutput, context);
        case "DuplicateItemException":
        case "com.amazonaws.dynamodb#DuplicateItemException":
          throw await de_DuplicateItemExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TransactionConflictException":
        case "com.amazonaws.dynamodb#TransactionConflictException":
          throw await de_TransactionConflictExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ExecuteTransactionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ExecuteTransactionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ExecuteTransactionOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_ExecuteTransactionCommand = de_ExecuteTransactionCommand;
    var de_ExecuteTransactionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.dynamodb#IdempotentParameterMismatchException":
          throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TransactionCanceledException":
        case "com.amazonaws.dynamodb#TransactionCanceledException":
          throw await de_TransactionCanceledExceptionRes(parsedOutput, context);
        case "TransactionInProgressException":
        case "com.amazonaws.dynamodb#TransactionInProgressException":
          throw await de_TransactionInProgressExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ExportTableToPointInTimeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ExportTableToPointInTimeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ExportTableToPointInTimeOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_ExportTableToPointInTimeCommand = de_ExportTableToPointInTimeCommand;
    var de_ExportTableToPointInTimeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExportConflictException":
        case "com.amazonaws.dynamodb#ExportConflictException":
          throw await de_ExportConflictExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidExportTimeException":
        case "com.amazonaws.dynamodb#InvalidExportTimeException":
          throw await de_InvalidExportTimeExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "PointInTimeRecoveryUnavailableException":
        case "com.amazonaws.dynamodb#PointInTimeRecoveryUnavailableException":
          throw await de_PointInTimeRecoveryUnavailableExceptionRes(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_GetItemCommand = de_GetItemCommand;
    var de_GetItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ImportTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ImportTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ImportTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_ImportTableCommand = de_ImportTableCommand;
    var de_ImportTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ImportConflictException":
        case "com.amazonaws.dynamodb#ImportConflictException":
          throw await de_ImportConflictExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_ListBackupsCommand = de_ListBackupsCommand;
    var de_ListBackupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_ListContributorInsightsCommand = de_ListContributorInsightsCommand;
    var de_ListContributorInsightsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListExportsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListExportsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_ListExportsCommand = de_ListExportsCommand;
    var de_ListExportsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListGlobalTablesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListGlobalTablesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_ListGlobalTablesCommand = de_ListGlobalTablesCommand;
    var de_ListGlobalTablesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListImportsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListImportsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListImportsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_ListImportsCommand = de_ListImportsCommand;
    var de_ListImportsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListTablesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListTablesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_ListTablesCommand = de_ListTablesCommand;
    var de_ListTablesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListTagsOfResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListTagsOfResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_ListTagsOfResourceCommand = de_ListTagsOfResourceCommand;
    var de_ListTagsOfResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_PutItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_PutItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_PutItemCommand = de_PutItemCommand;
    var de_PutItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConditionalCheckFailedException":
        case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
          throw await de_ConditionalCheckFailedExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TransactionConflictException":
        case "com.amazonaws.dynamodb#TransactionConflictException":
          throw await de_TransactionConflictExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_QueryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_QueryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_QueryOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_QueryCommand = de_QueryCommand;
    var de_QueryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_RestoreTableFromBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_RestoreTableFromBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_RestoreTableFromBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_RestoreTableFromBackupCommand = de_RestoreTableFromBackupCommand;
    var de_RestoreTableFromBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BackupInUseException":
        case "com.amazonaws.dynamodb#BackupInUseException":
          throw await de_BackupInUseExceptionRes(parsedOutput, context);
        case "BackupNotFoundException":
        case "com.amazonaws.dynamodb#BackupNotFoundException":
          throw await de_BackupNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "TableAlreadyExistsException":
        case "com.amazonaws.dynamodb#TableAlreadyExistsException":
          throw await de_TableAlreadyExistsExceptionRes(parsedOutput, context);
        case "TableInUseException":
        case "com.amazonaws.dynamodb#TableInUseException":
          throw await de_TableInUseExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_RestoreTableToPointInTimeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_RestoreTableToPointInTimeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_RestoreTableToPointInTimeOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_RestoreTableToPointInTimeCommand = de_RestoreTableToPointInTimeCommand;
    var de_RestoreTableToPointInTimeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "InvalidRestoreTimeException":
        case "com.amazonaws.dynamodb#InvalidRestoreTimeException":
          throw await de_InvalidRestoreTimeExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "PointInTimeRecoveryUnavailableException":
        case "com.amazonaws.dynamodb#PointInTimeRecoveryUnavailableException":
          throw await de_PointInTimeRecoveryUnavailableExceptionRes(parsedOutput, context);
        case "TableAlreadyExistsException":
        case "com.amazonaws.dynamodb#TableAlreadyExistsException":
          throw await de_TableAlreadyExistsExceptionRes(parsedOutput, context);
        case "TableInUseException":
        case "com.amazonaws.dynamodb#TableInUseException":
          throw await de_TableInUseExceptionRes(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ScanCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ScanCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ScanOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_ScanCommand = de_ScanCommand;
    var de_ScanCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_TagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
      }
      await (0, smithy_client_1.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    };
    exports.de_TagResourceCommand = de_TagResourceCommand;
    var de_TagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_TransactGetItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_TransactGetItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_TransactGetItemsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_TransactGetItemsCommand = de_TransactGetItemsCommand;
    var de_TransactGetItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TransactionCanceledException":
        case "com.amazonaws.dynamodb#TransactionCanceledException":
          throw await de_TransactionCanceledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_TransactWriteItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_TransactWriteItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_TransactWriteItemsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_TransactWriteItemsCommand = de_TransactWriteItemsCommand;
    var de_TransactWriteItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.dynamodb#IdempotentParameterMismatchException":
          throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TransactionCanceledException":
        case "com.amazonaws.dynamodb#TransactionCanceledException":
          throw await de_TransactionCanceledExceptionRes(parsedOutput, context);
        case "TransactionInProgressException":
        case "com.amazonaws.dynamodb#TransactionInProgressException":
          throw await de_TransactionInProgressExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UntagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
      }
      await (0, smithy_client_1.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    };
    exports.de_UntagResourceCommand = de_UntagResourceCommand;
    var de_UntagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateContinuousBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateContinuousBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateContinuousBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_UpdateContinuousBackupsCommand = de_UpdateContinuousBackupsCommand;
    var de_UpdateContinuousBackupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ContinuousBackupsUnavailableException":
        case "com.amazonaws.dynamodb#ContinuousBackupsUnavailableException":
          throw await de_ContinuousBackupsUnavailableExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_UpdateContributorInsightsCommand = de_UpdateContributorInsightsCommand;
    var de_UpdateContributorInsightsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_UpdateGlobalTableCommand = de_UpdateGlobalTableCommand;
    var de_UpdateGlobalTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalTableNotFoundException":
        case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
          throw await de_GlobalTableNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ReplicaAlreadyExistsException":
        case "com.amazonaws.dynamodb#ReplicaAlreadyExistsException":
          throw await de_ReplicaAlreadyExistsExceptionRes(parsedOutput, context);
        case "ReplicaNotFoundException":
        case "com.amazonaws.dynamodb#ReplicaNotFoundException":
          throw await de_ReplicaNotFoundExceptionRes(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateGlobalTableSettingsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateGlobalTableSettingsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateGlobalTableSettingsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_UpdateGlobalTableSettingsCommand = de_UpdateGlobalTableSettingsCommand;
    var de_UpdateGlobalTableSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalTableNotFoundException":
        case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
          throw await de_GlobalTableNotFoundExceptionRes(parsedOutput, context);
        case "IndexNotFoundException":
        case "com.amazonaws.dynamodb#IndexNotFoundException":
          throw await de_IndexNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ReplicaNotFoundException":
        case "com.amazonaws.dynamodb#ReplicaNotFoundException":
          throw await de_ReplicaNotFoundExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_UpdateItemCommand = de_UpdateItemCommand;
    var de_UpdateItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConditionalCheckFailedException":
        case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
          throw await de_ConditionalCheckFailedExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TransactionConflictException":
        case "com.amazonaws.dynamodb#TransactionConflictException":
          throw await de_TransactionConflictExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_UpdateTableCommand = de_UpdateTableCommand;
    var de_UpdateTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateTableReplicaAutoScalingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateTableReplicaAutoScalingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateTableReplicaAutoScalingOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_UpdateTableReplicaAutoScalingCommand = de_UpdateTableReplicaAutoScalingCommand;
    var de_UpdateTableReplicaAutoScalingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateTimeToLiveCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateTimeToLiveCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_UpdateTimeToLiveCommand = de_UpdateTimeToLiveCommand;
    var de_UpdateTimeToLiveCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_BackupInUseExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.BackupInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_BackupNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.BackupNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ConditionalCheckFailedExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ConditionalCheckFailedException(body, context);
      const exception = new models_0_1.ConditionalCheckFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ContinuousBackupsUnavailableExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ContinuousBackupsUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_DuplicateItemExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.DuplicateItemException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ExportConflictExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ExportConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ExportNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ExportNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_GlobalTableAlreadyExistsExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.GlobalTableAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_GlobalTableNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.GlobalTableNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IdempotentParameterMismatchExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.IdempotentParameterMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ImportConflictExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ImportConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ImportNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ImportNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IndexNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.IndexNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InternalServerErrorRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidEndpointExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidEndpointException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidExportTimeExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidExportTimeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidRestoreTimeExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidRestoreTimeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ItemCollectionSizeLimitExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ItemCollectionSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_LimitExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_PointInTimeRecoveryUnavailableExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.PointInTimeRecoveryUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ProvisionedThroughputExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ProvisionedThroughputExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ReplicaAlreadyExistsExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ReplicaAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ReplicaNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ReplicaNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_RequestLimitExceededRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.RequestLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TableAlreadyExistsExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TableAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TableInUseExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TableInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TableNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TableNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TransactionCanceledExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_TransactionCanceledException(body, context);
      const exception = new models_0_1.TransactionCanceledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TransactionConflictExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TransactionConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TransactionInProgressExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TransactionInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var se_AttributeUpdates = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValueUpdate(value, context);
        return acc;
      }, {});
    };
    var se_AttributeValue = (input, context) => {
      return models_0_1.AttributeValue.visit(input, {
        B: (value) => ({ B: context.base64Encoder(value) }),
        BOOL: (value) => ({ BOOL: value }),
        BS: (value) => ({ BS: se_BinarySetAttributeValue(value, context) }),
        L: (value) => ({ L: se_ListAttributeValue(value, context) }),
        M: (value) => ({ M: se_MapAttributeValue(value, context) }),
        N: (value) => ({ N: value }),
        NS: (value) => ({ NS: (0, smithy_client_1._json)(value) }),
        NULL: (value) => ({ NULL: value }),
        S: (value) => ({ S: value }),
        SS: (value) => ({ SS: (0, smithy_client_1._json)(value) }),
        _: (name, value) => ({ name: value })
      });
    };
    var se_AttributeValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_AttributeValue(entry, context);
      });
    };
    var se_AttributeValueUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Action: [],
        Value: (_) => se_AttributeValue(_, context)
      });
    };
    var se_AutoScalingPolicyUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        PolicyName: [],
        TargetTrackingScalingPolicyConfiguration: (_) => se_AutoScalingTargetTrackingScalingPolicyConfigurationUpdate(_, context)
      });
    };
    var se_AutoScalingSettingsUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AutoScalingDisabled: [],
        AutoScalingRoleArn: [],
        MaximumUnits: [],
        MinimumUnits: [],
        ScalingPolicyUpdate: (_) => se_AutoScalingPolicyUpdate(_, context)
      });
    };
    var se_AutoScalingTargetTrackingScalingPolicyConfigurationUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        DisableScaleIn: [],
        ScaleInCooldown: [],
        ScaleOutCooldown: [],
        TargetValue: smithy_client_1.serializeFloat
      });
    };
    var se_BatchExecuteStatementInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ReturnConsumedCapacity: [],
        Statements: (_) => se_PartiQLBatchRequest(_, context)
      });
    };
    var se_BatchGetItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        RequestItems: (_) => se_BatchGetRequestMap(_, context),
        ReturnConsumedCapacity: []
      });
    };
    var se_BatchGetRequestMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_KeysAndAttributes(value, context);
        return acc;
      }, {});
    };
    var se_BatchStatementRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConsistentRead: [],
        Parameters: (_) => se_PreparedStatementParameters(_, context),
        ReturnValuesOnConditionCheckFailure: [],
        Statement: []
      });
    };
    var se_BatchWriteItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        RequestItems: (_) => se_BatchWriteItemRequestMap(_, context),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: []
      });
    };
    var se_BatchWriteItemRequestMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_WriteRequests(value, context);
        return acc;
      }, {});
    };
    var se_BinarySetAttributeValue = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return context.base64Encoder(entry);
      });
    };
    var se_Condition = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributeValueList: (_) => se_AttributeValueList(_, context),
        ComparisonOperator: []
      });
    };
    var se_ConditionCheck = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Key: (_) => se_Key(_, context),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: []
      });
    };
    var se_Delete = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Key: (_) => se_Key(_, context),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: []
      });
    };
    var se_DeleteItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ConditionalOperator: [],
        Expected: (_) => se_ExpectedAttributeMap(_, context),
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Key: (_) => se_Key(_, context),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        ReturnValues: [],
        ReturnValuesOnConditionCheckFailure: [],
        TableName: []
      });
    };
    var se_DeleteRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Key: (_) => se_Key(_, context)
      });
    };
    var se_ExecuteStatementInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConsistentRead: [],
        Limit: [],
        NextToken: [],
        Parameters: (_) => se_PreparedStatementParameters(_, context),
        ReturnConsumedCapacity: [],
        ReturnValuesOnConditionCheckFailure: [],
        Statement: []
      });
    };
    var se_ExecuteTransactionInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ClientRequestToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        ReturnConsumedCapacity: [],
        TransactStatements: (_) => se_ParameterizedStatements(_, context)
      });
    };
    var se_ExpectedAttributeMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_ExpectedAttributeValue(value, context);
        return acc;
      }, {});
    };
    var se_ExpectedAttributeValue = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributeValueList: (_) => se_AttributeValueList(_, context),
        ComparisonOperator: [],
        Exists: [],
        Value: (_) => se_AttributeValue(_, context)
      });
    };
    var se_ExportTableToPointInTimeInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ClientToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        ExportFormat: [],
        ExportTime: (_) => Math.round(_.getTime() / 1e3),
        ExportType: [],
        IncrementalExportSpecification: (_) => se_IncrementalExportSpecification(_, context),
        S3Bucket: [],
        S3BucketOwner: [],
        S3Prefix: [],
        S3SseAlgorithm: [],
        S3SseKmsKeyId: [],
        TableArn: []
      });
    };
    var se_ExpressionAttributeValueMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
      }, {});
    };
    var se_FilterConditionMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_Condition(value, context);
        return acc;
      }, {});
    };
    var se_Get = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ExpressionAttributeNames: smithy_client_1._json,
        Key: (_) => se_Key(_, context),
        ProjectionExpression: [],
        TableName: []
      });
    };
    var se_GetItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributesToGet: smithy_client_1._json,
        ConsistentRead: [],
        ExpressionAttributeNames: smithy_client_1._json,
        Key: (_) => se_Key(_, context),
        ProjectionExpression: [],
        ReturnConsumedCapacity: [],
        TableName: []
      });
    };
    var se_GlobalSecondaryIndexAutoScalingUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        IndexName: [],
        ProvisionedWriteCapacityAutoScalingUpdate: (_) => se_AutoScalingSettingsUpdate(_, context)
      });
    };
    var se_GlobalSecondaryIndexAutoScalingUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_GlobalSecondaryIndexAutoScalingUpdate(entry, context);
      });
    };
    var se_GlobalTableGlobalSecondaryIndexSettingsUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        IndexName: [],
        ProvisionedWriteCapacityAutoScalingSettingsUpdate: (_) => se_AutoScalingSettingsUpdate(_, context),
        ProvisionedWriteCapacityUnits: []
      });
    };
    var se_GlobalTableGlobalSecondaryIndexSettingsUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_GlobalTableGlobalSecondaryIndexSettingsUpdate(entry, context);
      });
    };
    var se_ImportTableInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ClientToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        InputCompressionType: [],
        InputFormat: [],
        InputFormatOptions: smithy_client_1._json,
        S3BucketSource: smithy_client_1._json,
        TableCreationParameters: smithy_client_1._json
      });
    };
    var se_IncrementalExportSpecification = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ExportFromTime: (_) => Math.round(_.getTime() / 1e3),
        ExportToTime: (_) => Math.round(_.getTime() / 1e3),
        ExportViewType: []
      });
    };
    var se_Key = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
      }, {});
    };
    var se_KeyConditions = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_Condition(value, context);
        return acc;
      }, {});
    };
    var se_KeyList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_Key(entry, context);
      });
    };
    var se_KeysAndAttributes = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributesToGet: smithy_client_1._json,
        ConsistentRead: [],
        ExpressionAttributeNames: smithy_client_1._json,
        Keys: (_) => se_KeyList(_, context),
        ProjectionExpression: []
      });
    };
    var se_ListAttributeValue = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_AttributeValue(entry, context);
      });
    };
    var se_ListBackupsInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        BackupType: [],
        ExclusiveStartBackupArn: [],
        Limit: [],
        TableName: [],
        TimeRangeLowerBound: (_) => Math.round(_.getTime() / 1e3),
        TimeRangeUpperBound: (_) => Math.round(_.getTime() / 1e3)
      });
    };
    var se_MapAttributeValue = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
      }, {});
    };
    var se_ParameterizedStatement = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Parameters: (_) => se_PreparedStatementParameters(_, context),
        ReturnValuesOnConditionCheckFailure: [],
        Statement: []
      });
    };
    var se_ParameterizedStatements = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_ParameterizedStatement(entry, context);
      });
    };
    var se_PartiQLBatchRequest = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_BatchStatementRequest(entry, context);
      });
    };
    var se_PreparedStatementParameters = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_AttributeValue(entry, context);
      });
    };
    var se_Put = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Item: (_) => se_PutItemInputAttributeMap(_, context),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: []
      });
    };
    var se_PutItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ConditionalOperator: [],
        Expected: (_) => se_ExpectedAttributeMap(_, context),
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Item: (_) => se_PutItemInputAttributeMap(_, context),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        ReturnValues: [],
        ReturnValuesOnConditionCheckFailure: [],
        TableName: []
      });
    };
    var se_PutItemInputAttributeMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
      }, {});
    };
    var se_PutRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Item: (_) => se_PutItemInputAttributeMap(_, context)
      });
    };
    var se_QueryInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributesToGet: smithy_client_1._json,
        ConditionalOperator: [],
        ConsistentRead: [],
        ExclusiveStartKey: (_) => se_Key(_, context),
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        FilterExpression: [],
        IndexName: [],
        KeyConditionExpression: [],
        KeyConditions: (_) => se_KeyConditions(_, context),
        Limit: [],
        ProjectionExpression: [],
        QueryFilter: (_) => se_FilterConditionMap(_, context),
        ReturnConsumedCapacity: [],
        ScanIndexForward: [],
        Select: [],
        TableName: []
      });
    };
    var se_ReplicaAutoScalingUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        RegionName: [],
        ReplicaGlobalSecondaryIndexUpdates: (_) => se_ReplicaGlobalSecondaryIndexAutoScalingUpdateList(_, context),
        ReplicaProvisionedReadCapacityAutoScalingUpdate: (_) => se_AutoScalingSettingsUpdate(_, context)
      });
    };
    var se_ReplicaAutoScalingUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_ReplicaAutoScalingUpdate(entry, context);
      });
    };
    var se_ReplicaGlobalSecondaryIndexAutoScalingUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        IndexName: [],
        ProvisionedReadCapacityAutoScalingUpdate: (_) => se_AutoScalingSettingsUpdate(_, context)
      });
    };
    var se_ReplicaGlobalSecondaryIndexAutoScalingUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_ReplicaGlobalSecondaryIndexAutoScalingUpdate(entry, context);
      });
    };
    var se_ReplicaGlobalSecondaryIndexSettingsUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        IndexName: [],
        ProvisionedReadCapacityAutoScalingSettingsUpdate: (_) => se_AutoScalingSettingsUpdate(_, context),
        ProvisionedReadCapacityUnits: []
      });
    };
    var se_ReplicaGlobalSecondaryIndexSettingsUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_ReplicaGlobalSecondaryIndexSettingsUpdate(entry, context);
      });
    };
    var se_ReplicaSettingsUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        RegionName: [],
        ReplicaGlobalSecondaryIndexSettingsUpdate: (_) => se_ReplicaGlobalSecondaryIndexSettingsUpdateList(_, context),
        ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate: (_) => se_AutoScalingSettingsUpdate(_, context),
        ReplicaProvisionedReadCapacityUnits: [],
        ReplicaTableClass: []
      });
    };
    var se_ReplicaSettingsUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_ReplicaSettingsUpdate(entry, context);
      });
    };
    var se_RestoreTableToPointInTimeInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        BillingModeOverride: [],
        GlobalSecondaryIndexOverride: smithy_client_1._json,
        LocalSecondaryIndexOverride: smithy_client_1._json,
        ProvisionedThroughputOverride: smithy_client_1._json,
        RestoreDateTime: (_) => Math.round(_.getTime() / 1e3),
        SSESpecificationOverride: smithy_client_1._json,
        SourceTableArn: [],
        SourceTableName: [],
        TargetTableName: [],
        UseLatestRestorableTime: []
      });
    };
    var se_ScanInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributesToGet: smithy_client_1._json,
        ConditionalOperator: [],
        ConsistentRead: [],
        ExclusiveStartKey: (_) => se_Key(_, context),
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        FilterExpression: [],
        IndexName: [],
        Limit: [],
        ProjectionExpression: [],
        ReturnConsumedCapacity: [],
        ScanFilter: (_) => se_FilterConditionMap(_, context),
        Segment: [],
        Select: [],
        TableName: [],
        TotalSegments: []
      });
    };
    var se_TransactGetItem = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Get: (_) => se_Get(_, context)
      });
    };
    var se_TransactGetItemList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_TransactGetItem(entry, context);
      });
    };
    var se_TransactGetItemsInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ReturnConsumedCapacity: [],
        TransactItems: (_) => se_TransactGetItemList(_, context)
      });
    };
    var se_TransactWriteItem = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionCheck: (_) => se_ConditionCheck(_, context),
        Delete: (_) => se_Delete(_, context),
        Put: (_) => se_Put(_, context),
        Update: (_) => se_Update(_, context)
      });
    };
    var se_TransactWriteItemList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_TransactWriteItem(entry, context);
      });
    };
    var se_TransactWriteItemsInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ClientRequestToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        TransactItems: (_) => se_TransactWriteItemList(_, context)
      });
    };
    var se_Update = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Key: (_) => se_Key(_, context),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
        UpdateExpression: []
      });
    };
    var se_UpdateGlobalTableSettingsInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        GlobalTableBillingMode: [],
        GlobalTableGlobalSecondaryIndexSettingsUpdate: (_) => se_GlobalTableGlobalSecondaryIndexSettingsUpdateList(_, context),
        GlobalTableName: [],
        GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: (_) => se_AutoScalingSettingsUpdate(_, context),
        GlobalTableProvisionedWriteCapacityUnits: [],
        ReplicaSettingsUpdate: (_) => se_ReplicaSettingsUpdateList(_, context)
      });
    };
    var se_UpdateItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributeUpdates: (_) => se_AttributeUpdates(_, context),
        ConditionExpression: [],
        ConditionalOperator: [],
        Expected: (_) => se_ExpectedAttributeMap(_, context),
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_) => se_ExpressionAttributeValueMap(_, context),
        Key: (_) => se_Key(_, context),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        ReturnValues: [],
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
        UpdateExpression: []
      });
    };
    var se_UpdateTableReplicaAutoScalingInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        GlobalSecondaryIndexUpdates: (_) => se_GlobalSecondaryIndexAutoScalingUpdateList(_, context),
        ProvisionedWriteCapacityAutoScalingUpdate: (_) => se_AutoScalingSettingsUpdate(_, context),
        ReplicaUpdates: (_) => se_ReplicaAutoScalingUpdateList(_, context),
        TableName: []
      });
    };
    var se_WriteRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        DeleteRequest: (_) => se_DeleteRequest(_, context),
        PutRequest: (_) => se_PutRequest(_, context)
      });
    };
    var se_WriteRequests = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_WriteRequest(entry, context);
      });
    };
    var de_ArchivalSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ArchivalBackupArn: smithy_client_1.expectString,
        ArchivalDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ArchivalReason: smithy_client_1.expectString
      });
    };
    var de_AttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue((0, smithy_client_1.expectUnion)(value), context);
        return acc;
      }, {});
    };
    var de_AttributeValue = (output, context) => {
      if (output.B != null) {
        return {
          B: context.base64Decoder(output.B)
        };
      }
      if ((0, smithy_client_1.expectBoolean)(output.BOOL) !== void 0) {
        return { BOOL: (0, smithy_client_1.expectBoolean)(output.BOOL) };
      }
      if (output.BS != null) {
        return {
          BS: de_BinarySetAttributeValue(output.BS, context)
        };
      }
      if (output.L != null) {
        return {
          L: de_ListAttributeValue(output.L, context)
        };
      }
      if (output.M != null) {
        return {
          M: de_MapAttributeValue(output.M, context)
        };
      }
      if ((0, smithy_client_1.expectString)(output.N) !== void 0) {
        return { N: (0, smithy_client_1.expectString)(output.N) };
      }
      if (output.NS != null) {
        return {
          NS: (0, smithy_client_1._json)(output.NS)
        };
      }
      if ((0, smithy_client_1.expectBoolean)(output.NULL) !== void 0) {
        return { NULL: (0, smithy_client_1.expectBoolean)(output.NULL) };
      }
      if ((0, smithy_client_1.expectString)(output.S) !== void 0) {
        return { S: (0, smithy_client_1.expectString)(output.S) };
      }
      if (output.SS != null) {
        return {
          SS: (0, smithy_client_1._json)(output.SS)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    var de_AutoScalingPolicyDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        PolicyName: smithy_client_1.expectString,
        TargetTrackingScalingPolicyConfiguration: (_) => de_AutoScalingTargetTrackingScalingPolicyConfigurationDescription(_, context)
      });
    };
    var de_AutoScalingPolicyDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_AutoScalingPolicyDescription(entry, context);
      });
      return retVal;
    };
    var de_AutoScalingSettingsDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AutoScalingDisabled: smithy_client_1.expectBoolean,
        AutoScalingRoleArn: smithy_client_1.expectString,
        MaximumUnits: smithy_client_1.expectLong,
        MinimumUnits: smithy_client_1.expectLong,
        ScalingPolicies: (_) => de_AutoScalingPolicyDescriptionList(_, context)
      });
    };
    var de_AutoScalingTargetTrackingScalingPolicyConfigurationDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        DisableScaleIn: smithy_client_1.expectBoolean,
        ScaleInCooldown: smithy_client_1.expectInt32,
        ScaleOutCooldown: smithy_client_1.expectInt32,
        TargetValue: smithy_client_1.limitedParseDouble
      });
    };
    var de_BackupDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupDetails: (_) => de_BackupDetails(_, context),
        SourceTableDetails: (_) => de_SourceTableDetails(_, context),
        SourceTableFeatureDetails: (_) => de_SourceTableFeatureDetails(_, context)
      });
    };
    var de_BackupDetails = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupArn: smithy_client_1.expectString,
        BackupCreationDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        BackupExpiryDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        BackupName: smithy_client_1.expectString,
        BackupSizeBytes: smithy_client_1.expectLong,
        BackupStatus: smithy_client_1.expectString,
        BackupType: smithy_client_1.expectString
      });
    };
    var de_BackupSummaries = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_BackupSummary(entry, context);
      });
      return retVal;
    };
    var de_BackupSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupArn: smithy_client_1.expectString,
        BackupCreationDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        BackupExpiryDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        BackupName: smithy_client_1.expectString,
        BackupSizeBytes: smithy_client_1.expectLong,
        BackupStatus: smithy_client_1.expectString,
        BackupType: smithy_client_1.expectString,
        TableArn: smithy_client_1.expectString,
        TableId: smithy_client_1.expectString,
        TableName: smithy_client_1.expectString
      });
    };
    var de_BatchExecuteStatementOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacityMultiple(_, context),
        Responses: (_) => de_PartiQLBatchResponse(_, context)
      });
    };
    var de_BatchGetItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacityMultiple(_, context),
        Responses: (_) => de_BatchGetResponseMap(_, context),
        UnprocessedKeys: (_) => de_BatchGetRequestMap(_, context)
      });
    };
    var de_BatchGetRequestMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_KeysAndAttributes(value, context);
        return acc;
      }, {});
    };
    var de_BatchGetResponseMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_ItemList(value, context);
        return acc;
      }, {});
    };
    var de_BatchStatementError = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Code: smithy_client_1.expectString,
        Item: (_) => de_AttributeMap(_, context),
        Message: smithy_client_1.expectString
      });
    };
    var de_BatchStatementResponse = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Error: (_) => de_BatchStatementError(_, context),
        Item: (_) => de_AttributeMap(_, context),
        TableName: smithy_client_1.expectString
      });
    };
    var de_BatchWriteItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacityMultiple(_, context),
        ItemCollectionMetrics: (_) => de_ItemCollectionMetricsPerTable(_, context),
        UnprocessedItems: (_) => de_BatchWriteItemRequestMap(_, context)
      });
    };
    var de_BatchWriteItemRequestMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_WriteRequests(value, context);
        return acc;
      }, {});
    };
    var de_BillingModeSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BillingMode: smithy_client_1.expectString,
        LastUpdateToPayPerRequestDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_)))
      });
    };
    var de_BinarySetAttributeValue = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return context.base64Decoder(entry);
      });
      return retVal;
    };
    var de_CancellationReason = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Code: smithy_client_1.expectString,
        Item: (_) => de_AttributeMap(_, context),
        Message: smithy_client_1.expectString
      });
    };
    var de_CancellationReasonList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_CancellationReason(entry, context);
      });
      return retVal;
    };
    var de_Capacity = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CapacityUnits: smithy_client_1.limitedParseDouble,
        ReadCapacityUnits: smithy_client_1.limitedParseDouble,
        WriteCapacityUnits: smithy_client_1.limitedParseDouble
      });
    };
    var de_ConditionalCheckFailedException = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Item: (_) => de_AttributeMap(_, context),
        message: smithy_client_1.expectString
      });
    };
    var de_ConsumedCapacity = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CapacityUnits: smithy_client_1.limitedParseDouble,
        GlobalSecondaryIndexes: (_) => de_SecondaryIndexesCapacityMap(_, context),
        LocalSecondaryIndexes: (_) => de_SecondaryIndexesCapacityMap(_, context),
        ReadCapacityUnits: smithy_client_1.limitedParseDouble,
        Table: (_) => de_Capacity(_, context),
        TableName: smithy_client_1.expectString,
        WriteCapacityUnits: smithy_client_1.limitedParseDouble
      });
    };
    var de_ConsumedCapacityMultiple = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ConsumedCapacity(entry, context);
      });
      return retVal;
    };
    var de_ContinuousBackupsDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ContinuousBackupsStatus: smithy_client_1.expectString,
        PointInTimeRecoveryDescription: (_) => de_PointInTimeRecoveryDescription(_, context)
      });
    };
    var de_CreateBackupOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupDetails: (_) => de_BackupDetails(_, context)
      });
    };
    var de_CreateGlobalTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalTableDescription: (_) => de_GlobalTableDescription(_, context)
      });
    };
    var de_CreateTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableDescription: (_) => de_TableDescription(_, context)
      });
    };
    var de_DeleteBackupOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupDescription: (_) => de_BackupDescription(_, context)
      });
    };
    var de_DeleteItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Attributes: (_) => de_AttributeMap(_, context),
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        ItemCollectionMetrics: (_) => de_ItemCollectionMetrics(_, context)
      });
    };
    var de_DeleteRequest = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Key: (_) => de_Key(_, context)
      });
    };
    var de_DeleteTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableDescription: (_) => de_TableDescription(_, context)
      });
    };
    var de_DescribeBackupOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupDescription: (_) => de_BackupDescription(_, context)
      });
    };
    var de_DescribeContinuousBackupsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ContinuousBackupsDescription: (_) => de_ContinuousBackupsDescription(_, context)
      });
    };
    var de_DescribeContributorInsightsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ContributorInsightsRuleList: smithy_client_1._json,
        ContributorInsightsStatus: smithy_client_1.expectString,
        FailureException: smithy_client_1._json,
        IndexName: smithy_client_1.expectString,
        LastUpdateDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        TableName: smithy_client_1.expectString
      });
    };
    var de_DescribeExportOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ExportDescription: (_) => de_ExportDescription(_, context)
      });
    };
    var de_DescribeGlobalTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalTableDescription: (_) => de_GlobalTableDescription(_, context)
      });
    };
    var de_DescribeGlobalTableSettingsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalTableName: smithy_client_1.expectString,
        ReplicaSettings: (_) => de_ReplicaSettingsDescriptionList(_, context)
      });
    };
    var de_DescribeImportOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ImportTableDescription: (_) => de_ImportTableDescription(_, context)
      });
    };
    var de_DescribeTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Table: (_) => de_TableDescription(_, context)
      });
    };
    var de_DescribeTableReplicaAutoScalingOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableAutoScalingDescription: (_) => de_TableAutoScalingDescription(_, context)
      });
    };
    var de_ExecuteStatementOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        Items: (_) => de_ItemList(_, context),
        LastEvaluatedKey: (_) => de_Key(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_ExecuteTransactionOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacityMultiple(_, context),
        Responses: (_) => de_ItemResponseList(_, context)
      });
    };
    var de_ExportDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BilledSizeBytes: smithy_client_1.expectLong,
        ClientToken: smithy_client_1.expectString,
        EndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ExportArn: smithy_client_1.expectString,
        ExportFormat: smithy_client_1.expectString,
        ExportManifest: smithy_client_1.expectString,
        ExportStatus: smithy_client_1.expectString,
        ExportTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ExportType: smithy_client_1.expectString,
        FailureCode: smithy_client_1.expectString,
        FailureMessage: smithy_client_1.expectString,
        IncrementalExportSpecification: (_) => de_IncrementalExportSpecification(_, context),
        ItemCount: smithy_client_1.expectLong,
        S3Bucket: smithy_client_1.expectString,
        S3BucketOwner: smithy_client_1.expectString,
        S3Prefix: smithy_client_1.expectString,
        S3SseAlgorithm: smithy_client_1.expectString,
        S3SseKmsKeyId: smithy_client_1.expectString,
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        TableArn: smithy_client_1.expectString,
        TableId: smithy_client_1.expectString
      });
    };
    var de_ExportTableToPointInTimeOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ExportDescription: (_) => de_ExportDescription(_, context)
      });
    };
    var de_GetItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        Item: (_) => de_AttributeMap(_, context)
      });
    };
    var de_GlobalSecondaryIndexDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Backfilling: smithy_client_1.expectBoolean,
        IndexArn: smithy_client_1.expectString,
        IndexName: smithy_client_1.expectString,
        IndexSizeBytes: smithy_client_1.expectLong,
        IndexStatus: smithy_client_1.expectString,
        ItemCount: smithy_client_1.expectLong,
        KeySchema: smithy_client_1._json,
        Projection: smithy_client_1._json,
        ProvisionedThroughput: (_) => de_ProvisionedThroughputDescription(_, context)
      });
    };
    var de_GlobalSecondaryIndexDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_GlobalSecondaryIndexDescription(entry, context);
      });
      return retVal;
    };
    var de_GlobalTableDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CreationDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        GlobalTableArn: smithy_client_1.expectString,
        GlobalTableName: smithy_client_1.expectString,
        GlobalTableStatus: smithy_client_1.expectString,
        ReplicationGroup: (_) => de_ReplicaDescriptionList(_, context)
      });
    };
    var de_ImportSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CloudWatchLogGroupArn: smithy_client_1.expectString,
        EndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ImportArn: smithy_client_1.expectString,
        ImportStatus: smithy_client_1.expectString,
        InputFormat: smithy_client_1.expectString,
        S3BucketSource: smithy_client_1._json,
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        TableArn: smithy_client_1.expectString
      });
    };
    var de_ImportSummaryList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ImportSummary(entry, context);
      });
      return retVal;
    };
    var de_ImportTableDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ClientToken: smithy_client_1.expectString,
        CloudWatchLogGroupArn: smithy_client_1.expectString,
        EndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ErrorCount: smithy_client_1.expectLong,
        FailureCode: smithy_client_1.expectString,
        FailureMessage: smithy_client_1.expectString,
        ImportArn: smithy_client_1.expectString,
        ImportStatus: smithy_client_1.expectString,
        ImportedItemCount: smithy_client_1.expectLong,
        InputCompressionType: smithy_client_1.expectString,
        InputFormat: smithy_client_1.expectString,
        InputFormatOptions: smithy_client_1._json,
        ProcessedItemCount: smithy_client_1.expectLong,
        ProcessedSizeBytes: smithy_client_1.expectLong,
        S3BucketSource: smithy_client_1._json,
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        TableArn: smithy_client_1.expectString,
        TableCreationParameters: smithy_client_1._json,
        TableId: smithy_client_1.expectString
      });
    };
    var de_ImportTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ImportTableDescription: (_) => de_ImportTableDescription(_, context)
      });
    };
    var de_IncrementalExportSpecification = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ExportFromTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ExportToTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ExportViewType: smithy_client_1.expectString
      });
    };
    var de_ItemCollectionKeyAttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue((0, smithy_client_1.expectUnion)(value), context);
        return acc;
      }, {});
    };
    var de_ItemCollectionMetrics = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ItemCollectionKey: (_) => de_ItemCollectionKeyAttributeMap(_, context),
        SizeEstimateRangeGB: (_) => de_ItemCollectionSizeEstimateRange(_, context)
      });
    };
    var de_ItemCollectionMetricsMultiple = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ItemCollectionMetrics(entry, context);
      });
      return retVal;
    };
    var de_ItemCollectionMetricsPerTable = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_ItemCollectionMetricsMultiple(value, context);
        return acc;
      }, {});
    };
    var de_ItemCollectionSizeEstimateRange = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.limitedParseDouble)(entry);
      });
      return retVal;
    };
    var de_ItemList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_AttributeMap(entry, context);
      });
      return retVal;
    };
    var de_ItemResponse = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Item: (_) => de_AttributeMap(_, context)
      });
    };
    var de_ItemResponseList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ItemResponse(entry, context);
      });
      return retVal;
    };
    var de_Key = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue((0, smithy_client_1.expectUnion)(value), context);
        return acc;
      }, {});
    };
    var de_KeyList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_Key(entry, context);
      });
      return retVal;
    };
    var de_KeysAndAttributes = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AttributesToGet: smithy_client_1._json,
        ConsistentRead: smithy_client_1.expectBoolean,
        ExpressionAttributeNames: smithy_client_1._json,
        Keys: (_) => de_KeyList(_, context),
        ProjectionExpression: smithy_client_1.expectString
      });
    };
    var de_ListAttributeValue = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_AttributeValue((0, smithy_client_1.expectUnion)(entry), context);
      });
      return retVal;
    };
    var de_ListBackupsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupSummaries: (_) => de_BackupSummaries(_, context),
        LastEvaluatedBackupArn: smithy_client_1.expectString
      });
    };
    var de_ListImportsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ImportSummaryList: (_) => de_ImportSummaryList(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_MapAttributeValue = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue((0, smithy_client_1.expectUnion)(value), context);
        return acc;
      }, {});
    };
    var de_PartiQLBatchResponse = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_BatchStatementResponse(entry, context);
      });
      return retVal;
    };
    var de_PointInTimeRecoveryDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        EarliestRestorableDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LatestRestorableDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        PointInTimeRecoveryStatus: smithy_client_1.expectString
      });
    };
    var de_ProvisionedThroughputDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        LastDecreaseDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastIncreaseDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        NumberOfDecreasesToday: smithy_client_1.expectLong,
        ReadCapacityUnits: smithy_client_1.expectLong,
        WriteCapacityUnits: smithy_client_1.expectLong
      });
    };
    var de_PutItemInputAttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue((0, smithy_client_1.expectUnion)(value), context);
        return acc;
      }, {});
    };
    var de_PutItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Attributes: (_) => de_AttributeMap(_, context),
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        ItemCollectionMetrics: (_) => de_ItemCollectionMetrics(_, context)
      });
    };
    var de_PutRequest = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Item: (_) => de_PutItemInputAttributeMap(_, context)
      });
    };
    var de_QueryOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        Count: smithy_client_1.expectInt32,
        Items: (_) => de_ItemList(_, context),
        LastEvaluatedKey: (_) => de_Key(_, context),
        ScannedCount: smithy_client_1.expectInt32
      });
    };
    var de_ReplicaAutoScalingDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalSecondaryIndexes: (_) => de_ReplicaGlobalSecondaryIndexAutoScalingDescriptionList(_, context),
        RegionName: smithy_client_1.expectString,
        ReplicaProvisionedReadCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ReplicaProvisionedWriteCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ReplicaStatus: smithy_client_1.expectString
      });
    };
    var de_ReplicaAutoScalingDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ReplicaAutoScalingDescription(entry, context);
      });
      return retVal;
    };
    var de_ReplicaDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalSecondaryIndexes: smithy_client_1._json,
        KMSMasterKeyId: smithy_client_1.expectString,
        ProvisionedThroughputOverride: smithy_client_1._json,
        RegionName: smithy_client_1.expectString,
        ReplicaInaccessibleDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ReplicaStatus: smithy_client_1.expectString,
        ReplicaStatusDescription: smithy_client_1.expectString,
        ReplicaStatusPercentProgress: smithy_client_1.expectString,
        ReplicaTableClassSummary: (_) => de_TableClassSummary(_, context)
      });
    };
    var de_ReplicaDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ReplicaDescription(entry, context);
      });
      return retVal;
    };
    var de_ReplicaGlobalSecondaryIndexAutoScalingDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        IndexName: smithy_client_1.expectString,
        IndexStatus: smithy_client_1.expectString,
        ProvisionedReadCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ProvisionedWriteCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context)
      });
    };
    var de_ReplicaGlobalSecondaryIndexAutoScalingDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ReplicaGlobalSecondaryIndexAutoScalingDescription(entry, context);
      });
      return retVal;
    };
    var de_ReplicaGlobalSecondaryIndexSettingsDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        IndexName: smithy_client_1.expectString,
        IndexStatus: smithy_client_1.expectString,
        ProvisionedReadCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ProvisionedReadCapacityUnits: smithy_client_1.expectLong,
        ProvisionedWriteCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ProvisionedWriteCapacityUnits: smithy_client_1.expectLong
      });
    };
    var de_ReplicaGlobalSecondaryIndexSettingsDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ReplicaGlobalSecondaryIndexSettingsDescription(entry, context);
      });
      return retVal;
    };
    var de_ReplicaSettingsDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        RegionName: smithy_client_1.expectString,
        ReplicaBillingModeSummary: (_) => de_BillingModeSummary(_, context),
        ReplicaGlobalSecondaryIndexSettings: (_) => de_ReplicaGlobalSecondaryIndexSettingsDescriptionList(_, context),
        ReplicaProvisionedReadCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ReplicaProvisionedReadCapacityUnits: smithy_client_1.expectLong,
        ReplicaProvisionedWriteCapacityAutoScalingSettings: (_) => de_AutoScalingSettingsDescription(_, context),
        ReplicaProvisionedWriteCapacityUnits: smithy_client_1.expectLong,
        ReplicaStatus: smithy_client_1.expectString,
        ReplicaTableClassSummary: (_) => de_TableClassSummary(_, context)
      });
    };
    var de_ReplicaSettingsDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ReplicaSettingsDescription(entry, context);
      });
      return retVal;
    };
    var de_RestoreSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        RestoreDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        RestoreInProgress: smithy_client_1.expectBoolean,
        SourceBackupArn: smithy_client_1.expectString,
        SourceTableArn: smithy_client_1.expectString
      });
    };
    var de_RestoreTableFromBackupOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableDescription: (_) => de_TableDescription(_, context)
      });
    };
    var de_RestoreTableToPointInTimeOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableDescription: (_) => de_TableDescription(_, context)
      });
    };
    var de_ScanOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        Count: smithy_client_1.expectInt32,
        Items: (_) => de_ItemList(_, context),
        LastEvaluatedKey: (_) => de_Key(_, context),
        ScannedCount: smithy_client_1.expectInt32
      });
    };
    var de_SecondaryIndexesCapacityMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_Capacity(value, context);
        return acc;
      }, {});
    };
    var de_SourceTableDetails = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BillingMode: smithy_client_1.expectString,
        ItemCount: smithy_client_1.expectLong,
        KeySchema: smithy_client_1._json,
        ProvisionedThroughput: smithy_client_1._json,
        TableArn: smithy_client_1.expectString,
        TableCreationDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        TableId: smithy_client_1.expectString,
        TableName: smithy_client_1.expectString,
        TableSizeBytes: smithy_client_1.expectLong
      });
    };
    var de_SourceTableFeatureDetails = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalSecondaryIndexes: smithy_client_1._json,
        LocalSecondaryIndexes: smithy_client_1._json,
        SSEDescription: (_) => de_SSEDescription(_, context),
        StreamDescription: smithy_client_1._json,
        TimeToLiveDescription: smithy_client_1._json
      });
    };
    var de_SSEDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        InaccessibleEncryptionDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        KMSMasterKeyArn: smithy_client_1.expectString,
        SSEType: smithy_client_1.expectString,
        Status: smithy_client_1.expectString
      });
    };
    var de_TableAutoScalingDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Replicas: (_) => de_ReplicaAutoScalingDescriptionList(_, context),
        TableName: smithy_client_1.expectString,
        TableStatus: smithy_client_1.expectString
      });
    };
    var de_TableClassSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        LastUpdateDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        TableClass: smithy_client_1.expectString
      });
    };
    var de_TableDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ArchivalSummary: (_) => de_ArchivalSummary(_, context),
        AttributeDefinitions: smithy_client_1._json,
        BillingModeSummary: (_) => de_BillingModeSummary(_, context),
        CreationDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DeletionProtectionEnabled: smithy_client_1.expectBoolean,
        GlobalSecondaryIndexes: (_) => de_GlobalSecondaryIndexDescriptionList(_, context),
        GlobalTableVersion: smithy_client_1.expectString,
        ItemCount: smithy_client_1.expectLong,
        KeySchema: smithy_client_1._json,
        LatestStreamArn: smithy_client_1.expectString,
        LatestStreamLabel: smithy_client_1.expectString,
        LocalSecondaryIndexes: smithy_client_1._json,
        ProvisionedThroughput: (_) => de_ProvisionedThroughputDescription(_, context),
        Replicas: (_) => de_ReplicaDescriptionList(_, context),
        RestoreSummary: (_) => de_RestoreSummary(_, context),
        SSEDescription: (_) => de_SSEDescription(_, context),
        StreamSpecification: smithy_client_1._json,
        TableArn: smithy_client_1.expectString,
        TableClassSummary: (_) => de_TableClassSummary(_, context),
        TableId: smithy_client_1.expectString,
        TableName: smithy_client_1.expectString,
        TableSizeBytes: smithy_client_1.expectLong,
        TableStatus: smithy_client_1.expectString
      });
    };
    var de_TransactGetItemsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacityMultiple(_, context),
        Responses: (_) => de_ItemResponseList(_, context)
      });
    };
    var de_TransactionCanceledException = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CancellationReasons: (_) => de_CancellationReasonList(_, context),
        Message: smithy_client_1.expectString
      });
    };
    var de_TransactWriteItemsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_) => de_ConsumedCapacityMultiple(_, context),
        ItemCollectionMetrics: (_) => de_ItemCollectionMetricsPerTable(_, context)
      });
    };
    var de_UpdateContinuousBackupsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ContinuousBackupsDescription: (_) => de_ContinuousBackupsDescription(_, context)
      });
    };
    var de_UpdateGlobalTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalTableDescription: (_) => de_GlobalTableDescription(_, context)
      });
    };
    var de_UpdateGlobalTableSettingsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalTableName: smithy_client_1.expectString,
        ReplicaSettings: (_) => de_ReplicaSettingsDescriptionList(_, context)
      });
    };
    var de_UpdateItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Attributes: (_) => de_AttributeMap(_, context),
        ConsumedCapacity: (_) => de_ConsumedCapacity(_, context),
        ItemCollectionMetrics: (_) => de_ItemCollectionMetrics(_, context)
      });
    };
    var de_UpdateTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableDescription: (_) => de_TableDescription(_, context)
      });
    };
    var de_UpdateTableReplicaAutoScalingOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableAutoScalingDescription: (_) => de_TableAutoScalingDescription(_, context)
      });
    };
    var de_WriteRequest = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        DeleteRequest: (_) => de_DeleteRequest(_, context),
        PutRequest: (_) => de_PutRequest(_, context)
      });
    };
    var de_WriteRequests = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_WriteRequest(entry, context);
      });
      return retVal;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
    var throwDefaultError = (0, smithy_client_1.withBaseException)(DynamoDBServiceException_1.DynamoDBServiceException);
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    function sharedHeaders(operation) {
      return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `DynamoDB_20120810.${operation}`
      };
    }
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeEndpointsCommand.js
var require_DescribeEndpointsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeEndpointsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeEndpointsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeEndpointsCommand = class _DescribeEndpointsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeEndpointsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeEndpointsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "DescribeEndpoints"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeEndpointsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeEndpointsCommand)(output, context);
      }
    };
    exports.DescribeEndpointsCommand = DescribeEndpointsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "dynamodb"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// node_modules/@aws-sdk/client-dynamodb/package.json
var require_package = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-dynamodb",
      description: "AWS SDK for JavaScript Dynamodb Client for Node.js, Browser and React Native",
      version: "3.421.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo dynamodb"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sts": "3.421.0",
        "@aws-sdk/credential-provider-node": "3.421.0",
        "@aws-sdk/middleware-endpoint-discovery": "3.418.0",
        "@aws-sdk/middleware-host-header": "3.418.0",
        "@aws-sdk/middleware-logger": "3.418.0",
        "@aws-sdk/middleware-recursion-detection": "3.418.0",
        "@aws-sdk/middleware-signing": "3.418.0",
        "@aws-sdk/middleware-user-agent": "3.418.0",
        "@aws-sdk/region-config-resolver": "3.418.0",
        "@aws-sdk/types": "3.418.0",
        "@aws-sdk/util-endpoints": "3.418.0",
        "@aws-sdk/util-user-agent-browser": "3.418.0",
        "@aws-sdk/util-user-agent-node": "3.418.0",
        "@smithy/config-resolver": "^2.0.10",
        "@smithy/fetch-http-handler": "^2.1.5",
        "@smithy/hash-node": "^2.0.9",
        "@smithy/invalid-dependency": "^2.0.9",
        "@smithy/middleware-content-length": "^2.0.11",
        "@smithy/middleware-endpoint": "^2.0.9",
        "@smithy/middleware-retry": "^2.0.12",
        "@smithy/middleware-serde": "^2.0.9",
        "@smithy/middleware-stack": "^2.0.2",
        "@smithy/node-config-provider": "^2.0.12",
        "@smithy/node-http-handler": "^2.1.5",
        "@smithy/protocol-http": "^3.0.5",
        "@smithy/smithy-client": "^2.1.6",
        "@smithy/types": "^2.3.3",
        "@smithy/url-parser": "^2.0.9",
        "@smithy/util-base64": "^2.0.0",
        "@smithy/util-body-length-browser": "^2.0.0",
        "@smithy/util-body-length-node": "^2.1.0",
        "@smithy/util-defaults-mode-browser": "^2.0.10",
        "@smithy/util-defaults-mode-node": "^2.0.12",
        "@smithy/util-retry": "^2.0.2",
        "@smithy/util-utf8": "^2.0.0",
        "@smithy/util-waiter": "^2.0.9",
        tslib: "^2.5.0",
        uuid: "^8.3.2"
      },
      devDependencies: {
        "@smithy/service-client-documentation-generator": "^2.0.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        "@types/uuid": "^8.3.0",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.23.23",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-dynamodb",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-dynamodb"
      }
    };
  }
});

// node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js
var require_dist_cjs38 = __commonJS({
  "node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveStsAuthConfig = void 0;
    var middleware_signing_1 = require_dist_cjs18();
    var resolveStsAuthConfig = (input, { stsClientCtor }) => (0, middleware_signing_1.resolveAwsAuthConfig)({
      ...input,
      stsClientCtor
    });
    exports.resolveStsAuthConfig = resolveStsAuthConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        defaultSigningName: "sts"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// node_modules/@aws-sdk/client-sts/package.json
var require_package2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sts",
      description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
      version: "3.421.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sts",
        test: "yarn test:unit",
        "test:unit": "jest"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/credential-provider-node": "3.421.0",
        "@aws-sdk/middleware-host-header": "3.418.0",
        "@aws-sdk/middleware-logger": "3.418.0",
        "@aws-sdk/middleware-recursion-detection": "3.418.0",
        "@aws-sdk/middleware-sdk-sts": "3.418.0",
        "@aws-sdk/middleware-signing": "3.418.0",
        "@aws-sdk/middleware-user-agent": "3.418.0",
        "@aws-sdk/region-config-resolver": "3.418.0",
        "@aws-sdk/types": "3.418.0",
        "@aws-sdk/util-endpoints": "3.418.0",
        "@aws-sdk/util-user-agent-browser": "3.418.0",
        "@aws-sdk/util-user-agent-node": "3.418.0",
        "@smithy/config-resolver": "^2.0.10",
        "@smithy/fetch-http-handler": "^2.1.5",
        "@smithy/hash-node": "^2.0.9",
        "@smithy/invalid-dependency": "^2.0.9",
        "@smithy/middleware-content-length": "^2.0.11",
        "@smithy/middleware-endpoint": "^2.0.9",
        "@smithy/middleware-retry": "^2.0.12",
        "@smithy/middleware-serde": "^2.0.9",
        "@smithy/middleware-stack": "^2.0.2",
        "@smithy/node-config-provider": "^2.0.12",
        "@smithy/node-http-handler": "^2.1.5",
        "@smithy/protocol-http": "^3.0.5",
        "@smithy/smithy-client": "^2.1.6",
        "@smithy/types": "^2.3.3",
        "@smithy/url-parser": "^2.0.9",
        "@smithy/util-base64": "^2.0.0",
        "@smithy/util-body-length-browser": "^2.0.0",
        "@smithy/util-body-length-node": "^2.1.0",
        "@smithy/util-defaults-mode-browser": "^2.0.10",
        "@smithy/util-defaults-mode-node": "^2.0.12",
        "@smithy/util-retry": "^2.0.2",
        "@smithy/util-utf8": "^2.0.0",
        "fast-xml-parser": "4.2.5",
        tslib: "^2.5.0"
      },
      devDependencies: {
        "@smithy/service-client-documentation-generator": "^2.0.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.23.23",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sts"
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js
var require_STSServiceException = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSServiceException = exports.__ServiceException = void 0;
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "__ServiceException", { enumerable: true, get: function() {
      return smithy_client_1.ServiceException;
    } });
    var STSServiceException = class _STSServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _STSServiceException.prototype);
      }
    };
    exports.STSServiceException = STSServiceException;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js
var require_models_02 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSessionTokenResponseFilterSensitiveLog = exports.GetFederationTokenResponseFilterSensitiveLog = exports.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = exports.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = exports.AssumeRoleWithSAMLResponseFilterSensitiveLog = exports.AssumeRoleWithSAMLRequestFilterSensitiveLog = exports.AssumeRoleResponseFilterSensitiveLog = exports.CredentialsFilterSensitiveLog = exports.InvalidAuthorizationMessageException = exports.IDPCommunicationErrorException = exports.InvalidIdentityTokenException = exports.IDPRejectedClaimException = exports.RegionDisabledException = exports.PackedPolicyTooLargeException = exports.MalformedPolicyDocumentException = exports.ExpiredTokenException = void 0;
    var smithy_client_1 = require_dist_cjs37();
    var STSServiceException_1 = require_STSServiceException();
    var ExpiredTokenException = class _ExpiredTokenException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
      }
    };
    exports.ExpiredTokenException = ExpiredTokenException;
    var MalformedPolicyDocumentException = class _MalformedPolicyDocumentException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "MalformedPolicyDocumentException",
          $fault: "client",
          ...opts
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _MalformedPolicyDocumentException.prototype);
      }
    };
    exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
    var PackedPolicyTooLargeException = class _PackedPolicyTooLargeException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "PackedPolicyTooLargeException",
          $fault: "client",
          ...opts
        });
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _PackedPolicyTooLargeException.prototype);
      }
    };
    exports.PackedPolicyTooLargeException = PackedPolicyTooLargeException;
    var RegionDisabledException = class _RegionDisabledException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "RegionDisabledException",
          $fault: "client",
          ...opts
        });
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _RegionDisabledException.prototype);
      }
    };
    exports.RegionDisabledException = RegionDisabledException;
    var IDPRejectedClaimException = class _IDPRejectedClaimException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "IDPRejectedClaimException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPRejectedClaimException.prototype);
      }
    };
    exports.IDPRejectedClaimException = IDPRejectedClaimException;
    var InvalidIdentityTokenException = class _InvalidIdentityTokenException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidIdentityTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidIdentityTokenException.prototype);
      }
    };
    exports.InvalidIdentityTokenException = InvalidIdentityTokenException;
    var IDPCommunicationErrorException = class _IDPCommunicationErrorException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "IDPCommunicationErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPCommunicationErrorException.prototype);
      }
    };
    exports.IDPCommunicationErrorException = IDPCommunicationErrorException;
    var InvalidAuthorizationMessageException = class _InvalidAuthorizationMessageException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidAuthorizationMessageException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAuthorizationMessageException.prototype);
      }
    };
    exports.InvalidAuthorizationMessageException = InvalidAuthorizationMessageException;
    var CredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SecretAccessKey && { SecretAccessKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CredentialsFilterSensitiveLog = CredentialsFilterSensitiveLog;
    var AssumeRoleResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: (0, exports.CredentialsFilterSensitiveLog)(obj.Credentials) }
    });
    exports.AssumeRoleResponseFilterSensitiveLog = AssumeRoleResponseFilterSensitiveLog;
    var AssumeRoleWithSAMLRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SAMLAssertion && { SAMLAssertion: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AssumeRoleWithSAMLRequestFilterSensitiveLog = AssumeRoleWithSAMLRequestFilterSensitiveLog;
    var AssumeRoleWithSAMLResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: (0, exports.CredentialsFilterSensitiveLog)(obj.Credentials) }
    });
    exports.AssumeRoleWithSAMLResponseFilterSensitiveLog = AssumeRoleWithSAMLResponseFilterSensitiveLog;
    var AssumeRoleWithWebIdentityRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.WebIdentityToken && { WebIdentityToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = AssumeRoleWithWebIdentityRequestFilterSensitiveLog;
    var AssumeRoleWithWebIdentityResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: (0, exports.CredentialsFilterSensitiveLog)(obj.Credentials) }
    });
    exports.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = AssumeRoleWithWebIdentityResponseFilterSensitiveLog;
    var GetFederationTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: (0, exports.CredentialsFilterSensitiveLog)(obj.Credentials) }
    });
    exports.GetFederationTokenResponseFilterSensitiveLog = GetFederationTokenResponseFilterSensitiveLog;
    var GetSessionTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: (0, exports.CredentialsFilterSensitiveLog)(obj.Credentials) }
    });
    exports.GetSessionTokenResponseFilterSensitiveLog = GetSessionTokenResponseFilterSensitiveLog;
  }
});

// node_modules/fast-xml-parser/src/util.js
var require_util4 = __commonJS({
  "node_modules/fast-xml-parser/src/util.js"(exports) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports.isExist = function(v) {
      return typeof v !== "undefined";
    };
    exports.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports.merge = function(target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === "strict") {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports.getValue = function(v) {
      if (exports.isExist(v)) {
        return v;
      } else {
        return "";
      }
    };
    exports.isName = isName;
    exports.getAllMatches = getAllMatches;
    exports.nameRegexp = nameRegexp;
  }
});

// node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  "node_modules/fast-xml-parser/src/validator.js"(exports) {
    "use strict";
    var util = require_util4();
    var defaultOptions = {
      allowBooleanAttributes: false,
      //A tag can have attributes without any value
      unpairedTags: []
    };
    exports.validate = function(xmlData, options) {
      options = Object.assign({}, defaultOptions, options);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err)
            return i;
        } else if (xmlData[i] === "<") {
          let tagStartPos = i;
          i++;
          if (xmlData[i] === "!") {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === "/") {
              closingTag = true;
              i++;
            }
            let tagName = "";
            for (; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "Invalid space after '<'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              const attrStrStart = i - attrStr.length;
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
              } else {
                const otg = tags.pop();
                if (tagName !== otg.tagName) {
                  let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                  return getErrorObject(
                    "InvalidTag",
                    "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.",
                    getLineNumberForPosition(xmlData, tagStartPos)
                  );
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
              } else if (options.unpairedTags.indexOf(tagName) !== -1) {
              } else {
                tags.push({ tagName, tagStartPos });
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === "<") {
                if (xmlData[i + 1] === "!") {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === "?") {
                  i = readPI(xmlData, ++i);
                  if (i.err)
                    return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === "&") {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                i = afterAmp;
              } else {
                if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {
                  return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i));
                }
              }
            }
            if (xmlData[i] === "<") {
              i--;
            }
          }
        } else {
          if (isWhiteSpace(xmlData[i])) {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length == 1) {
        return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t) => t.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
      }
      return true;
    };
    function isWhiteSpace(char) {
      return char === " " || char === "	" || char === "\n" || char === "\r";
    }
    function readPI(xmlData, i) {
      const start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == "?" || xmlData[i] == " ") {
          const tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
          } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
          } else {
            startChar = "";
          }
        } else if (xmlData[i] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] !== void 0 && matches[i][4] === void 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' is without value.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ";")
          return i;
        if (!xmlData[i].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ";")
        return -1;
      if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20)
          continue;
        if (xmlData[i] === ";")
          break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber.line || lineNumber,
          col: lineNumber.col
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      const lines = xmlData.substring(0, index).split(/\r?\n/);
      return {
        line: lines.length,
        // column number is last line's length + 1, because column numbering starts at 1:
        col: lines[lines.length - 1].length + 1
      };
    }
    function getPositionFromMatch(match) {
      return match.startIndex + match[1].length;
    }
  }
});

// node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js
var require_OptionsBuilder = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"(exports) {
    var defaultOptions = {
      preserveOrder: false,
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      removeNSPrefix: false,
      // remove NS from tag name or attribute name if true
      allowBooleanAttributes: false,
      //a tag can have attributes without any value
      //ignoreRootElement : false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      //Trim string values of tag and attributes
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true
      },
      tagValueProcessor: function(tagName, val2) {
        return val2;
      },
      attributeValueProcessor: function(attrName, val2) {
        return val2;
      },
      stopNodes: [],
      //nested tags will not be parsed even for errors
      alwaysCreateTextNode: false,
      isArray: () => false,
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false,
      transformAttributeName: false,
      updateTag: function(tagName, jPath, attrs) {
        return tagName;
      }
      // skipEmptyListItem: false
    };
    var buildOptions = function(options) {
      return Object.assign({}, defaultOptions, options);
    };
    exports.buildOptions = buildOptions;
    exports.defaultOptions = defaultOptions;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/xmlNode.js
var require_xmlNode = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"(exports, module2) {
    "use strict";
    var XmlNode = class {
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[":@"] = {};
      }
      add(key, val2) {
        if (key === "__proto__")
          key = "#__proto__";
        this.child.push({ [key]: val2 });
      }
      addChild(node) {
        if (node.tagname === "__proto__")
          node.tagname = "#__proto__";
        if (node[":@"] && Object.keys(node[":@"]).length > 0) {
          this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
      }
    };
    module2.exports = XmlNode;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js
var require_DocTypeReader = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"(exports, module2) {
    var util = require_util4();
    function readDocType(xmlData, i) {
      const entities = {};
      if (xmlData[i + 3] === "O" && xmlData[i + 4] === "C" && xmlData[i + 5] === "T" && xmlData[i + 6] === "Y" && xmlData[i + 7] === "P" && xmlData[i + 8] === "E") {
        i = i + 9;
        let angleBracketsCount = 1;
        let hasBody = false, comment = false;
        let exp = "";
        for (; i < xmlData.length; i++) {
          if (xmlData[i] === "<" && !comment) {
            if (hasBody && isEntity(xmlData, i)) {
              i += 7;
              [entityName, val, i] = readEntityExp(xmlData, i + 1);
              if (val.indexOf("&") === -1)
                entities[validateEntityName(entityName)] = {
                  regx: RegExp(`&${entityName};`, "g"),
                  val
                };
            } else if (hasBody && isElement(xmlData, i))
              i += 8;
            else if (hasBody && isAttlist(xmlData, i))
              i += 8;
            else if (hasBody && isNotation(xmlData, i))
              i += 9;
            else if (isComment)
              comment = true;
            else
              throw new Error("Invalid DOCTYPE");
            angleBracketsCount++;
            exp = "";
          } else if (xmlData[i] === ">") {
            if (comment) {
              if (xmlData[i - 1] === "-" && xmlData[i - 2] === "-") {
                comment = false;
                angleBracketsCount--;
              }
            } else {
              angleBracketsCount--;
            }
            if (angleBracketsCount === 0) {
              break;
            }
          } else if (xmlData[i] === "[") {
            hasBody = true;
          } else {
            exp += xmlData[i];
          }
        }
        if (angleBracketsCount !== 0) {
          throw new Error(`Unclosed DOCTYPE`);
        }
      } else {
        throw new Error(`Invalid Tag instead of DOCTYPE`);
      }
      return { entities, i };
    }
    function readEntityExp(xmlData, i) {
      let entityName2 = "";
      for (; i < xmlData.length && (xmlData[i] !== "'" && xmlData[i] !== '"'); i++) {
        entityName2 += xmlData[i];
      }
      entityName2 = entityName2.trim();
      if (entityName2.indexOf(" ") !== -1)
        throw new Error("External entites are not supported");
      const startChar = xmlData[i++];
      let val2 = "";
      for (; i < xmlData.length && xmlData[i] !== startChar; i++) {
        val2 += xmlData[i];
      }
      return [entityName2, val2, i];
    }
    function isComment(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "-" && xmlData[i + 3] === "-")
        return true;
      return false;
    }
    function isEntity(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "N" && xmlData[i + 4] === "T" && xmlData[i + 5] === "I" && xmlData[i + 6] === "T" && xmlData[i + 7] === "Y")
        return true;
      return false;
    }
    function isElement(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "L" && xmlData[i + 4] === "E" && xmlData[i + 5] === "M" && xmlData[i + 6] === "E" && xmlData[i + 7] === "N" && xmlData[i + 8] === "T")
        return true;
      return false;
    }
    function isAttlist(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "A" && xmlData[i + 3] === "T" && xmlData[i + 4] === "T" && xmlData[i + 5] === "L" && xmlData[i + 6] === "I" && xmlData[i + 7] === "S" && xmlData[i + 8] === "T")
        return true;
      return false;
    }
    function isNotation(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "N" && xmlData[i + 3] === "O" && xmlData[i + 4] === "T" && xmlData[i + 5] === "A" && xmlData[i + 6] === "T" && xmlData[i + 7] === "I" && xmlData[i + 8] === "O" && xmlData[i + 9] === "N")
        return true;
      return false;
    }
    function validateEntityName(name) {
      if (util.isName(name))
        return name;
      else
        throw new Error(`Invalid entity name ${name}`);
    }
    module2.exports = readDocType;
  }
});

// node_modules/strnum/strnum.js
var require_strnum = __commonJS({
  "node_modules/strnum/strnum.js"(exports, module2) {
    var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    var numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var consider = {
      hex: true,
      leadingZeros: true,
      decimalPoint: ".",
      eNotation: true
      //skipLike: /regex/
    };
    function toNumber(str, options = {}) {
      options = Object.assign({}, consider, options);
      if (!str || typeof str !== "string")
        return str;
      let trimmedStr = str.trim();
      if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr))
        return str;
      else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
      } else {
        const match = numRegex.exec(trimmedStr);
        if (match) {
          const sign = match[1];
          const leadingZeros = match[2];
          let numTrimmedByZeros = trimZeros(match[3]);
          const eNotation = match[4] || match[6];
          if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".")
            return str;
          else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".")
            return str;
          else {
            const num = Number(trimmedStr);
            const numStr = "" + num;
            if (numStr.search(/[eE]/) !== -1) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (eNotation) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (trimmedStr.indexOf(".") !== -1) {
              if (numStr === "0" && numTrimmedByZeros === "")
                return num;
              else if (numStr === numTrimmedByZeros)
                return num;
              else if (sign && numStr === "-" + numTrimmedByZeros)
                return num;
              else
                return str;
            }
            if (leadingZeros) {
              if (numTrimmedByZeros === numStr)
                return num;
              else if (sign + numTrimmedByZeros === numStr)
                return num;
              else
                return str;
            }
            if (trimmedStr === numStr)
              return num;
            else if (trimmedStr === sign + numStr)
              return num;
            return str;
          }
        } else {
          return str;
        }
      }
    }
    function trimZeros(numStr) {
      if (numStr && numStr.indexOf(".") !== -1) {
        numStr = numStr.replace(/0+$/, "");
        if (numStr === ".")
          numStr = "0";
        else if (numStr[0] === ".")
          numStr = "0" + numStr;
        else if (numStr[numStr.length - 1] === ".")
          numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
      }
      return numStr;
    }
    module2.exports = toNumber;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js
var require_OrderedObjParser = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"(exports, module2) {
    "use strict";
    var util = require_util4();
    var xmlNode = require_xmlNode();
    var readDocType = require_DocTypeReader();
    var toNumber = require_strnum();
    var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
    var OrderedObjParser = class {
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
          "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
          "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
          "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
        this.htmlEntities = {
          "space": { regex: /&(nbsp|#160);/g, val: " " },
          // "lt" : { regex: /&(lt|#60);/g, val: "<" },
          // "gt" : { regex: /&(gt|#62);/g, val: ">" },
          // "amp" : { regex: /&(amp|#38);/g, val: "&" },
          // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
          // "apos" : { regex: /&(apos|#39);/g, val: "'" },
          "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
          "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
          "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
          "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
          "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
          "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
          "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
        this.addChild = addChild;
      }
    };
    function addExternalEntities(externalEntities) {
      const entKeys = Object.keys(externalEntities);
      for (let i = 0; i < entKeys.length; i++) {
        const ent = entKeys[i];
        this.lastEntities[ent] = {
          regex: new RegExp("&" + ent + ";", "g"),
          val: externalEntities[ent]
        };
      }
    }
    function parseTextData(val2, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
      if (val2 !== void 0) {
        if (this.options.trimValues && !dontTrim) {
          val2 = val2.trim();
        }
        if (val2.length > 0) {
          if (!escapeEntities)
            val2 = this.replaceEntitiesValue(val2);
          const newval = this.options.tagValueProcessor(tagName, val2, jPath, hasAttributes, isLeafNode);
          if (newval === null || newval === void 0) {
            return val2;
          } else if (typeof newval !== typeof val2 || newval !== val2) {
            return newval;
          } else if (this.options.trimValues) {
            return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
          } else {
            const trimmedVal = val2.trim();
            if (trimmedVal === val2) {
              return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
            } else {
              return val2;
            }
          }
        }
      }
    }
    function resolveNameSpace(tagname) {
      if (this.options.removeNSPrefix) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    function buildAttributesMap(attrStr, jPath, tagName) {
      if (!this.options.ignoreAttributes && typeof attrStr === "string") {
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = this.resolveNameSpace(matches[i][1]);
          let oldVal = matches[i][4];
          let aName = this.options.attributeNamePrefix + attrName;
          if (attrName.length) {
            if (this.options.transformAttributeName) {
              aName = this.options.transformAttributeName(aName);
            }
            if (aName === "__proto__")
              aName = "#__proto__";
            if (oldVal !== void 0) {
              if (this.options.trimValues) {
                oldVal = oldVal.trim();
              }
              oldVal = this.replaceEntitiesValue(oldVal);
              const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
              if (newVal === null || newVal === void 0) {
                attrs[aName] = oldVal;
              } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
                attrs[aName] = newVal;
              } else {
                attrs[aName] = parseValue(
                  oldVal,
                  this.options.parseAttributeValue,
                  this.options.numberParseOptions
                );
              }
            } else if (this.options.allowBooleanAttributes) {
              attrs[aName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (this.options.attributesGroupName) {
          const attrCollection = {};
          attrCollection[this.options.attributesGroupName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var parseXml = function(xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      let jPath = "";
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
            if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {
              throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
            }
            let propIndex = 0;
            if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {
              propIndex = jPath.lastIndexOf(".", jPath.lastIndexOf(".") - 1);
              this.tagsNodeStack.pop();
            } else {
              propIndex = jPath.lastIndexOf(".");
            }
            jPath = jPath.substring(0, propIndex);
            currentNode = this.tagsNodeStack.pop();
            textData = "";
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            let tagData = readTagExp(xmlData, i, false, "?>");
            if (!tagData)
              throw new Error("Pi Tag is not closed.");
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
            } else {
              const childNode = new xmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, "");
              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
              }
              this.addChild(currentNode, childNode, jPath);
            }
            i = tagData.closeIndex + 1;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const endIndex = findClosingIndex(xmlData, "-->", i + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
            }
            i = endIndex;
          } else if (xmlData.substr(i + 1, 2) === "!D") {
            const result = readDocType(xmlData, i);
            this.docTypeEntities = result.entities;
            i = result.i;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
            } else {
              let val2 = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);
              if (val2 == void 0)
                val2 = "";
              currentNode.add(this.options.textNodeName, val2);
            }
            i = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i, this.options.removeNSPrefix);
            let tagName = result.tagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
              }
            }
            const lastTag = currentNode;
            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
              currentNode = this.tagsNodeStack.pop();
              jPath = jPath.substring(0, jPath.lastIndexOf("."));
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? "." + tagName : tagName;
            }
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = "";
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                i = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(xmlData, tagName, closeIndex + 1);
                if (!result2)
                  throw new Error(`Unexpected end of ${tagName}`);
                i = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
              }
              if (tagContent) {
                tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
              }
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
              childNode.add(this.options.textNodeName, tagContent);
              this.addChild(currentNode, childNode, jPath);
            } else {
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new xmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
              } else {
                const childNode = new xmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                currentNode = childNode;
              }
              textData = "";
              i = closeIndex;
            }
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj.child;
    };
    function addChild(currentNode, childNode, jPath) {
      const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
      if (result === false) {
      } else if (typeof result === "string") {
        childNode.tagname = result;
        currentNode.addChild(childNode);
      } else {
        currentNode.addChild(childNode);
      }
    }
    var replaceEntitiesValue = function(val2) {
      if (this.options.processEntities) {
        for (let entityName2 in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName2];
          val2 = val2.replace(entity.regx, entity.val);
        }
        for (let entityName2 in this.lastEntities) {
          const entity = this.lastEntities[entityName2];
          val2 = val2.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName2 in this.htmlEntities) {
            const entity = this.htmlEntities[entityName2];
            val2 = val2.replace(entity.regex, entity.val);
          }
        }
        val2 = val2.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val2;
    };
    function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
      if (textData) {
        if (isLeafNode === void 0)
          isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(
          textData,
          currentNode.tagname,
          jPath,
          false,
          currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
          isLeafNode
        );
        if (textData !== void 0 && textData !== "")
          currentNode.add(this.options.textNodeName, textData);
        textData = "";
      }
      return textData;
    }
    function isItStopNode(stopNodes, jPath, currentTagName) {
      const allNodesExp = "*." + currentTagName;
      for (const stopNodePath in stopNodes) {
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp)
          return true;
      }
      return false;
    }
    function tagExpWithClosingIndex(xmlData, i, closingChar = ">") {
      let attrBoundary;
      let tagExp = "";
      for (let index = i; index < xmlData.length; index++) {
        let ch = xmlData[index];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === closingChar[0]) {
          if (closingChar[1]) {
            if (xmlData[index + 1] === closingChar[1]) {
              return {
                data: tagExp,
                index
              };
            }
          } else {
            return {
              data: tagExp,
              index
            };
          }
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    function readTagExp(xmlData, i, removeNSPrefix, closingChar = ">") {
      const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);
      if (!result)
        return;
      let tagExp = result.data;
      const closeIndex = result.index;
      const separatorIndex = tagExp.search(/\s/);
      let tagName = tagExp;
      let attrExpPresent = true;
      if (separatorIndex !== -1) {
        tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
        tagExp = tagExp.substr(separatorIndex + 1);
      }
      if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(":");
        if (colonIndex !== -1) {
          tagName = tagName.substr(colonIndex + 1);
          attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
      }
      return {
        tagName,
        tagExp,
        closeIndex,
        attrExpPresent
      };
    }
    function readStopNodeData(xmlData, tagName, i) {
      const startIndex = i;
      let openTagCount = 1;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, `${tagName} is not closed`);
            let closeTagName = xmlData.substring(i + 2, closeIndex).trim();
            if (closeTagName === tagName) {
              openTagCount--;
              if (openTagCount === 0) {
                return {
                  tagContent: xmlData.substring(startIndex, i),
                  i: closeIndex
                };
              }
            }
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            const closeIndex = findClosingIndex(xmlData, "?>", i + 1, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const closeIndex = findClosingIndex(xmlData, "-->", i + 3, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "StopNode is not closed.") - 2;
            i = closeIndex;
          } else {
            const tagData = readTagExp(xmlData, i, ">");
            if (tagData) {
              const openTagName = tagData && tagData.tagName;
              if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
                openTagCount++;
              }
              i = tagData.closeIndex;
            }
          }
        }
      }
    }
    function parseValue(val2, shouldParse, options) {
      if (shouldParse && typeof val2 === "string") {
        const newval = val2.trim();
        if (newval === "true")
          return true;
        else if (newval === "false")
          return false;
        else
          return toNumber(val2, options);
      } else {
        if (util.isExist(val2)) {
          return val2;
        } else {
          return "";
        }
      }
    }
    module2.exports = OrderedObjParser;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/node2json.js
var require_node2json = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/node2json.js"(exports) {
    "use strict";
    function prettify(node, options) {
      return compress(node, options);
    }
    function compress(arr, options, jPath) {
      let text;
      const compressedObj = {};
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const property = propName(tagObj);
        let newJpath = "";
        if (jPath === void 0)
          newJpath = property;
        else
          newJpath = jPath + "." + property;
        if (property === options.textNodeName) {
          if (text === void 0)
            text = tagObj[property];
          else
            text += "" + tagObj[property];
        } else if (property === void 0) {
          continue;
        } else if (tagObj[property]) {
          let val2 = compress(tagObj[property], options, newJpath);
          const isLeaf = isLeafTag(val2, options);
          if (tagObj[":@"]) {
            assignAttributes(val2, tagObj[":@"], newJpath, options);
          } else if (Object.keys(val2).length === 1 && val2[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
            val2 = val2[options.textNodeName];
          } else if (Object.keys(val2).length === 0) {
            if (options.alwaysCreateTextNode)
              val2[options.textNodeName] = "";
            else
              val2 = "";
          }
          if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
            if (!Array.isArray(compressedObj[property])) {
              compressedObj[property] = [compressedObj[property]];
            }
            compressedObj[property].push(val2);
          } else {
            if (options.isArray(property, newJpath, isLeaf)) {
              compressedObj[property] = [val2];
            } else {
              compressedObj[property] = val2;
            }
          }
        }
      }
      if (typeof text === "string") {
        if (text.length > 0)
          compressedObj[options.textNodeName] = text;
      } else if (text !== void 0)
        compressedObj[options.textNodeName] = text;
      return compressedObj;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function assignAttributes(obj, attrMap, jpath, options) {
      if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          const atrrName = keys[i];
          if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
            obj[atrrName] = [attrMap[atrrName]];
          } else {
            obj[atrrName] = attrMap[atrrName];
          }
        }
      }
    }
    function isLeafTag(obj, options) {
      const { textNodeName } = options;
      const propCount = Object.keys(obj).length;
      if (propCount === 0) {
        return true;
      }
      if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === "boolean" || obj[textNodeName] === 0)) {
        return true;
      }
      return false;
    }
    exports.prettify = prettify;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/XMLParser.js
var require_XMLParser = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"(exports, module2) {
    var { buildOptions } = require_OptionsBuilder();
    var OrderedObjParser = require_OrderedObjParser();
    var { prettify } = require_node2json();
    var validator = require_validator();
    var XMLParser = class {
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      /**
       * Parse XML dats to JS object 
       * @param {string|Buffer} xmlData 
       * @param {boolean|Object} validationOption 
       */
      parse(xmlData, validationOption) {
        if (typeof xmlData === "string") {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error("XML data is accepted in String or Bytes[] form.");
        }
        if (validationOption) {
          if (validationOption === true)
            validationOption = {};
          const result = validator.validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0)
          return orderedResult;
        else
          return prettify(orderedResult, this.options);
      }
      /**
       * Add Entity which is not by default supported by this library
       * @param {string} key 
       * @param {string} value 
       */
      addEntity(key, value) {
        if (value.indexOf("&") !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
          throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        } else if (value === "&") {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
    };
    module2.exports = XMLParser;
  }
});

// node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js
var require_orderedJs2Xml = __commonJS({
  "node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js"(exports, module2) {
    var EOL = "\n";
    function toXml(jArray, options) {
      let indentation = "";
      if (options.format && options.indentBy.length > 0) {
        indentation = EOL;
      }
      return arrToStr(jArray, options, "", indentation);
    }
    function arrToStr(arr, options, jPath, indentation) {
      let xmlStr = "";
      let isPreviousElementTag = false;
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const tagName = propName(tagObj);
        let newJPath = "";
        if (jPath.length === 0)
          newJPath = tagName;
        else
          newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
          let tagText = tagObj[tagName];
          if (!isStopNode(newJPath, options)) {
            tagText = options.tagValueProcessor(tagName, tagText);
            tagText = replaceEntitiesValue(tagText, options);
          }
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += tagText;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.cdataPropName) {
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.commentPropName) {
          xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
          isPreviousElementTag = true;
          continue;
        } else if (tagName[0] === "?") {
          const attStr2 = attr_to_str(tagObj[":@"], options);
          const tempInd = tagName === "?xml" ? "" : indentation;
          let piTextNodeName = tagObj[tagName][0][options.textNodeName];
          piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
          xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
          isPreviousElementTag = true;
          continue;
        }
        let newIdentation = indentation;
        if (newIdentation !== "") {
          newIdentation += options.indentBy;
        }
        const attStr = attr_to_str(tagObj[":@"], options);
        const tagStart = indentation + `<${tagName}${attStr}`;
        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
        if (options.unpairedTags.indexOf(tagName) !== -1) {
          if (options.suppressUnpairedNode)
            xmlStr += tagStart + ">";
          else
            xmlStr += tagStart + "/>";
        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
          xmlStr += tagStart + "/>";
        } else if (tagValue && tagValue.endsWith(">")) {
          xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        } else {
          xmlStr += tagStart + ">";
          if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) {
            xmlStr += indentation + options.indentBy + tagValue + indentation;
          } else {
            xmlStr += tagValue;
          }
          xmlStr += `</${tagName}>`;
        }
        isPreviousElementTag = true;
      }
      return xmlStr;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function attr_to_str(attrMap, options) {
      let attrStr = "";
      if (attrMap && !options.ignoreAttributes) {
        for (let attr in attrMap) {
          let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
          attrVal = replaceEntitiesValue(attrVal, options);
          if (attrVal === true && options.suppressBooleanAttributes) {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
          } else {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
          }
        }
      }
      return attrStr;
    }
    function isStopNode(jPath, options) {
      jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
      let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
      for (let index in options.stopNodes) {
        if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName)
          return true;
      }
      return false;
    }
    function replaceEntitiesValue(textValue, options) {
      if (textValue && textValue.length > 0 && options.processEntities) {
        for (let i = 0; i < options.entities.length; i++) {
          const entity = options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    module2.exports = toXml;
  }
});

// node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js
var require_json2xml = __commonJS({
  "node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"(exports, module2) {
    "use strict";
    var buildFromOrderedJs = require_orderedJs2Xml();
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataPropName: false,
      format: false,
      indentBy: "  ",
      suppressEmptyNode: false,
      suppressUnpairedNode: true,
      suppressBooleanAttributes: true,
      tagValueProcessor: function(key, a) {
        return a;
      },
      attributeValueProcessor: function(attrName, a) {
        return a;
      },
      preserveOrder: false,
      commentPropName: false,
      unpairedTags: [],
      entities: [
        { regex: new RegExp("&", "g"), val: "&amp;" },
        //it must be on top
        { regex: new RegExp(">", "g"), val: "&gt;" },
        { regex: new RegExp("<", "g"), val: "&lt;" },
        { regex: new RegExp("'", "g"), val: "&apos;" },
        { regex: new RegExp('"', "g"), val: "&quot;" }
      ],
      processEntities: true,
      stopNodes: [],
      // transformTagName: false,
      // transformAttributeName: false,
      oneListGroup: false
    };
    function Builder(options) {
      this.options = Object.assign({}, defaultOptions, options);
      if (this.options.ignoreAttributes || this.options.attributesGroupName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      this.processTextOrObjNode = processTextOrObjNode;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
    }
    Builder.prototype.build = function(jObj) {
      if (this.options.preserveOrder) {
        return buildFromOrderedJs(jObj, this.options);
      } else {
        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
          jObj = {
            [this.options.arrayNodeName]: jObj
          };
        }
        return this.j2x(jObj, 0).val;
      }
    };
    Builder.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val2 = "";
      for (let key in jObj) {
        if (typeof jObj[key] === "undefined") {
        } else if (jObj[key] === null) {
          if (key[0] === "?")
            val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
          else
            val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val2 += this.buildTextValNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
          } else {
            if (key === this.options.textNodeName) {
              let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
              val2 += this.replaceEntitiesValue(newval);
            } else {
              val2 += this.buildTextValNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          const arrLen = jObj[key].length;
          let listTagVal = "";
          for (let j = 0; j < arrLen; j++) {
            const item = jObj[key][j];
            if (typeof item === "undefined") {
            } else if (item === null) {
              if (key[0] === "?")
                val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
              else
                val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
            } else if (typeof item === "object") {
              if (this.options.oneListGroup) {
                listTagVal += this.j2x(item, level + 1).val;
              } else {
                listTagVal += this.processTextOrObjNode(item, key, level);
              }
            } else {
              listTagVal += this.buildTextValNode(item, key, "", level);
            }
          }
          if (this.options.oneListGroup) {
            listTagVal = this.buildObjectNode(listTagVal, key, "", level);
          }
          val2 += listTagVal;
        } else {
          if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += this.buildAttrPairStr(Ks[j], "" + jObj[key][Ks[j]]);
            }
          } else {
            val2 += this.processTextOrObjNode(jObj[key], key, level);
          }
        }
      }
      return { attrStr, val: val2 };
    };
    Builder.prototype.buildAttrPairStr = function(attrName, val2) {
      val2 = this.options.attributeValueProcessor(attrName, "" + val2);
      val2 = this.replaceEntitiesValue(val2);
      if (this.options.suppressBooleanAttributes && val2 === "true") {
        return " " + attrName;
      } else
        return " " + attrName + '="' + val2 + '"';
    };
    function processTextOrObjNode(object, key, level) {
      const result = this.j2x(object, level + 1);
      if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {
        return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
      } else {
        return this.buildObjectNode(result.val, key, result.attrStr, level);
      }
    }
    Builder.prototype.buildObjectNode = function(val2, key, attrStr, level) {
      if (val2 === "") {
        if (key[0] === "?")
          return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        }
      } else {
        let tagEndExp = "</" + key + this.tagEndChar;
        let piClosingChar = "";
        if (key[0] === "?") {
          piClosingChar = "?";
          tagEndExp = "";
        }
        if (attrStr && val2.indexOf("<") === -1) {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val2 + tagEndExp;
        } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
          return this.indentate(level) + `<!--${val2}-->` + this.newLine;
        } else {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val2 + this.indentate(level) + tagEndExp;
        }
      }
    };
    Builder.prototype.closeTag = function(key) {
      let closeTag = "";
      if (this.options.unpairedTags.indexOf(key) !== -1) {
        if (!this.options.suppressUnpairedNode)
          closeTag = "/";
      } else if (this.options.suppressEmptyNode) {
        closeTag = "/";
      } else {
        closeTag = `></${key}`;
      }
      return closeTag;
    };
    Builder.prototype.buildTextValNode = function(val2, key, attrStr, level) {
      if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
        return this.indentate(level) + `<![CDATA[${val2}]]>` + this.newLine;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
        return this.indentate(level) + `<!--${val2}-->` + this.newLine;
      } else if (key[0] === "?") {
        return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
      } else {
        let textValue = this.options.tagValueProcessor(key, val2);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === "") {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        } else {
          return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
        }
      }
    };
    Builder.prototype.replaceEntitiesValue = function(textValue) {
      if (textValue && textValue.length > 0 && this.options.processEntities) {
        for (let i = 0; i < this.options.entities.length; i++) {
          const entity = this.options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    };
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    module2.exports = Builder;
  }
});

// node_modules/fast-xml-parser/src/fxp.js
var require_fxp = __commonJS({
  "node_modules/fast-xml-parser/src/fxp.js"(exports, module2) {
    "use strict";
    var validator = require_validator();
    var XMLParser = require_XMLParser();
    var XMLBuilder = require_json2xml();
    module2.exports = {
      XMLParser,
      XMLValidator: validator,
      XMLBuilder
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js
var require_Aws_query = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.de_GetSessionTokenCommand = exports.de_GetFederationTokenCommand = exports.de_GetCallerIdentityCommand = exports.de_GetAccessKeyInfoCommand = exports.de_DecodeAuthorizationMessageCommand = exports.de_AssumeRoleWithWebIdentityCommand = exports.de_AssumeRoleWithSAMLCommand = exports.de_AssumeRoleCommand = exports.se_GetSessionTokenCommand = exports.se_GetFederationTokenCommand = exports.se_GetCallerIdentityCommand = exports.se_GetAccessKeyInfoCommand = exports.se_DecodeAuthorizationMessageCommand = exports.se_AssumeRoleWithWebIdentityCommand = exports.se_AssumeRoleWithSAMLCommand = exports.se_AssumeRoleCommand = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs37();
    var fast_xml_parser_1 = require_fxp();
    var models_0_1 = require_models_02();
    var STSServiceException_1 = require_STSServiceException();
    var se_AssumeRoleCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleRequest(input, context),
        Action: "AssumeRole",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_AssumeRoleCommand = se_AssumeRoleCommand;
    var se_AssumeRoleWithSAMLCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithSAMLRequest(input, context),
        Action: "AssumeRoleWithSAML",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_AssumeRoleWithSAMLCommand = se_AssumeRoleWithSAMLCommand;
    var se_AssumeRoleWithWebIdentityCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithWebIdentityRequest(input, context),
        Action: "AssumeRoleWithWebIdentity",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_AssumeRoleWithWebIdentityCommand = se_AssumeRoleWithWebIdentityCommand;
    var se_DecodeAuthorizationMessageCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DecodeAuthorizationMessageRequest(input, context),
        Action: "DecodeAuthorizationMessage",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DecodeAuthorizationMessageCommand = se_DecodeAuthorizationMessageCommand;
    var se_GetAccessKeyInfoCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetAccessKeyInfoRequest(input, context),
        Action: "GetAccessKeyInfo",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetAccessKeyInfoCommand = se_GetAccessKeyInfoCommand;
    var se_GetCallerIdentityCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetCallerIdentityRequest(input, context),
        Action: "GetCallerIdentity",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetCallerIdentityCommand = se_GetCallerIdentityCommand;
    var se_GetFederationTokenCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetFederationTokenRequest(input, context),
        Action: "GetFederationToken",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetFederationTokenCommand = se_GetFederationTokenCommand;
    var se_GetSessionTokenCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetSessionTokenRequest(input, context),
        Action: "GetSessionToken",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetSessionTokenCommand = se_GetSessionTokenCommand;
    var de_AssumeRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AssumeRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_AssumeRoleCommand = de_AssumeRoleCommand;
    var de_AssumeRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_AssumeRoleWithSAMLCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AssumeRoleWithSAMLCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_AssumeRoleWithSAMLCommand = de_AssumeRoleWithSAMLCommand;
    var de_AssumeRoleWithSAMLCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_AssumeRoleWithWebIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AssumeRoleWithWebIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_AssumeRoleWithWebIdentityCommand = de_AssumeRoleWithWebIdentityCommand;
    var de_AssumeRoleWithWebIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "IDPCommunicationError":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DecodeAuthorizationMessageCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DecodeAuthorizationMessageCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_DecodeAuthorizationMessageCommand = de_DecodeAuthorizationMessageCommand;
    var de_DecodeAuthorizationMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
          throw await de_InvalidAuthorizationMessageExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_GetAccessKeyInfoCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetAccessKeyInfoCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_GetAccessKeyInfoCommand = de_GetAccessKeyInfoCommand;
    var de_GetAccessKeyInfoCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
    };
    var de_GetCallerIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetCallerIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_GetCallerIdentityCommand = de_GetCallerIdentityCommand;
    var de_GetCallerIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
    };
    var de_GetFederationTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetFederationTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_GetFederationTokenCommand = de_GetFederationTokenCommand;
    var de_GetFederationTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_GetSessionTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetSessionTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports.de_GetSessionTokenCommand = de_GetSessionTokenCommand;
    var de_GetSessionTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ExpiredTokenException(body.Error, context);
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IDPCommunicationErrorExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPCommunicationErrorException(body.Error, context);
      const exception = new models_0_1.IDPCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IDPRejectedClaimExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPRejectedClaimException(body.Error, context);
      const exception = new models_0_1.IDPRejectedClaimException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidAuthorizationMessageExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidAuthorizationMessageException(body.Error, context);
      const exception = new models_0_1.InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidIdentityTokenExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidIdentityTokenException(body.Error, context);
      const exception = new models_0_1.InvalidIdentityTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
      const exception = new models_0_1.MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_PackedPolicyTooLargeExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_PackedPolicyTooLargeException(body.Error, context);
      const exception = new models_0_1.PackedPolicyTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_RegionDisabledExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_RegionDisabledException(body.Error, context);
      const exception = new models_0_1.RegionDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var se_AssumeRoleRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = se_tagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.TransitiveTagKeys != null) {
        const memberEntries = se_tagKeyListType(input.TransitiveTagKeys, context);
        if (input.TransitiveTagKeys?.length === 0) {
          entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExternalId != null) {
        entries["ExternalId"] = input.ExternalId;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
      }
      if (input.SourceIdentity != null) {
        entries["SourceIdentity"] = input.SourceIdentity;
      }
      if (input.ProvidedContexts != null) {
        const memberEntries = se_ProvidedContextsListType(input.ProvidedContexts, context);
        if (input.ProvidedContexts?.length === 0) {
          entries.ProvidedContexts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ProvidedContexts.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_AssumeRoleWithSAMLRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.PrincipalArn != null) {
        entries["PrincipalArn"] = input.PrincipalArn;
      }
      if (input.SAMLAssertion != null) {
        entries["SAMLAssertion"] = input.SAMLAssertion;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var se_AssumeRoleWithWebIdentityRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.WebIdentityToken != null) {
        entries["WebIdentityToken"] = input.WebIdentityToken;
      }
      if (input.ProviderId != null) {
        entries["ProviderId"] = input.ProviderId;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var se_DecodeAuthorizationMessageRequest = (input, context) => {
      const entries = {};
      if (input.EncodedMessage != null) {
        entries["EncodedMessage"] = input.EncodedMessage;
      }
      return entries;
    };
    var se_GetAccessKeyInfoRequest = (input, context) => {
      const entries = {};
      if (input.AccessKeyId != null) {
        entries["AccessKeyId"] = input.AccessKeyId;
      }
      return entries;
    };
    var se_GetCallerIdentityRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    var se_GetFederationTokenRequest = (input, context) => {
      const entries = {};
      if (input.Name != null) {
        entries["Name"] = input.Name;
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = se_tagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_GetSessionTokenRequest = (input, context) => {
      const entries = {};
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
      }
      return entries;
    };
    var se_policyDescriptorListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_PolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var se_PolicyDescriptorType = (input, context) => {
      const entries = {};
      if (input.arn != null) {
        entries["arn"] = input.arn;
      }
      return entries;
    };
    var se_ProvidedContext = (input, context) => {
      const entries = {};
      if (input.ProviderArn != null) {
        entries["ProviderArn"] = input.ProviderArn;
      }
      if (input.ContextAssertion != null) {
        entries["ContextAssertion"] = input.ContextAssertion;
      }
      return entries;
    };
    var se_ProvidedContextsListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_ProvidedContext(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var se_Tag = (input, context) => {
      const entries = {};
      if (input.Key != null) {
        entries["Key"] = input.Key;
      }
      if (input.Value != null) {
        entries["Value"] = input.Value;
      }
      return entries;
    };
    var se_tagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_tagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var de_AssumedRoleUser = (output, context) => {
      const contents = {};
      if (output["AssumedRoleId"] !== void 0) {
        contents.AssumedRoleId = (0, smithy_client_1.expectString)(output["AssumedRoleId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var de_AssumeRoleResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var de_AssumeRoleWithSAMLResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Subject"] !== void 0) {
        contents.Subject = (0, smithy_client_1.expectString)(output["Subject"]);
      }
      if (output["SubjectType"] !== void 0) {
        contents.SubjectType = (0, smithy_client_1.expectString)(output["SubjectType"]);
      }
      if (output["Issuer"] !== void 0) {
        contents.Issuer = (0, smithy_client_1.expectString)(output["Issuer"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["NameQualifier"] !== void 0) {
        contents.NameQualifier = (0, smithy_client_1.expectString)(output["NameQualifier"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var de_AssumeRoleWithWebIdentityResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      if (output["SubjectFromWebIdentityToken"] !== void 0) {
        contents.SubjectFromWebIdentityToken = (0, smithy_client_1.expectString)(output["SubjectFromWebIdentityToken"]);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Provider"] !== void 0) {
        contents.Provider = (0, smithy_client_1.expectString)(output["Provider"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var de_Credentials = (output, context) => {
      const contents = {};
      if (output["AccessKeyId"] !== void 0) {
        contents.AccessKeyId = (0, smithy_client_1.expectString)(output["AccessKeyId"]);
      }
      if (output["SecretAccessKey"] !== void 0) {
        contents.SecretAccessKey = (0, smithy_client_1.expectString)(output["SecretAccessKey"]);
      }
      if (output["SessionToken"] !== void 0) {
        contents.SessionToken = (0, smithy_client_1.expectString)(output["SessionToken"]);
      }
      if (output["Expiration"] !== void 0) {
        contents.Expiration = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["Expiration"]));
      }
      return contents;
    };
    var de_DecodeAuthorizationMessageResponse = (output, context) => {
      const contents = {};
      if (output["DecodedMessage"] !== void 0) {
        contents.DecodedMessage = (0, smithy_client_1.expectString)(output["DecodedMessage"]);
      }
      return contents;
    };
    var de_ExpiredTokenException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_FederatedUser = (output, context) => {
      const contents = {};
      if (output["FederatedUserId"] !== void 0) {
        contents.FederatedUserId = (0, smithy_client_1.expectString)(output["FederatedUserId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var de_GetAccessKeyInfoResponse = (output, context) => {
      const contents = {};
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      return contents;
    };
    var de_GetCallerIdentityResponse = (output, context) => {
      const contents = {};
      if (output["UserId"] !== void 0) {
        contents.UserId = (0, smithy_client_1.expectString)(output["UserId"]);
      }
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var de_GetFederationTokenResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      if (output["FederatedUser"] !== void 0) {
        contents.FederatedUser = de_FederatedUser(output["FederatedUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      return contents;
    };
    var de_GetSessionTokenResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      return contents;
    };
    var de_IDPCommunicationErrorException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_IDPRejectedClaimException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidAuthorizationMessageException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidIdentityTokenException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_MalformedPolicyDocumentException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_PackedPolicyTooLargeException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_RegionDisabledException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
    var throwDefaultError = (0, smithy_client_1.withBaseException)(STSServiceException_1.STSServiceException);
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var SHARED_HEADERS = {
      "content-type": "application/x-www-form-urlencoded"
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new fast_xml_parser_1.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_, val2) => val2.trim() === "" && val2.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value)).join("&");
    var loadQueryErrorCode = (output, data) => {
      if (data.Error?.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js
var require_AssumeRoleCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleCommand = exports.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs18();
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleCommand = class _AssumeRoleCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssumeRoleCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.AssumeRoleResponseFilterSensitiveLog,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "AWSSecurityTokenServiceV20110615",
            operation: "AssumeRole"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleCommand)(output, context);
      }
    };
    exports.AssumeRoleCommand = AssumeRoleCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js
var require_AssumeRoleWithWebIdentityCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleWithWebIdentityCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithWebIdentityCommand = class _AssumeRoleWithWebIdentityCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssumeRoleWithWebIdentityCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithWebIdentityCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityResponseFilterSensitiveLog,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "AWSSecurityTokenServiceV20110615",
            operation: "AssumeRoleWithWebIdentity"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleWithWebIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleWithWebIdentityCommand)(output, context);
      }
    };
    exports.AssumeRoleWithWebIdentityCommand = AssumeRoleWithWebIdentityCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js
var require_defaultStsRoleAssumers = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    var decorateDefaultRegion = (region) => {
      if (typeof region !== "function") {
        return region === void 0 ? ASSUME_ROLE_DEFAULT_REGION : region;
      }
      return async () => {
        try {
          return await region();
        } catch (e) {
          return ASSUME_ROLE_DEFAULT_REGION;
        }
      };
    };
    var getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger: logger2, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger: logger2,
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleCommand_1.AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        if (!stsClient) {
          const { logger: logger2, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger: logger2,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: (0, exports.getDefaultRoleAssumer)(input, input.stsClientCtor),
      roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input, input.stsClientCtor),
      ...input
    });
    exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js
var require_fromEnv = __commonJS({
  "node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEnv = exports.ENV_EXPIRATION = exports.ENV_SESSION = exports.ENV_SECRET = exports.ENV_KEY = void 0;
    var property_provider_1 = require_dist_cjs8();
    exports.ENV_KEY = "AWS_ACCESS_KEY_ID";
    exports.ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    exports.ENV_SESSION = "AWS_SESSION_TOKEN";
    exports.ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    var fromEnv = () => async () => {
      const accessKeyId = process.env[exports.ENV_KEY];
      const secretAccessKey = process.env[exports.ENV_SECRET];
      const sessionToken = process.env[exports.ENV_SESSION];
      const expiry = process.env[exports.ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return {
          accessKeyId,
          secretAccessKey,
          ...sessionToken && { sessionToken },
          ...expiry && { expiration: new Date(expiry) }
        };
      }
      throw new property_provider_1.CredentialsProviderError("Unable to find environment variable credentials.");
    };
    exports.fromEnv = fromEnv;
  }
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs39 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromEnv(), exports);
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHomeDir = void 0;
    var os_1 = require("os");
    var path_1 = require("path");
    var homeDirCache = {};
    var getHomeDirCacheKey = () => {
      if (process && process.geteuid) {
        return `${process.geteuid()}`;
      }
      return "DEFAULT";
    };
    var getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      const homeDirCacheKey = getHomeDirCacheKey();
      if (!homeDirCache[homeDirCacheKey])
        homeDirCache[homeDirCacheKey] = (0, os_1.homedir)();
      return homeDirCache[homeDirCacheKey];
    };
    exports.getHomeDir = getHomeDir;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getProfileName.js
var require_getProfileName = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getProfileName.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProfileName = exports.DEFAULT_PROFILE = exports.ENV_PROFILE = void 0;
    exports.ENV_PROFILE = "AWS_PROFILE";
    exports.DEFAULT_PROFILE = "default";
    var getProfileName = (init) => init.profile || process.env[exports.ENV_PROFILE] || exports.DEFAULT_PROFILE;
    exports.getProfileName = getProfileName;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFilepath = void 0;
    var crypto_1 = require("crypto");
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath = (id) => {
      const hasher = (0, crypto_1.createHash)("sha1");
      const cacheName = hasher.update(id).digest("hex");
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
    };
    exports.getSSOTokenFilepath = getSSOTokenFilepath;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFromFile = void 0;
    var fs_1 = require("fs");
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = async (id) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(id);
      const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
      return JSON.parse(ssoTokenText);
    };
    exports.getSSOTokenFromFile = getSSOTokenFromFile;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getConfigFilepath.js
var require_getConfigFilepath = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getConfigFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getConfigFilepath = exports.ENV_CONFIG_PATH = void 0;
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    var getConfigFilepath = () => process.env[exports.ENV_CONFIG_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "config");
    exports.getConfigFilepath = getConfigFilepath;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js
var require_getCredentialsFilepath = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCredentialsFilepath = exports.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    var getCredentialsFilepath = () => process.env[exports.ENV_CREDENTIALS_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "credentials");
    exports.getCredentialsFilepath = getCredentialsFilepath;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getProfileData.js
var require_getProfileData = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getProfileData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProfileData = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var getProfileData = (data) => Object.entries(data).filter(([key]) => profileKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [profileKeyRegex.exec(key)[2]]: value }), {
      ...data.default && { default: data.default }
    });
    exports.getProfileData = getProfileData;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/parseIni.js
var require_parseIni = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/parseIni.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseIni = void 0;
    var profileNameBlockList = ["__proto__", "profile __proto__"];
    var parseIni = (iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === "[" && line[line.length - 1] === "]";
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf("=");
          const start = 0;
          const end = line.length - 1;
          const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim()
            ];
            map[currentSection] = map[currentSection] || {};
            map[currentSection][name] = value;
          }
        }
      }
      return map;
    };
    exports.parseIni = parseIni;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.slurpFile = void 0;
    var fs_1 = require("fs");
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path, options) => {
      if (!filePromisesHash[path] || (options === null || options === void 0 ? void 0 : options.ignoreCache)) {
        filePromisesHash[path] = readFile(path, "utf8");
      }
      return filePromisesHash[path];
    };
    exports.slurpFile = slurpFile;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js
var require_loadSharedConfigFiles = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadSharedConfigFiles = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getCredentialsFilepath_1 = require_getCredentialsFilepath();
    var getProfileData_1 = require_getProfileData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const { filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(), configFilepath = (0, getConfigFilepath_1.getConfigFilepath)() } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni_1.parseIni).then(getProfileData_1.getProfileData).catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni_1.parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    };
    exports.loadSharedConfigFiles = loadSharedConfigFiles;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSsoSessionData.js
var require_getSsoSessionData = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSsoSessionData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSsoSessionData = void 0;
    var ssoSessionKeyRegex = /^sso-session\s(["'])?([^\1]+)\1$/;
    var getSsoSessionData = (data) => Object.entries(data).filter(([key]) => ssoSessionKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [ssoSessionKeyRegex.exec(key)[2]]: value }), {});
    exports.getSsoSessionData = getSsoSessionData;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js
var require_loadSsoSessionData = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadSsoSessionData = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getSsoSessionData_1 = require_getSsoSessionData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSsoSessionData = async (init = {}) => {
      var _a;
      return (0, slurpFile_1.slurpFile)((_a = init.configFilepath) !== null && _a !== void 0 ? _a : (0, getConfigFilepath_1.getConfigFilepath)()).then(parseIni_1.parseIni).then(getSsoSessionData_1.getSsoSessionData).catch(swallowError);
    };
    exports.loadSsoSessionData = loadSsoSessionData;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/mergeConfigFiles.js
var require_mergeConfigFiles = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/mergeConfigFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeConfigFiles = void 0;
    var mergeConfigFiles = (...files) => {
      const merged = {};
      for (const file of files) {
        for (const [key, values] of Object.entries(file)) {
          if (merged[key] !== void 0) {
            Object.assign(merged[key], values);
          } else {
            merged[key] = values;
          }
        }
      }
      return merged;
    };
    exports.mergeConfigFiles = mergeConfigFiles;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/parseKnownFiles.js
var require_parseKnownFiles = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/parseKnownFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles();
    var mergeConfigFiles_1 = require_mergeConfigFiles();
    var parseKnownFiles = async (init) => {
      const parsedFiles = await (0, loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return (0, mergeConfigFiles_1.mergeConfigFiles)(parsedFiles.configFile, parsedFiles.credentialsFile);
    };
    exports.parseKnownFiles = parseKnownFiles;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/types.js
var require_types5 = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs40 = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getHomeDir(), exports);
    tslib_1.__exportStar(require_getProfileName(), exports);
    tslib_1.__exportStar(require_getSSOTokenFilepath(), exports);
    tslib_1.__exportStar(require_getSSOTokenFromFile(), exports);
    tslib_1.__exportStar(require_loadSharedConfigFiles(), exports);
    tslib_1.__exportStar(require_loadSsoSessionData(), exports);
    tslib_1.__exportStar(require_parseKnownFiles(), exports);
    tslib_1.__exportStar(require_types5(), exports);
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js
var require_httpRequest2 = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.httpRequest = void 0;
    var property_provider_1 = require_dist_cjs8();
    var buffer_1 = require("buffer");
    var http_1 = require("http");
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, http_1.request)({
          method: "GET",
          ...options,
          hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\[(.+)\]$/, "$1")
        });
        req.on("error", (err) => {
          reject(Object.assign(new property_provider_1.ProviderError("Unable to connect to instance metadata service"), err));
          req.destroy();
        });
        req.on("timeout", () => {
          reject(new property_provider_1.ProviderError("TimeoutError from instance metadata service"));
          req.destroy();
        });
        req.on("response", (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(Object.assign(new property_provider_1.ProviderError("Error response received from instance metadata service"), { statusCode }));
            req.destroy();
          }
          const chunks = [];
          res.on("data", (chunk) => {
            chunks.push(chunk);
          });
          res.on("end", () => {
            resolve(buffer_1.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    exports.httpRequest = httpRequest;
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js
var require_ImdsCredentials = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromImdsCredentials = exports.isImdsCredentials = void 0;
    var isImdsCredentials = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string";
    exports.isImdsCredentials = isImdsCredentials;
    var fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration)
    });
    exports.fromImdsCredentials = fromImdsCredentials;
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js
var require_RemoteProviderInit = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.providerConfigFromInit = exports.DEFAULT_MAX_RETRIES = exports.DEFAULT_TIMEOUT = void 0;
    exports.DEFAULT_TIMEOUT = 1e3;
    exports.DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = ({ maxRetries = exports.DEFAULT_MAX_RETRIES, timeout = exports.DEFAULT_TIMEOUT }) => ({ maxRetries, timeout });
    exports.providerConfigFromInit = providerConfigFromInit;
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/retry.js
var require_retry4 = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.retry = void 0;
    var retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
    exports.retry = retry;
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/fromContainerMetadata.js
var require_fromContainerMetadata = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/fromContainerMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromContainerMetadata = exports.ENV_CMDS_AUTH_TOKEN = exports.ENV_CMDS_RELATIVE_URI = exports.ENV_CMDS_FULL_URI = void 0;
    var property_provider_1 = require_dist_cjs8();
    var url_1 = require("url");
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry4();
    exports.ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    exports.ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    exports.ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      return () => (0, retry_1.retry)(async () => {
        const requestOptions = await getCmdsUri();
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
          throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
        }
        return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
      }, maxRetries);
    };
    exports.fromContainerMetadata = fromContainerMetadata;
    var requestFromEcsImds = async (timeout, options) => {
      if (process.env[exports.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[exports.ENV_CMDS_AUTH_TOKEN]
        };
      }
      const buffer = await (0, httpRequest_1.httpRequest)({
        ...options,
        timeout
      });
      return buffer.toString();
    };
    var CMDS_IP = "169.254.170.2";
    var GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    var GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    var getCmdsUri = async () => {
      if (process.env[exports.ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[exports.ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[exports.ENV_CMDS_FULL_URI]) {
        const parsed = (0, url_1.parse)(process.env[exports.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        };
      }
      throw new property_provider_1.CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${exports.ENV_CMDS_RELATIVE_URI} or ${exports.ENV_CMDS_FULL_URI} environment variable is set`, false);
    };
  }
});

// node_modules/@smithy/node-config-provider/dist-cjs/fromEnv.js
var require_fromEnv2 = __commonJS({
  "node_modules/@smithy/node-config-provider/dist-cjs/fromEnv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs8();
    var fromEnv = (envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);
      }
    };
    exports.fromEnv = fromEnv;
  }
});

// node_modules/@smithy/node-config-provider/dist-cjs/fromSharedConfigFiles.js
var require_fromSharedConfigFiles = __commonJS({
  "node_modules/@smithy/node-config-provider/dist-cjs/fromSharedConfigFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSharedConfigFiles = void 0;
    var property_provider_1 = require_dist_cjs8();
    var shared_ini_file_loader_1 = require_dist_cjs40();
    var fromSharedConfigFiles = (configSelector, { preferredFile = "config", ...init } = {}) => async () => {
      const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
      const { configFile, credentialsFile } = await (0, shared_ini_file_loader_1.loadSharedConfigFiles)(init);
      const profileFromCredentials = credentialsFile[profile] || {};
      const profileFromConfig = configFile[profile] || {};
      const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
      try {
        const configValue = configSelector(mergedProfile);
        if (configValue === void 0) {
          throw new Error();
        }
        return configValue;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);
      }
    };
    exports.fromSharedConfigFiles = fromSharedConfigFiles;
  }
});

// node_modules/@smithy/node-config-provider/dist-cjs/fromStatic.js
var require_fromStatic2 = __commonJS({
  "node_modules/@smithy/node-config-provider/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs8();
    var isFunction = (func) => typeof func === "function";
    var fromStatic = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : (0, property_provider_1.fromStatic)(defaultValue);
    exports.fromStatic = fromStatic;
  }
});

// node_modules/@smithy/node-config-provider/dist-cjs/configLoader.js
var require_configLoader = __commonJS({
  "node_modules/@smithy/node-config-provider/dist-cjs/configLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs8();
    var fromEnv_1 = require_fromEnv2();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles();
    var fromStatic_1 = require_fromStatic2();
    var loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromEnv_1.fromEnv)(environmentVariableSelector), (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(configFileSelector, configuration), (0, fromStatic_1.fromStatic)(defaultValue)));
    exports.loadConfig = loadConfig;
  }
});

// node_modules/@smithy/node-config-provider/dist-cjs/index.js
var require_dist_cjs41 = __commonJS({
  "node_modules/@smithy/node-config-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configLoader(), exports);
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/config/Endpoint.js
var require_Endpoint2 = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/config/Endpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Endpoint = void 0;
    var Endpoint;
    (function(Endpoint2) {
      Endpoint2["IPv4"] = "http://169.254.169.254";
      Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
    })(Endpoint = exports.Endpoint || (exports.Endpoint = {}));
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js
var require_EndpointConfigOptions = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENDPOINT_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_NAME = exports.ENV_ENDPOINT_NAME = void 0;
    exports.ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    exports.CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    exports.ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_NAME],
      default: void 0
    };
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/config/EndpointMode.js
var require_EndpointMode = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/config/EndpointMode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointMode = void 0;
    var EndpointMode;
    (function(EndpointMode2) {
      EndpointMode2["IPv4"] = "IPv4";
      EndpointMode2["IPv6"] = "IPv6";
    })(EndpointMode = exports.EndpointMode || (exports.EndpointMode = {}));
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js
var require_EndpointModeConfigOptions = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_MODE_NAME = exports.ENV_ENDPOINT_MODE_NAME = void 0;
    var EndpointMode_1 = require_EndpointMode();
    exports.ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    exports.CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode_1.EndpointMode.IPv4
    };
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js
var require_getInstanceMetadataEndpoint = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInstanceMetadataEndpoint = void 0;
    var node_config_provider_1 = require_dist_cjs41();
    var url_parser_1 = require_dist_cjs26();
    var Endpoint_1 = require_Endpoint2();
    var EndpointConfigOptions_1 = require_EndpointConfigOptions();
    var EndpointMode_1 = require_EndpointMode();
    var EndpointModeConfigOptions_1 = require_EndpointModeConfigOptions();
    var getInstanceMetadataEndpoint = async () => (0, url_parser_1.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig());
    exports.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
    var getFromEndpointConfig = async () => (0, node_config_provider_1.loadConfig)(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)();
    var getFromEndpointModeConfig = async () => {
      const endpointMode = await (0, node_config_provider_1.loadConfig)(EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
          return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
          return Endpoint_1.Endpoint.IPv6;
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode_1.EndpointMode)}`);
      }
    };
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js
var require_getExtendedInstanceMetadataCredentials = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getExtendedInstanceMetadataCredentials = void 0;
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    var getExtendedInstanceMetadataCredentials = (credentials, logger2) => {
      var _a;
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger2.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: " + STATIC_STABILITY_DOC_URL);
      const originalExpiration = (_a = credentials.originalExpiration) !== null && _a !== void 0 ? _a : credentials.expiration;
      return {
        ...credentials,
        ...originalExpiration ? { originalExpiration } : {},
        expiration: newExpiration
      };
    };
    exports.getExtendedInstanceMetadataCredentials = getExtendedInstanceMetadataCredentials;
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js
var require_staticStabilityProvider = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.staticStabilityProvider = void 0;
    var getExtendedInstanceMetadataCredentials_1 = require_getExtendedInstanceMetadataCredentials();
    var staticStabilityProvider = (provider, options = {}) => {
      const logger2 = (options === null || options === void 0 ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(credentials, logger2);
          }
        } catch (e) {
          if (pastCredentials) {
            logger2.warn("Credential renew failed: ", e);
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(pastCredentials, logger2);
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
    exports.staticStabilityProvider = staticStabilityProvider;
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/fromInstanceMetadata.js
var require_fromInstanceMetadata = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/fromInstanceMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromInstanceMetadata = void 0;
    var property_provider_1 = require_dist_cjs8();
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry4();
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    var staticStabilityProvider_1 = require_staticStabilityProvider();
    var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    var IMDS_TOKEN_PATH = "/latest/api/token";
    var fromInstanceMetadata = (init = {}) => (0, staticStabilityProvider_1.staticStabilityProvider)(getInstanceImdsProvider(init), { logger: init.logger });
    exports.fromInstanceMetadata = fromInstanceMetadata;
    var getInstanceImdsProvider = (init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      const getCredentials = async (maxRetries2, options) => {
        const profile = (await (0, retry_1.retry)(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return (0, retry_1.retry)(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await (0, getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error) {
            if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              "x-aws-ec2-metadata-token": token
            },
            timeout
          });
        }
      };
    };
    var getMetadataToken = async (options) => (0, httpRequest_1.httpRequest)({
      ...options,
      path: IMDS_TOKEN_PATH,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    });
    var getProfile = async (options) => (await (0, httpRequest_1.httpRequest)({ ...options, path: IMDS_PATH })).toString();
    var getCredentialsFromProfile = async (profile, options) => {
      const credsResponse = JSON.parse((await (0, httpRequest_1.httpRequest)({
        ...options,
        path: IMDS_PATH + profile
      })).toString());
      if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
      }
      return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
    };
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/types.js
var require_types6 = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs42 = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInstanceMetadataEndpoint = exports.httpRequest = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromContainerMetadata(), exports);
    tslib_1.__exportStar(require_fromInstanceMetadata(), exports);
    tslib_1.__exportStar(require_RemoteProviderInit(), exports);
    tslib_1.__exportStar(require_types6(), exports);
    var httpRequest_1 = require_httpRequest2();
    Object.defineProperty(exports, "httpRequest", { enumerable: true, get: function() {
      return httpRequest_1.httpRequest;
    } });
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    Object.defineProperty(exports, "getInstanceMetadataEndpoint", { enumerable: true, get: function() {
      return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
    } });
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js
var require_resolveCredentialSource = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveCredentialSource = void 0;
    var credential_provider_env_1 = require_dist_cjs39();
    var credential_provider_imds_1 = require_dist_cjs42();
    var property_provider_1 = require_dist_cjs8();
    var resolveCredentialSource = (credentialSource, profileName) => {
      const sourceProvidersMap = {
        EcsContainer: credential_provider_imds_1.fromContainerMetadata,
        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,
        Environment: credential_provider_env_1.fromEnv
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
      } else {
        throw new property_provider_1.CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`);
      }
    };
    exports.resolveCredentialSource = resolveCredentialSource;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js
var require_resolveAssumeRoleCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveAssumeRoleCredentials = exports.isAssumeRoleProfile = void 0;
    var property_provider_1 = require_dist_cjs8();
    var shared_ini_file_loader_1 = require_dist_cjs40();
    var resolveCredentialSource_1 = require_resolveCredentialSource();
    var resolveProfileData_1 = require_resolveProfileData();
    var isAssumeRoleProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));
    exports.isAssumeRoleProfile = isAssumeRoleProfile;
    var isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
    var isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
    var resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new property_provider_1.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile ${(0, shared_ini_file_loader_1.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), false);
      }
      const sourceCredsProvider = source_profile ? (0, resolveProfileData_1.resolveProfileData)(source_profile, profiles, options, {
        ...visitedProfiles,
        [source_profile]: true
      }) : (0, resolveCredentialSource_1.resolveCredentialSource)(data.credential_source, profileName)();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id,
        DurationSeconds: parseInt(data.duration_seconds || "3600", 10)
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    };
    exports.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js
var require_getValidatedProcessCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getValidatedProcessCredentials = void 0;
    var getValidatedProcessCredentials = (profileName, data) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = /* @__PURE__ */ new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      return {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && { sessionToken: data.SessionToken },
        ...data.Expiration && { expiration: new Date(data.Expiration) }
      };
    };
    exports.getValidatedProcessCredentials = getValidatedProcessCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProcessCredentials = void 0;
    var property_provider_1 = require_dist_cjs8();
    var child_process_1 = require("child_process");
    var util_1 = require("util");
    var getValidatedProcessCredentials_1 = require_getValidatedProcessCredentials();
    var resolveProcessCredentials = async (profileName, profiles) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, util_1.promisify)(child_process_1.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch (_a) {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return (0, getValidatedProcessCredentials_1.getValidatedProcessCredentials)(profileName, data);
          } catch (error) {
            throw new property_provider_1.CredentialsProviderError(error.message);
          }
        } else {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);
        }
      } else {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);
      }
    };
    exports.resolveProcessCredentials = resolveProcessCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js
var require_fromProcess = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromProcess = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs40();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials();
    var fromProcess = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProcessCredentials_1.resolveProcessCredentials)((0, shared_ini_file_loader_1.getProfileName)(init), profiles);
    };
    exports.fromProcess = fromProcess;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs43 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromProcess(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials2 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProcessCredentials = exports.isProcessProfile = void 0;
    var credential_provider_process_1 = require_dist_cjs43();
    var isProcessProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string";
    exports.isProcessProfile = isProcessProfile;
    var resolveProcessCredentials = async (options, profile) => (0, credential_provider_process_1.fromProcess)({
      ...options,
      profile
    })();
    exports.resolveProcessCredentials = resolveProcessCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js
var require_isSsoProfile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSsoProfile = void 0;
    var isSsoProfile = (arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
    exports.isSsoProfile = isSsoProfile;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters3 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssoportal"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// node_modules/@aws-sdk/client-sso/package.json
var require_package3 = __commonJS({
  "node_modules/@aws-sdk/client-sso/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.421.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/middleware-host-header": "3.418.0",
        "@aws-sdk/middleware-logger": "3.418.0",
        "@aws-sdk/middleware-recursion-detection": "3.418.0",
        "@aws-sdk/middleware-user-agent": "3.418.0",
        "@aws-sdk/region-config-resolver": "3.418.0",
        "@aws-sdk/types": "3.418.0",
        "@aws-sdk/util-endpoints": "3.418.0",
        "@aws-sdk/util-user-agent-browser": "3.418.0",
        "@aws-sdk/util-user-agent-node": "3.418.0",
        "@smithy/config-resolver": "^2.0.10",
        "@smithy/fetch-http-handler": "^2.1.5",
        "@smithy/hash-node": "^2.0.9",
        "@smithy/invalid-dependency": "^2.0.9",
        "@smithy/middleware-content-length": "^2.0.11",
        "@smithy/middleware-endpoint": "^2.0.9",
        "@smithy/middleware-retry": "^2.0.12",
        "@smithy/middleware-serde": "^2.0.9",
        "@smithy/middleware-stack": "^2.0.2",
        "@smithy/node-config-provider": "^2.0.12",
        "@smithy/node-http-handler": "^2.1.5",
        "@smithy/protocol-http": "^3.0.5",
        "@smithy/smithy-client": "^2.1.6",
        "@smithy/types": "^2.3.3",
        "@smithy/url-parser": "^2.0.9",
        "@smithy/util-base64": "^2.0.0",
        "@smithy/util-body-length-browser": "^2.0.0",
        "@smithy/util-body-length-node": "^2.1.0",
        "@smithy/util-defaults-mode-browser": "^2.0.10",
        "@smithy/util-defaults-mode-node": "^2.0.12",
        "@smithy/util-retry": "^2.0.2",
        "@smithy/util-utf8": "^2.0.0",
        tslib: "^2.5.0"
      },
      devDependencies: {
        "@smithy/service-client-documentation-generator": "^2.0.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.23.23",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js
var require_is_crt_available = __commonJS({
  "node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isCrtAvailable = void 0;
    var isCrtAvailable = () => {
      try {
        if (typeof require === "function" && typeof module2 !== "undefined" && require("aws-crt")) {
          return ["md/crt-avail"];
        }
        return null;
      } catch (e) {
        return null;
      }
    };
    exports.isCrtAvailable = isCrtAvailable;
  }
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs44 = __commonJS({
  "node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultUserAgent = exports.UA_APP_ID_INI_NAME = exports.UA_APP_ID_ENV_NAME = void 0;
    var node_config_provider_1 = require_dist_cjs41();
    var os_1 = require("os");
    var process_1 = require("process");
    var is_crt_available_1 = require_is_crt_available();
    exports.UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    exports.UA_APP_ID_INI_NAME = "sdk-ua-app-id";
    var defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        ["aws-sdk-js", clientVersion],
        ["ua", "2.0"],
        [`os/${(0, os_1.platform)()}`, (0, os_1.release)()],
        ["lang/js"],
        ["md/nodejs", `${process_1.versions.node}`]
      ];
      const crtAvailable = (0, is_crt_available_1.isCrtAvailable)();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${process_1.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = (0, node_config_provider_1.loadConfig)({
        environmentVariableSelector: (env) => env[exports.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[exports.UA_APP_ID_INI_NAME],
        default: void 0
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        }
        return resolvedUserAgent;
      };
    };
    exports.defaultUserAgent = defaultUserAgent;
  }
});

// node_modules/@smithy/hash-node/dist-cjs/index.js
var require_dist_cjs45 = __commonJS({
  "node_modules/@smithy/hash-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Hash = void 0;
    var util_buffer_from_1 = require_dist_cjs14();
    var util_utf8_1 = require_dist_cjs15();
    var buffer_1 = require("buffer");
    var crypto_1 = require("crypto");
    var Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
      }
      update(toHash, encoding) {
        this.hash.update((0, util_utf8_1.toUint8Array)(castSourceData(toHash, encoding)));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
      reset() {
        this.hash = this.secret ? (0, crypto_1.createHmac)(this.algorithmIdentifier, castSourceData(this.secret)) : (0, crypto_1.createHash)(this.algorithmIdentifier);
      }
    };
    exports.Hash = Hash;
    function castSourceData(toCast, encoding) {
      if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === "string") {
        return (0, util_buffer_from_1.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, util_buffer_from_1.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(toCast);
    }
  }
});

// node_modules/@smithy/util-body-length-node/dist-cjs/calculateBodyLength.js
var require_calculateBodyLength = __commonJS({
  "node_modules/@smithy/util-body-length-node/dist-cjs/calculateBodyLength.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.calculateBodyLength = void 0;
    var fs_1 = require("fs");
    var calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.start === "number" && typeof body.end === "number") {
        return body.end + 1 - body.start;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0, fs_1.lstatSync)(body.path).size;
      } else if (typeof body.fd === "number") {
        return (0, fs_1.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
    exports.calculateBodyLength = calculateBodyLength;
  }
});

// node_modules/@smithy/util-body-length-node/dist-cjs/index.js
var require_dist_cjs46 = __commonJS({
  "node_modules/@smithy/util-body-length-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_calculateBodyLength(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_ruleset = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var q = "required";
    var r = "fn";
    var s = "argv";
    var t = "ref";
    var a = "isSet";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = "PartitionResult";
    var f = { [q]: false, "type": "String" };
    var g = { [q]: true, "default": false, "type": "Boolean" };
    var h = { [t]: "Endpoint" };
    var i = { [r]: "booleanEquals", [s]: [{ [t]: "UseFIPS" }, true] };
    var j = { [r]: "booleanEquals", [s]: [{ [t]: "UseDualStack" }, true] };
    var k = {};
    var l = { [r]: "booleanEquals", [s]: [true, { [r]: "getAttr", [s]: [{ [t]: e }, "supportsFIPS"] }] };
    var m = { [r]: "booleanEquals", [s]: [true, { [r]: "getAttr", [s]: [{ [t]: e }, "supportsDualStack"] }] };
    var n = [i];
    var o = [j];
    var p = [{ [t]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: f, UseDualStack: g, UseFIPS: g, Endpoint: f }, rules: [{ conditions: [{ [r]: a, [s]: [h] }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: h, properties: k, headers: k }, type: d }] }, { conditions: [{ [r]: a, [s]: p }], type: b, rules: [{ conditions: [{ [r]: "aws.partition", [s]: p, assign: e }], type: b, rules: [{ conditions: [i, j], type: b, rules: [{ conditions: [l, m], type: b, rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: k, headers: k }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}", properties: k, headers: k }, type: d }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [m], type: b, rules: [{ endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: k, headers: k }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}", properties: k, headers: k }, type: d }] }] }, { error: "Invalid Configuration: Missing Region", type: c }] };
    exports.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs20();
    var ruleset_1 = require_ruleset();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs37();
    var url_parser_1 = require_dist_cjs26();
    var util_base64_1 = require_dist_cjs33();
    var util_utf8_1 = require_dist_cjs15();
    var endpointResolver_1 = require_endpointResolver();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2019-06-10",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      extensions: config?.extensions ?? [],
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "SSO",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@smithy/util-defaults-mode-node/dist-cjs/constants.js
var require_constants7 = __commonJS({
  "node_modules/@smithy/util-defaults-mode-node/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IMDS_REGION_PATH = exports.DEFAULTS_MODE_OPTIONS = exports.ENV_IMDS_DISABLED = exports.AWS_DEFAULT_REGION_ENV = exports.AWS_REGION_ENV = exports.AWS_EXECUTION_ENV = void 0;
    exports.AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    exports.AWS_REGION_ENV = "AWS_REGION";
    exports.AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    exports.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    exports.DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    exports.IMDS_REGION_PATH = "/latest/meta-data/placement/region";
  }
});

// node_modules/@smithy/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js
var require_defaultsModeConfig = __commonJS({
  "node_modules/@smithy/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = void 0;
    var AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    var AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
  }
});

// node_modules/@smithy/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js
var require_resolveDefaultsModeConfig = __commonJS({
  "node_modules/@smithy/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveDefaultsModeConfig = void 0;
    var config_resolver_1 = require_dist_cjs23();
    var credential_provider_imds_1 = require_dist_cjs42();
    var node_config_provider_1 = require_dist_cjs41();
    var property_provider_1 = require_dist_cjs8();
    var constants_1 = require_constants7();
    var defaultsModeConfig_1 = require_defaultsModeConfig();
    var resolveDefaultsModeConfig = ({ region = (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS), defaultsMode = (0, node_config_provider_1.loadConfig)(defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {}) => (0, property_provider_1.memoize)(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode === null || mode === void 0 ? void 0 : mode.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode === null || mode === void 0 ? void 0 : mode.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(`Invalid parameter for "defaultsMode", expect ${constants_1.DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
      }
    });
    exports.resolveDefaultsModeConfig = resolveDefaultsModeConfig;
    var resolveNodeDefaultsModeAuto = async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    };
    var inferPhysicalRegion = async () => {
      var _a;
      if (process.env[constants_1.AWS_EXECUTION_ENV] && (process.env[constants_1.AWS_REGION_ENV] || process.env[constants_1.AWS_DEFAULT_REGION_ENV])) {
        return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null && _a !== void 0 ? _a : process.env[constants_1.AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[constants_1.ENV_IMDS_DISABLED]) {
        try {
          const endpoint = await (0, credential_provider_imds_1.getInstanceMetadataEndpoint)();
          return (await (0, credential_provider_imds_1.httpRequest)({ ...endpoint, path: constants_1.IMDS_REGION_PATH })).toString();
        } catch (e) {
        }
      }
    };
  }
});

// node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs47 = __commonJS({
  "node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_resolveDefaultsModeConfig(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var util_user_agent_node_1 = require_dist_cjs44();
    var config_resolver_1 = require_dist_cjs23();
    var hash_node_1 = require_dist_cjs45();
    var middleware_retry_1 = require_dist_cjs31();
    var node_config_provider_1 = require_dist_cjs41();
    var node_http_handler_1 = require_dist_cjs35();
    var util_body_length_node_1 = require_dist_cjs46();
    var util_retry_1 = require_dist_cjs30();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs37();
    var util_defaults_mode_node_1 = require_dist_cjs47();
    var smithy_client_2 = require_dist_cjs37();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/region-config-resolver/dist-cjs/extensions/index.js
var require_extensions5 = __commonJS({
  "node_modules/@aws-sdk/region-config-resolver/dist-cjs/extensions/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveAwsRegionExtensionConfiguration = exports.getAwsRegionExtensionConfiguration = void 0;
    var getAwsRegionExtensionConfiguration = (runtimeConfig) => {
      let runtimeConfigRegion = async () => {
        if (runtimeConfig.region === void 0) {
          throw new Error("Region is missing from runtimeConfig");
        }
        const region = runtimeConfig.region;
        if (typeof region === "string") {
          return region;
        }
        return region();
      };
      return {
        setRegion(region) {
          runtimeConfigRegion = region;
        },
        region() {
          return runtimeConfigRegion;
        }
      };
    };
    exports.getAwsRegionExtensionConfiguration = getAwsRegionExtensionConfiguration;
    var resolveAwsRegionExtensionConfiguration = (awsRegionExtensionConfiguration) => {
      return {
        region: awsRegionExtensionConfiguration.region()
      };
    };
    exports.resolveAwsRegionExtensionConfiguration = resolveAwsRegionExtensionConfiguration;
  }
});

// node_modules/@aws-sdk/region-config-resolver/dist-cjs/regionConfig/config.js
var require_config4 = __commonJS({
  "node_modules/@aws-sdk/region-config-resolver/dist-cjs/regionConfig/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = exports.NODE_REGION_CONFIG_OPTIONS = exports.REGION_INI_NAME = exports.REGION_ENV_NAME = void 0;
    exports.REGION_ENV_NAME = "AWS_REGION";
    exports.REGION_INI_NAME = "region";
    exports.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports.REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
  }
});

// node_modules/@aws-sdk/region-config-resolver/dist-cjs/regionConfig/isFipsRegion.js
var require_isFipsRegion2 = __commonJS({
  "node_modules/@aws-sdk/region-config-resolver/dist-cjs/regionConfig/isFipsRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isFipsRegion = void 0;
    var isFipsRegion = (region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
    exports.isFipsRegion = isFipsRegion;
  }
});

// node_modules/@aws-sdk/region-config-resolver/dist-cjs/regionConfig/getRealRegion.js
var require_getRealRegion2 = __commonJS({
  "node_modules/@aws-sdk/region-config-resolver/dist-cjs/regionConfig/getRealRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion2();
    var getRealRegion = (region) => (0, isFipsRegion_1.isFipsRegion)(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;
    exports.getRealRegion = getRealRegion;
  }
});

// node_modules/@aws-sdk/region-config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js
var require_resolveRegionConfig2 = __commonJS({
  "node_modules/@aws-sdk/region-config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion2();
    var isFipsRegion_1 = require_isFipsRegion2();
    var resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === "string") {
            return (0, getRealRegion_1.getRealRegion)(region);
          }
          const providedRegion = await region();
          return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
      };
    };
    exports.resolveRegionConfig = resolveRegionConfig;
  }
});

// node_modules/@aws-sdk/region-config-resolver/dist-cjs/regionConfig/index.js
var require_regionConfig2 = __commonJS({
  "node_modules/@aws-sdk/region-config-resolver/dist-cjs/regionConfig/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_config4(), exports);
    tslib_1.__exportStar(require_resolveRegionConfig2(), exports);
  }
});

// node_modules/@aws-sdk/region-config-resolver/dist-cjs/index.js
var require_dist_cjs48 = __commonJS({
  "node_modules/@aws-sdk/region-config-resolver/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_extensions5(), exports);
    tslib_1.__exportStar(require_regionConfig2(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeExtensions.js
var require_runtimeExtensions = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/runtimeExtensions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveRuntimeExtensions = void 0;
    var region_config_resolver_1 = require_dist_cjs48();
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs37();
    var asPartial = (t) => t;
    var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, region_config_resolver_1.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, smithy_client_1.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, protocol_http_1.getHttpHandlerExtensionConfiguration)(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, region_config_resolver_1.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, smithy_client_1.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, protocol_http_1.resolveHttpHandlerRuntimeConfig)(extensionConfiguration)
      };
    };
    exports.resolveRuntimeExtensions = resolveRuntimeExtensions;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js
var require_SSOClient = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOClient = exports.__Client = void 0;
    var middleware_host_header_1 = require_dist_cjs5();
    var middleware_logger_1 = require_dist_cjs6();
    var middleware_recursion_detection_1 = require_dist_cjs7();
    var middleware_user_agent_1 = require_dist_cjs21();
    var config_resolver_1 = require_dist_cjs23();
    var middleware_content_length_1 = require_dist_cjs24();
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_retry_1 = require_dist_cjs31();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var EndpointParameters_1 = require_EndpointParameters3();
    var runtimeConfig_1 = require_runtimeConfig();
    var runtimeExtensions_1 = require_runtimeExtensions();
    var SSOClient = class extends smithy_client_1.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        const _config_7 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_6, configuration?.extensions || []);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSOClient = SSOClient;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js
var require_SSOServiceException = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOServiceException = exports.__ServiceException = void 0;
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "__ServiceException", { enumerable: true, get: function() {
      return smithy_client_1.ServiceException;
    } });
    var SSOServiceException = class _SSOServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOServiceException.prototype);
      }
    };
    exports.SSOServiceException = SSOServiceException;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js
var require_models_03 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogoutRequestFilterSensitiveLog = exports.ListAccountsRequestFilterSensitiveLog = exports.ListAccountRolesRequestFilterSensitiveLog = exports.GetRoleCredentialsResponseFilterSensitiveLog = exports.RoleCredentialsFilterSensitiveLog = exports.GetRoleCredentialsRequestFilterSensitiveLog = exports.UnauthorizedException = exports.TooManyRequestsException = exports.ResourceNotFoundException = exports.InvalidRequestException = void 0;
    var smithy_client_1 = require_dist_cjs37();
    var SSOServiceException_1 = require_SSOServiceException();
    var InvalidRequestException = class _InvalidRequestException extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException.prototype);
      }
    };
    exports.InvalidRequestException = InvalidRequestException;
    var ResourceNotFoundException = class _ResourceNotFoundException extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
      }
    };
    exports.ResourceNotFoundException = ResourceNotFoundException;
    var TooManyRequestsException = class _TooManyRequestsException extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
      }
    };
    exports.TooManyRequestsException = TooManyRequestsException;
    var UnauthorizedException = class _UnauthorizedException extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedException.prototype);
      }
    };
    exports.UnauthorizedException = UnauthorizedException;
    var GetRoleCredentialsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.GetRoleCredentialsRequestFilterSensitiveLog = GetRoleCredentialsRequestFilterSensitiveLog;
    var RoleCredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.secretAccessKey && { secretAccessKey: smithy_client_1.SENSITIVE_STRING },
      ...obj.sessionToken && { sessionToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.RoleCredentialsFilterSensitiveLog = RoleCredentialsFilterSensitiveLog;
    var GetRoleCredentialsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.roleCredentials && { roleCredentials: (0, exports.RoleCredentialsFilterSensitiveLog)(obj.roleCredentials) }
    });
    exports.GetRoleCredentialsResponseFilterSensitiveLog = GetRoleCredentialsResponseFilterSensitiveLog;
    var ListAccountRolesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAccountRolesRequestFilterSensitiveLog = ListAccountRolesRequestFilterSensitiveLog;
    var ListAccountsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAccountsRequestFilterSensitiveLog = ListAccountsRequestFilterSensitiveLog;
    var LogoutRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.LogoutRequestFilterSensitiveLog = LogoutRequestFilterSensitiveLog;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson1 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.de_LogoutCommand = exports.de_ListAccountsCommand = exports.de_ListAccountRolesCommand = exports.de_GetRoleCredentialsCommand = exports.se_LogoutCommand = exports.se_ListAccountsCommand = exports.se_ListAccountRolesCommand = exports.se_GetRoleCredentialsCommand = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs37();
    var models_0_1 = require_models_03();
    var SSOServiceException_1 = require_SSOServiceException();
    var se_GetRoleCredentialsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/federation/credentials`;
      const query = (0, smithy_client_1.map)({
        role_name: [, (0, smithy_client_1.expectNonNull)(input.roleName, `roleName`)],
        account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_GetRoleCredentialsCommand = se_GetRoleCredentialsCommand;
    var se_ListAccountRolesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/assignment/roles`;
      const query = (0, smithy_client_1.map)({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],
        account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListAccountRolesCommand = se_ListAccountRolesCommand;
    var se_ListAccountsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/assignment/accounts`;
      const query = (0, smithy_client_1.map)({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListAccountsCommand = se_ListAccountsCommand;
    var se_LogoutCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/logout`;
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_LogoutCommand = se_LogoutCommand;
    var de_GetRoleCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetRoleCredentialsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        roleCredentials: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetRoleCredentialsCommand = de_GetRoleCredentialsCommand;
    var de_GetRoleCredentialsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAccountRolesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAccountRolesCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        nextToken: smithy_client_1.expectString,
        roleList: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListAccountRolesCommand = de_ListAccountRolesCommand;
    var de_ListAccountRolesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAccountsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAccountsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        accountList: smithy_client_1._json,
        nextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListAccountsCommand = de_ListAccountsCommand;
    var de_ListAccountsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_LogoutCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_LogoutCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_LogoutCommand = de_LogoutCommand;
    var de_LogoutCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var throwDefaultError = (0, smithy_client_1.withBaseException)(SSOServiceException_1.SSOServiceException);
    var de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js
var require_GetRoleCredentialsCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetRoleCredentialsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetRoleCredentialsCommand = class _GetRoleCredentialsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetRoleCredentialsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOClient";
        const commandName = "GetRoleCredentialsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRoleCredentialsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRoleCredentialsResponseFilterSensitiveLog,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "SWBPortalService",
            operation: "GetRoleCredentials"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetRoleCredentialsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetRoleCredentialsCommand)(output, context);
      }
    };
    exports.GetRoleCredentialsCommand = GetRoleCredentialsCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js
var require_ListAccountRolesCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccountRolesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountRolesCommand = class _ListAccountRolesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAccountRolesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountRolesCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountRolesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "SWBPortalService",
            operation: "ListAccountRoles"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAccountRolesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAccountRolesCommand)(output, context);
      }
    };
    exports.ListAccountRolesCommand = ListAccountRolesCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js
var require_ListAccountsCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccountsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountsCommand = class _ListAccountsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAccountsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "SWBPortalService",
            operation: "ListAccounts"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAccountsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAccountsCommand)(output, context);
      }
    };
    exports.ListAccountsCommand = ListAccountsCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js
var require_LogoutCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogoutCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var LogoutCommand = class _LogoutCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _LogoutCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOClient";
        const commandName = "LogoutCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.LogoutRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "SWBPortalService",
            operation: "Logout"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_LogoutCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_LogoutCommand)(output, context);
      }
    };
    exports.LogoutCommand = LogoutCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js
var require_SSO = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSO = void 0;
    var smithy_client_1 = require_dist_cjs37();
    var GetRoleCredentialsCommand_1 = require_GetRoleCredentialsCommand();
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var LogoutCommand_1 = require_LogoutCommand();
    var SSOClient_1 = require_SSOClient();
    var commands = {
      GetRoleCredentialsCommand: GetRoleCredentialsCommand_1.GetRoleCredentialsCommand,
      ListAccountRolesCommand: ListAccountRolesCommand_1.ListAccountRolesCommand,
      ListAccountsCommand: ListAccountsCommand_1.ListAccountsCommand,
      LogoutCommand: LogoutCommand_1.LogoutCommand
    };
    var SSO = class extends SSOClient_1.SSOClient {
    };
    exports.SSO = SSO;
    (0, smithy_client_1.createAggregatedClient)(commands, SSO);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js
var require_commands = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_GetRoleCredentialsCommand(), exports);
    tslib_1.__exportStar(require_ListAccountRolesCommand(), exports);
    tslib_1.__exportStar(require_ListAccountsCommand(), exports);
    tslib_1.__exportStar(require_LogoutCommand(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js
var require_Interfaces = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js
var require_ListAccountRolesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccountRoles = void 0;
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountRolesCommand_1.ListAccountRolesCommand(input), ...args);
    };
    async function* paginateListAccountRoles(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccountRoles = paginateListAccountRoles;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js
var require_ListAccountsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccounts = void 0;
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountsCommand_1.ListAccountsCommand(input), ...args);
    };
    async function* paginateListAccounts(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccounts = paginateListAccounts;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js
var require_pagination3 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces(), exports);
    tslib_1.__exportStar(require_ListAccountRolesPaginator(), exports);
    tslib_1.__exportStar(require_ListAccountsPaginator(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js
var require_models = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_03(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs49 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SSOClient(), exports);
    tslib_1.__exportStar(require_SSO(), exports);
    tslib_1.__exportStar(require_commands(), exports);
    tslib_1.__exportStar(require_pagination3(), exports);
    tslib_1.__exportStar(require_models(), exports);
    var SSOServiceException_1 = require_SSOServiceException();
    Object.defineProperty(exports, "SSOServiceException", { enumerable: true, get: function() {
      return SSOServiceException_1.SSOServiceException;
    } });
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/bundle/client-sso-oidc-node.js
var require_client_sso_oidc_node = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/bundle/client-sso-oidc-node.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UnsupportedGrantTypeException = exports.UnauthorizedClientException = exports.SlowDownException = exports.SSOOIDCClient = exports.InvalidScopeException = exports.InvalidRequestException = exports.InvalidClientException = exports.InternalServerException = exports.ExpiredTokenException = exports.CreateTokenCommand = exports.AuthorizationPendingException = exports.AccessDeniedException = void 0;
    var middleware_host_header_1 = require_dist_cjs5();
    var middleware_logger_1 = require_dist_cjs6();
    var middleware_recursion_detection_1 = require_dist_cjs7();
    var middleware_user_agent_1 = require_dist_cjs21();
    var config_resolver_1 = require_dist_cjs23();
    var middleware_content_length_1 = require_dist_cjs24();
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_retry_1 = require_dist_cjs31();
    var smithy_client_1 = require_dist_cjs37();
    var resolveClientEndpointParameters = (options) => {
      var _a, _b;
      return {
        ...options,
        useDualstackEndpoint: (_a = options.useDualstackEndpoint) !== null && _a !== void 0 ? _a : false,
        useFipsEndpoint: (_b = options.useFipsEndpoint) !== null && _b !== void 0 ? _b : false,
        defaultSigningName: "awsssooidc"
      };
    };
    var package_default = { version: "3.387.0" };
    var util_user_agent_node_1 = require_dist_cjs44();
    var config_resolver_2 = require_dist_cjs23();
    var hash_node_1 = require_dist_cjs45();
    var middleware_retry_2 = require_dist_cjs31();
    var node_config_provider_1 = require_dist_cjs41();
    var node_http_handler_1 = require_dist_cjs35();
    var util_body_length_node_1 = require_dist_cjs46();
    var util_retry_1 = require_dist_cjs30();
    var smithy_client_2 = require_dist_cjs37();
    var url_parser_1 = require_dist_cjs26();
    var util_base64_1 = require_dist_cjs33();
    var util_utf8_1 = require_dist_cjs15();
    var util_endpoints_1 = require_dist_cjs20();
    var p = "required";
    var q = "fn";
    var r = "argv";
    var s = "ref";
    var a = "PartitionResult";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = { [p]: false, "type": "String" };
    var f = { [p]: true, "default": false, "type": "Boolean" };
    var g = { [s]: "Endpoint" };
    var h = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
    var i = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
    var j = {};
    var k = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsFIPS"] }] };
    var l = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsDualStack"] }] };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = { version: "1.0", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: "isSet", [r]: m }, { [q]: "parseURL", [r]: m, assign: "url" }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] };
    var ruleSet = _data;
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j;
      return {
        apiVersion: "2019-06-10",
        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_1.fromBase64,
        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_1.toBase64,
        disableHostPrefix: (_c = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _c !== void 0 ? _c : false,
        endpointProvider: (_d = config === null || config === void 0 ? void 0 : config.endpointProvider) !== null && _d !== void 0 ? _d : defaultEndpointResolver,
        logger: (_e = config === null || config === void 0 ? void 0 : config.logger) !== null && _e !== void 0 ? _e : new smithy_client_2.NoOpLogger(),
        serviceId: (_f = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _f !== void 0 ? _f : "SSO OIDC",
        urlParser: (_g = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _g !== void 0 ? _g : url_parser_1.parseUrl,
        utf8Decoder: (_h = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _h !== void 0 ? _h : util_utf8_1.fromUtf8,
        utf8Encoder: (_j = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _j !== void 0 ? _j : util_utf8_1.toUtf8
      };
    };
    var smithy_client_3 = require_dist_cjs37();
    var util_defaults_mode_node_1 = require_dist_cjs47();
    var smithy_client_4 = require_dist_cjs37();
    var getRuntimeConfig2 = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
      (0, smithy_client_4.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_3.loadConfigsForDefaultMode);
      const clientSharedValues = getRuntimeConfig(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: (_a = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _a !== void 0 ? _a : util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: (_b = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _b !== void 0 ? _b : (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
        maxAttempts: (_c = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _c !== void 0 ? _c : (0, node_config_provider_1.loadConfig)(middleware_retry_2.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_d = config === null || config === void 0 ? void 0 : config.region) !== null && _d !== void 0 ? _d : (0, node_config_provider_1.loadConfig)(config_resolver_2.NODE_REGION_CONFIG_OPTIONS, config_resolver_2.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_e = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _e !== void 0 ? _e : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (_f = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _f !== void 0 ? _f : (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_2.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: (_g = config === null || config === void 0 ? void 0 : config.sha256) !== null && _g !== void 0 ? _g : hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (_h = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _h !== void 0 ? _h : node_http_handler_1.streamCollector,
        useDualstackEndpoint: (_j = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _j !== void 0 ? _j : (0, node_config_provider_1.loadConfig)(config_resolver_2.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_k = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _k !== void 0 ? _k : (0, node_config_provider_1.loadConfig)(config_resolver_2.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    var SSOOIDCClient = class extends smithy_client_1.Client {
      constructor(...[configuration]) {
        const _config_0 = getRuntimeConfig2(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSOOIDCClient = SSOOIDCClient;
    var smithy_client_5 = require_dist_cjs37();
    var middleware_endpoint_2 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_6 = require_dist_cjs37();
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_7 = require_dist_cjs37();
    var smithy_client_8 = require_dist_cjs37();
    var SSOOIDCServiceException = class _SSOOIDCServiceException extends smithy_client_8.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOOIDCServiceException.prototype);
      }
    };
    var AccessDeniedException = class _AccessDeniedException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "AccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AccessDeniedException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.AccessDeniedException = AccessDeniedException;
    var AuthorizationPendingException = class _AuthorizationPendingException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "AuthorizationPendingException",
          $fault: "client",
          ...opts
        });
        this.name = "AuthorizationPendingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AuthorizationPendingException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.AuthorizationPendingException = AuthorizationPendingException;
    var ExpiredTokenException = class _ExpiredTokenException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.ExpiredTokenException = ExpiredTokenException;
    var InternalServerException = class _InternalServerException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InternalServerException",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalServerException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InternalServerException = InternalServerException;
    var InvalidClientException = class _InvalidClientException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidClientException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidClientException = InvalidClientException;
    var InvalidGrantException = class _InvalidGrantException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidGrantException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidGrantException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidGrantException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    var InvalidRequestException = class _InvalidRequestException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidRequestException = InvalidRequestException;
    var InvalidScopeException = class _InvalidScopeException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidScopeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidScopeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidScopeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidScopeException = InvalidScopeException;
    var SlowDownException = class _SlowDownException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "SlowDownException",
          $fault: "client",
          ...opts
        });
        this.name = "SlowDownException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SlowDownException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.SlowDownException = SlowDownException;
    var UnauthorizedClientException = class _UnauthorizedClientException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedClientException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.UnauthorizedClientException = UnauthorizedClientException;
    var UnsupportedGrantTypeException = class _UnsupportedGrantTypeException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedGrantTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedGrantTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedGrantTypeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.UnsupportedGrantTypeException = UnsupportedGrantTypeException;
    var InvalidClientMetadataException = class _InvalidClientMetadataException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidClientMetadataException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientMetadataException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientMetadataException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    var se_CreateTokenCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/token`;
      let body;
      body = JSON.stringify((0, smithy_client_7.take)(input, {
        clientId: [],
        clientSecret: [],
        code: [],
        deviceCode: [],
        grantType: [],
        redirectUri: [],
        refreshToken: [],
        scope: (_) => (0, smithy_client_7._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    var se_RegisterClientCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/client/register`;
      let body;
      body = JSON.stringify((0, smithy_client_7.take)(input, {
        clientName: [],
        clientType: [],
        scopes: (_) => (0, smithy_client_7._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    var se_StartDeviceAuthorizationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/device_authorization`;
      let body;
      body = JSON.stringify((0, smithy_client_7.take)(input, {
        clientId: [],
        clientSecret: [],
        startUrl: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    var de_CreateTokenCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateTokenCommandError(output, context);
      }
      const contents = (0, smithy_client_7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_7.expectNonNull)((0, smithy_client_7.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_7.take)(data, {
        accessToken: smithy_client_7.expectString,
        expiresIn: smithy_client_7.expectInt32,
        idToken: smithy_client_7.expectString,
        refreshToken: smithy_client_7.expectString,
        tokenType: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    var de_CreateTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ssooidc#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AuthorizationPendingException":
        case "com.amazonaws.ssooidc#AuthorizationPendingException":
          throw await de_AuthorizationPendingExceptionRes(parsedOutput, context);
        case "ExpiredTokenException":
        case "com.amazonaws.ssooidc#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidGrantException":
        case "com.amazonaws.ssooidc#InvalidGrantException":
          throw await de_InvalidGrantExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case "UnsupportedGrantTypeException":
        case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
          throw await de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_RegisterClientCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_RegisterClientCommandError(output, context);
      }
      const contents = (0, smithy_client_7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_7.expectNonNull)((0, smithy_client_7.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_7.take)(data, {
        authorizationEndpoint: smithy_client_7.expectString,
        clientId: smithy_client_7.expectString,
        clientIdIssuedAt: smithy_client_7.expectLong,
        clientSecret: smithy_client_7.expectString,
        clientSecretExpiresAt: smithy_client_7.expectLong,
        tokenEndpoint: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    var de_RegisterClientCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientMetadataException":
        case "com.amazonaws.ssooidc#InvalidClientMetadataException":
          throw await de_InvalidClientMetadataExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_StartDeviceAuthorizationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_StartDeviceAuthorizationCommandError(output, context);
      }
      const contents = (0, smithy_client_7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_7.expectNonNull)((0, smithy_client_7.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_7.take)(data, {
        deviceCode: smithy_client_7.expectString,
        expiresIn: smithy_client_7.expectInt32,
        interval: smithy_client_7.expectInt32,
        userCode: smithy_client_7.expectString,
        verificationUri: smithy_client_7.expectString,
        verificationUriComplete: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    var de_StartDeviceAuthorizationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var throwDefaultError = (0, smithy_client_7.withBaseException)(SSOOIDCServiceException);
    var de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_AuthorizationPendingExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new AuthorizationPendingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InternalServerExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidClientExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidClientMetadataExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientMetadataException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidGrantExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidGrantException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidScopeExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidScopeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_SlowDownExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new SlowDownException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_UnauthorizedClientExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_UnsupportedGrantTypeExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnsupportedGrantTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeMetadata = (output) => {
      var _a, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_b = (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"]) !== null && _b !== void 0 ? _b : output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
    var collectBodyString = (streamBody, context) => (0, smithy_client_7.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      var _a;
      const value = await parseBody(errorBody, context);
      value.message = (_a = value.message) !== null && _a !== void 0 ? _a : value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k2) => k2.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
    var CreateTokenCommand = class _CreateTokenCommand extends smithy_client_6.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_2.getEndpointPlugin)(configuration, _CreateTokenCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "CreateTokenCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_CreateTokenCommand(input, context);
      }
      deserialize(output, context) {
        return de_CreateTokenCommand(output, context);
      }
    };
    exports.CreateTokenCommand = CreateTokenCommand;
    var middleware_endpoint_3 = require_dist_cjs28();
    var middleware_serde_2 = require_dist_cjs27();
    var smithy_client_9 = require_dist_cjs37();
    var RegisterClientCommand = class _RegisterClientCommand extends smithy_client_9.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_2.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_3.getEndpointPlugin)(configuration, _RegisterClientCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "RegisterClientCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_RegisterClientCommand(input, context);
      }
      deserialize(output, context) {
        return de_RegisterClientCommand(output, context);
      }
    };
    var middleware_endpoint_4 = require_dist_cjs28();
    var middleware_serde_3 = require_dist_cjs27();
    var smithy_client_10 = require_dist_cjs37();
    var StartDeviceAuthorizationCommand = class _StartDeviceAuthorizationCommand extends smithy_client_10.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_3.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_4.getEndpointPlugin)(configuration, _StartDeviceAuthorizationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "StartDeviceAuthorizationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_StartDeviceAuthorizationCommand(input, context);
      }
      deserialize(output, context) {
        return de_StartDeviceAuthorizationCommand(output, context);
      }
    };
    var commands = {
      CreateTokenCommand,
      RegisterClientCommand,
      StartDeviceAuthorizationCommand
    };
    var SSOOIDC = class extends SSOOIDCClient {
    };
    (0, smithy_client_5.createAggregatedClient)(commands, SSOOIDC);
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/constants.js
var require_constants8 = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.REFRESH_MESSAGE = exports.EXPIRE_WINDOW_MS = void 0;
    exports.EXPIRE_WINDOW_MS = 5 * 60 * 1e3;
    exports.REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/getSsoOidcClient.js
var require_getSsoOidcClient = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/getSsoOidcClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSsoOidcClient = void 0;
    var client_sso_oidc_node_1 = require_client_sso_oidc_node();
    var ssoOidcClientsHash = {};
    var getSsoOidcClient = (ssoRegion) => {
      if (ssoOidcClientsHash[ssoRegion]) {
        return ssoOidcClientsHash[ssoRegion];
      }
      const ssoOidcClient = new client_sso_oidc_node_1.SSOOIDCClient({ region: ssoRegion });
      ssoOidcClientsHash[ssoRegion] = ssoOidcClient;
      return ssoOidcClient;
    };
    exports.getSsoOidcClient = getSsoOidcClient;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/getNewSsoOidcToken.js
var require_getNewSsoOidcToken = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/getNewSsoOidcToken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getNewSsoOidcToken = void 0;
    var client_sso_oidc_node_1 = require_client_sso_oidc_node();
    var getSsoOidcClient_1 = require_getSsoOidcClient();
    var getNewSsoOidcToken = (ssoToken, ssoRegion) => {
      const ssoOidcClient = (0, getSsoOidcClient_1.getSsoOidcClient)(ssoRegion);
      return ssoOidcClient.send(new client_sso_oidc_node_1.CreateTokenCommand({
        clientId: ssoToken.clientId,
        clientSecret: ssoToken.clientSecret,
        refreshToken: ssoToken.refreshToken,
        grantType: "refresh_token"
      }));
    };
    exports.getNewSsoOidcToken = getNewSsoOidcToken;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenExpiry.js
var require_validateTokenExpiry = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenExpiry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateTokenExpiry = void 0;
    var property_provider_1 = require_dist_cjs8();
    var constants_1 = require_constants8();
    var validateTokenExpiry = (token) => {
      if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new property_provider_1.TokenProviderError(`Token is expired. ${constants_1.REFRESH_MESSAGE}`, false);
      }
    };
    exports.validateTokenExpiry = validateTokenExpiry;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenKey.js
var require_validateTokenKey = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenKey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateTokenKey = void 0;
    var property_provider_1 = require_dist_cjs8();
    var constants_1 = require_constants8();
    var validateTokenKey = (key, value, forRefresh = false) => {
      if (typeof value === "undefined") {
        throw new property_provider_1.TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${constants_1.REFRESH_MESSAGE}`, false);
      }
    };
    exports.validateTokenKey = validateTokenKey;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/writeSSOTokenToFile.js
var require_writeSSOTokenToFile = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/writeSSOTokenToFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.writeSSOTokenToFile = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs40();
    var fs_1 = require("fs");
    var { writeFile } = fs_1.promises;
    var writeSSOTokenToFile = (id, ssoToken) => {
      const tokenFilepath = (0, shared_ini_file_loader_1.getSSOTokenFilepath)(id);
      const tokenString = JSON.stringify(ssoToken, null, 2);
      return writeFile(tokenFilepath, tokenString);
    };
    exports.writeSSOTokenToFile = writeSSOTokenToFile;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/fromSso.js
var require_fromSso = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/fromSso.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSso = void 0;
    var property_provider_1 = require_dist_cjs8();
    var shared_ini_file_loader_1 = require_dist_cjs40();
    var constants_1 = require_constants8();
    var getNewSsoOidcToken_1 = require_getNewSsoOidcToken();
    var validateTokenExpiry_1 = require_validateTokenExpiry();
    var validateTokenKey_1 = require_validateTokenKey();
    var writeSSOTokenToFile_1 = require_writeSSOTokenToFile();
    var lastRefreshAttemptTime = /* @__PURE__ */ new Date(0);
    var fromSso = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
      const profile = profiles[profileName];
      if (!profile) {
        throw new property_provider_1.TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
      } else if (!profile["sso_session"]) {
        throw new property_provider_1.TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
      }
      const ssoSessionName = profile["sso_session"];
      const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);
      const ssoSession = ssoSessions[ssoSessionName];
      if (!ssoSession) {
        throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);
      }
      for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {
        if (!ssoSession[ssoSessionRequiredKey]) {
          throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);
        }
      }
      const ssoStartUrl = ssoSession["sso_start_url"];
      const ssoRegion = ssoSession["sso_region"];
      let ssoToken;
      try {
        ssoToken = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoSessionName);
      } catch (e) {
        throw new property_provider_1.TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${constants_1.REFRESH_MESSAGE}`, false);
      }
      (0, validateTokenKey_1.validateTokenKey)("accessToken", ssoToken.accessToken);
      (0, validateTokenKey_1.validateTokenKey)("expiresAt", ssoToken.expiresAt);
      const { accessToken, expiresAt } = ssoToken;
      const existingToken = { token: accessToken, expiration: new Date(expiresAt) };
      if (existingToken.expiration.getTime() - Date.now() > constants_1.EXPIRE_WINDOW_MS) {
        return existingToken;
      }
      if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {
        (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
        return existingToken;
      }
      (0, validateTokenKey_1.validateTokenKey)("clientId", ssoToken.clientId, true);
      (0, validateTokenKey_1.validateTokenKey)("clientSecret", ssoToken.clientSecret, true);
      (0, validateTokenKey_1.validateTokenKey)("refreshToken", ssoToken.refreshToken, true);
      try {
        lastRefreshAttemptTime.setTime(Date.now());
        const newSsoOidcToken = await (0, getNewSsoOidcToken_1.getNewSsoOidcToken)(ssoToken, ssoRegion);
        (0, validateTokenKey_1.validateTokenKey)("accessToken", newSsoOidcToken.accessToken);
        (0, validateTokenKey_1.validateTokenKey)("expiresIn", newSsoOidcToken.expiresIn);
        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1e3);
        try {
          await (0, writeSSOTokenToFile_1.writeSSOTokenToFile)(ssoSessionName, {
            ...ssoToken,
            accessToken: newSsoOidcToken.accessToken,
            expiresAt: newTokenExpiration.toISOString(),
            refreshToken: newSsoOidcToken.refreshToken
          });
        } catch (error) {
        }
        return {
          token: newSsoOidcToken.accessToken,
          expiration: newTokenExpiration
        };
      } catch (error) {
        (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
        return existingToken;
      }
    };
    exports.fromSso = fromSso;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/fromStatic.js
var require_fromStatic3 = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs8();
    var fromStatic = ({ token }) => async () => {
      if (!token || !token.token) {
        throw new property_provider_1.TokenProviderError(`Please pass a valid token to fromStatic`, false);
      }
      return token;
    };
    exports.fromStatic = fromStatic;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/nodeProvider.js
var require_nodeProvider = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/nodeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.nodeProvider = void 0;
    var property_provider_1 = require_dist_cjs8();
    var fromSso_1 = require_fromSso();
    var nodeProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromSso_1.fromSso)(init), async () => {
      throw new property_provider_1.TokenProviderError("Could not load token from any providers", false);
    }), (token) => token.expiration !== void 0 && token.expiration.getTime() - Date.now() < 3e5, (token) => token.expiration !== void 0);
    exports.nodeProvider = nodeProvider;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/index.js
var require_dist_cjs50 = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_client_sso_oidc_node(), exports);
    tslib_1.__exportStar(require_fromSso(), exports);
    tslib_1.__exportStar(require_fromStatic3(), exports);
    tslib_1.__exportStar(require_nodeProvider(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js
var require_resolveSSOCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSSOCredentials = void 0;
    var client_sso_1 = require_dist_cjs49();
    var token_providers_1 = require_dist_cjs50();
    var property_provider_1 = require_dist_cjs8();
    var shared_ini_file_loader_1 = require_dist_cjs40();
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, profile }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      if (ssoSession) {
        try {
          const _token = await (0, token_providers_1.fromSso)({ profile })();
          token = {
            accessToken: _token.token,
            expiresAt: new Date(_token.expiration).toISOString()
          };
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(e.message, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
      } else {
        try {
          token = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoStartUrl);
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {
        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { accessToken } = token;
      const sso = ssoClient || new client_sso_1.SSOClient({ region: ssoRegion });
      let ssoResp;
      try {
        ssoResp = await sso.send(new client_sso_1.GetRoleCredentialsCommand({
          accountId: ssoAccountId,
          roleName: ssoRoleName,
          accessToken
        }));
      } catch (e) {
        throw property_provider_1.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new property_provider_1.CredentialsProviderError("SSO returns an invalid temporary credential.", SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };
    };
    exports.resolveSSOCredentials = resolveSSOCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js
var require_validateSsoProfile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateSsoProfile = void 0;
    var property_provider_1 = require_dist_cjs8();
    var validateSsoProfile = (profile) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new property_provider_1.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);
      }
      return profile;
    };
    exports.validateSsoProfile = validateSsoProfile;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js
var require_fromSSO = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSSO = void 0;
    var property_provider_1 = require_dist_cjs8();
    var shared_ini_file_loader_1 = require_dist_cjs40();
    var isSsoProfile_1 = require_isSsoProfile();
    var resolveSSOCredentials_1 = require_resolveSSOCredentials();
    var validateSsoProfile_1 = require_validateSsoProfile();
    var fromSSO = (init = {}) => async () => {
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, ssoSession } = init;
      const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        const profile = profiles[profileName];
        if (!profile) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} was not found.`);
        }
        if (!(0, isSsoProfile_1.isSsoProfile)(profile)) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);
        }
        if (profile === null || profile === void 0 ? void 0 : profile.sso_session) {
          const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);
          const session = ssoSessions[profile.sso_session];
          const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
          if (ssoRegion && ssoRegion !== session.sso_region) {
            throw new property_provider_1.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);
          }
          if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
            throw new property_provider_1.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);
          }
          profile.sso_region = session.sso_region;
          profile.sso_start_url = session.sso_start_url;
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = (0, validateSsoProfile_1.validateSsoProfile)(profile);
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl: sso_start_url,
          ssoSession: sso_session,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient,
          profile: profileName
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new property_provider_1.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"');
      } else {
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl,
          ssoSession,
          ssoAccountId,
          ssoRegion,
          ssoRoleName,
          ssoClient,
          profile: profileName
        });
      }
    };
    exports.fromSSO = fromSSO;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js
var require_types7 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs51 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromSSO(), exports);
    tslib_1.__exportStar(require_isSsoProfile(), exports);
    tslib_1.__exportStar(require_types7(), exports);
    tslib_1.__exportStar(require_validateSsoProfile(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js
var require_resolveSsoCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSsoCredentials = exports.isSsoProfile = void 0;
    var credential_provider_sso_1 = require_dist_cjs51();
    var credential_provider_sso_2 = require_dist_cjs51();
    Object.defineProperty(exports, "isSsoProfile", { enumerable: true, get: function() {
      return credential_provider_sso_2.isSsoProfile;
    } });
    var resolveSsoCredentials = (data) => {
      const { sso_start_url, sso_account_id, sso_session, sso_region, sso_role_name } = (0, credential_provider_sso_1.validateSsoProfile)(data);
      return (0, credential_provider_sso_1.fromSSO)({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoSession: sso_session,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name
      })();
    };
    exports.resolveSsoCredentials = resolveSsoCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js
var require_resolveStaticCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveStaticCredentials = exports.isStaticCredsProfile = void 0;
    var isStaticCredsProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1;
    exports.isStaticCredsProfile = isStaticCredsProfile;
    var resolveStaticCredentials = (profile) => Promise.resolve({
      accessKeyId: profile.aws_access_key_id,
      secretAccessKey: profile.aws_secret_access_key,
      sessionToken: profile.aws_session_token
    });
    exports.resolveStaticCredentials = resolveStaticCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromWebToken = void 0;
    var property_provider_1 = require_dist_cjs8();
    var fromWebToken = (init) => () => {
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        throw new property_provider_1.CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity, but no role assumption callback was provided.`, false);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
    exports.fromWebToken = fromWebToken;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromTokenFile = void 0;
    var property_provider_1 = require_dist_cjs8();
    var fs_1 = require("fs");
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    var ENV_ROLE_ARN = "AWS_ROLE_ARN";
    var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    var fromTokenFile = (init = {}) => async () => {
      var _a, _b, _c;
      const webIdentityTokenFile = (_a = init === null || init === void 0 ? void 0 : init.webIdentityTokenFile) !== null && _a !== void 0 ? _a : process.env[ENV_TOKEN_FILE];
      const roleArn = (_b = init === null || init === void 0 ? void 0 : init.roleArn) !== null && _b !== void 0 ? _b : process.env[ENV_ROLE_ARN];
      const roleSessionName = (_c = init === null || init === void 0 ? void 0 : init.roleSessionName) !== null && _c !== void 0 ? _c : process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified");
      }
      return (0, fromWebToken_1.fromWebToken)({
        ...init,
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      })();
    };
    exports.fromTokenFile = fromTokenFile;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs52 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromTokenFile(), exports);
    tslib_1.__exportStar(require_fromWebToken(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js
var require_resolveWebIdentityCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveWebIdentityCredentials = exports.isWebIdentityProfile = void 0;
    var credential_provider_web_identity_1 = require_dist_cjs52();
    var isWebIdentityProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1;
    exports.isWebIdentityProfile = isWebIdentityProfile;
    var resolveWebIdentityCredentials = async (profile, options) => (0, credential_provider_web_identity_1.fromTokenFile)({
      webIdentityTokenFile: profile.web_identity_token_file,
      roleArn: profile.role_arn,
      roleSessionName: profile.role_session_name,
      roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity
    })();
    exports.resolveWebIdentityCredentials = resolveWebIdentityCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js
var require_resolveProfileData = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProfileData = void 0;
    var property_provider_1 = require_dist_cjs8();
    var resolveAssumeRoleCredentials_1 = require_resolveAssumeRoleCredentials();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials2();
    var resolveSsoCredentials_1 = require_resolveSsoCredentials();
    var resolveStaticCredentials_1 = require_resolveStaticCredentials();
    var resolveWebIdentityCredentials_1 = require_resolveWebIdentityCredentials();
    var resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && (0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveAssumeRoleCredentials_1.isAssumeRoleProfile)(data)) {
        return (0, resolveAssumeRoleCredentials_1.resolveAssumeRoleCredentials)(profileName, profiles, options, visitedProfiles);
      }
      if ((0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveWebIdentityCredentials_1.isWebIdentityProfile)(data)) {
        return (0, resolveWebIdentityCredentials_1.resolveWebIdentityCredentials)(data, options);
      }
      if ((0, resolveProcessCredentials_1.isProcessProfile)(data)) {
        return (0, resolveProcessCredentials_1.resolveProcessCredentials)(options, profileName);
      }
      if ((0, resolveSsoCredentials_1.isSsoProfile)(data)) {
        return (0, resolveSsoCredentials_1.resolveSsoCredentials)(data);
      }
      throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);
    };
    exports.resolveProfileData = resolveProfileData;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js
var require_fromIni = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromIni = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs40();
    var resolveProfileData_1 = require_resolveProfileData();
    var fromIni = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProfileData_1.resolveProfileData)((0, shared_ini_file_loader_1.getProfileName)(init), profiles, init);
    };
    exports.fromIni = fromIni;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs53 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromIni(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js
var require_remoteProvider = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.remoteProvider = exports.ENV_IMDS_DISABLED = void 0;
    var credential_provider_imds_1 = require_dist_cjs42();
    var property_provider_1 = require_dist_cjs8();
    exports.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var remoteProvider = (init) => {
      if (process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] || process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]) {
        return (0, credential_provider_imds_1.fromContainerMetadata)(init);
      }
      if (process.env[exports.ENV_IMDS_DISABLED]) {
        return async () => {
          throw new property_provider_1.CredentialsProviderError("EC2 Instance Metadata Service access disabled");
        };
      }
      return (0, credential_provider_imds_1.fromInstanceMetadata)(init);
    };
    exports.remoteProvider = remoteProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js
var require_defaultProvider = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultProvider = void 0;
    var credential_provider_env_1 = require_dist_cjs39();
    var credential_provider_ini_1 = require_dist_cjs53();
    var credential_provider_process_1 = require_dist_cjs43();
    var credential_provider_sso_1 = require_dist_cjs51();
    var credential_provider_web_identity_1 = require_dist_cjs52();
    var property_provider_1 = require_dist_cjs8();
    var shared_ini_file_loader_1 = require_dist_cjs40();
    var remoteProvider_1 = require_remoteProvider();
    var defaultProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)(...init.profile || process.env[shared_ini_file_loader_1.ENV_PROFILE] ? [] : [(0, credential_provider_env_1.fromEnv)()], (0, credential_provider_sso_1.fromSSO)(init), (0, credential_provider_ini_1.fromIni)(init), (0, credential_provider_process_1.fromProcess)(init), (0, credential_provider_web_identity_1.fromTokenFile)(init), (0, remoteProvider_1.remoteProvider)(init), async () => {
      throw new property_provider_1.CredentialsProviderError("Could not load credentials from any providers", false);
    }), (credentials) => credentials.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, (credentials) => credentials.expiration !== void 0);
    exports.defaultProvider = defaultProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs54 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_defaultProvider(), exports);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js
var require_ruleset2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var F = "required";
    var G = "type";
    var H = "fn";
    var I = "argv";
    var J = "ref";
    var a = false;
    var b = true;
    var c = "booleanEquals";
    var d = "tree";
    var e = "stringEquals";
    var f = "sigv4";
    var g = "sts";
    var h = "us-east-1";
    var i = "endpoint";
    var j = "https://sts.{Region}.{PartitionResult#dnsSuffix}";
    var k = "error";
    var l = "getAttr";
    var m = { [F]: false, [G]: "String" };
    var n = { [F]: true, "default": false, [G]: "Boolean" };
    var o = { [J]: "Endpoint" };
    var p = { [H]: "isSet", [I]: [{ [J]: "Region" }] };
    var q = { [J]: "Region" };
    var r = { [H]: "aws.partition", [I]: [q], "assign": "PartitionResult" };
    var s = { [J]: "UseFIPS" };
    var t = { [J]: "UseDualStack" };
    var u = { "url": "https://sts.amazonaws.com", "properties": { "authSchemes": [{ "name": f, "signingName": g, "signingRegion": h }] }, "headers": {} };
    var v = {};
    var w = { "conditions": [{ [H]: e, [I]: [q, "aws-global"] }], [i]: u, [G]: i };
    var x = { [H]: c, [I]: [s, true] };
    var y = { [H]: c, [I]: [t, true] };
    var z = { [H]: c, [I]: [true, { [H]: l, [I]: [{ [J]: "PartitionResult" }, "supportsFIPS"] }] };
    var A = { [J]: "PartitionResult" };
    var B = { [H]: c, [I]: [true, { [H]: l, [I]: [A, "supportsDualStack"] }] };
    var C = [{ [H]: "isSet", [I]: [o] }];
    var D = [x];
    var E = [y];
    var _data = { version: "1.0", parameters: { Region: m, UseDualStack: n, UseFIPS: n, Endpoint: m, UseGlobalEndpoint: n }, rules: [{ conditions: [{ [H]: c, [I]: [{ [J]: "UseGlobalEndpoint" }, b] }, { [H]: "not", [I]: C }, p, r, { [H]: c, [I]: [s, a] }, { [H]: c, [I]: [t, a] }], [G]: d, rules: [{ conditions: [{ [H]: e, [I]: [q, "ap-northeast-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "ap-south-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "ap-southeast-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "ap-southeast-2"] }], endpoint: u, [G]: i }, w, { conditions: [{ [H]: e, [I]: [q, "ca-central-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "eu-central-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "eu-north-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "eu-west-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "eu-west-2"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "eu-west-3"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "sa-east-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, h] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "us-east-2"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "us-west-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "us-west-2"] }], endpoint: u, [G]: i }, { endpoint: { url: j, properties: { authSchemes: [{ name: f, signingName: g, signingRegion: "{Region}" }] }, headers: v }, [G]: i }] }, { conditions: C, [G]: d, rules: [{ conditions: D, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [G]: k }, { conditions: E, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [G]: k }, { endpoint: { url: o, properties: v, headers: v }, [G]: i }] }, { conditions: [p], [G]: d, rules: [{ conditions: [r], [G]: d, rules: [{ conditions: [x, y], [G]: d, rules: [{ conditions: [z, B], [G]: d, rules: [{ endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: i }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [G]: k }] }, { conditions: D, [G]: d, rules: [{ conditions: [z], [G]: d, rules: [{ conditions: [{ [H]: e, [I]: ["aws-us-gov", { [H]: l, [I]: [A, "name"] }] }], endpoint: { url: "https://sts.{Region}.amazonaws.com", properties: v, headers: v }, [G]: i }, { endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}", properties: v, headers: v }, [G]: i }] }, { error: "FIPS is enabled but this partition does not support FIPS", [G]: k }] }, { conditions: E, [G]: d, rules: [{ conditions: [B], [G]: d, rules: [{ endpoint: { url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: i }] }, { error: "DualStack is enabled but this partition does not support DualStack", [G]: k }] }, w, { endpoint: { url: j, properties: v, headers: v }, [G]: i }] }] }, { error: "Invalid Configuration: Missing Region", [G]: k }] };
    exports.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs20();
    var ruleset_1 = require_ruleset2();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs37();
    var url_parser_1 = require_dist_cjs26();
    var util_base64_1 = require_dist_cjs33();
    var util_utf8_1 = require_dist_cjs15();
    var endpointResolver_1 = require_endpointResolver2();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2011-06-15",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      extensions: config?.extensions ?? [],
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "STS",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js
var require_runtimeConfig2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var credential_provider_node_1 = require_dist_cjs54();
    var util_user_agent_node_1 = require_dist_cjs44();
    var config_resolver_1 = require_dist_cjs23();
    var hash_node_1 = require_dist_cjs45();
    var middleware_retry_1 = require_dist_cjs31();
    var node_config_provider_1 = require_dist_cjs41();
    var node_http_handler_1 = require_dist_cjs35();
    var util_body_length_node_1 = require_dist_cjs46();
    var util_retry_1 = require_dist_cjs30();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs37();
    var util_defaults_mode_node_1 = require_dist_cjs47();
    var smithy_client_2 = require_dist_cjs37();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, defaultStsRoleAssumers_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeExtensions.js
var require_runtimeExtensions2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/runtimeExtensions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveRuntimeExtensions = void 0;
    var region_config_resolver_1 = require_dist_cjs48();
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs37();
    var asPartial = (t) => t;
    var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, region_config_resolver_1.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, smithy_client_1.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, protocol_http_1.getHttpHandlerExtensionConfiguration)(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, region_config_resolver_1.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, smithy_client_1.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, protocol_http_1.resolveHttpHandlerRuntimeConfig)(extensionConfiguration)
      };
    };
    exports.resolveRuntimeExtensions = resolveRuntimeExtensions;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js
var require_STSClient = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSClient = exports.__Client = void 0;
    var middleware_host_header_1 = require_dist_cjs5();
    var middleware_logger_1 = require_dist_cjs6();
    var middleware_recursion_detection_1 = require_dist_cjs7();
    var middleware_sdk_sts_1 = require_dist_cjs38();
    var middleware_user_agent_1 = require_dist_cjs21();
    var config_resolver_1 = require_dist_cjs23();
    var middleware_content_length_1 = require_dist_cjs24();
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_retry_1 = require_dist_cjs31();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var EndpointParameters_1 = require_EndpointParameters2();
    var runtimeConfig_1 = require_runtimeConfig2();
    var runtimeExtensions_1 = require_runtimeExtensions2();
    var STSClient = class _STSClient extends smithy_client_1.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_sdk_sts_1.resolveStsAuthConfig)(_config_5, { stsClientCtor: _STSClient });
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        const _config_8 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_7, configuration?.extensions || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.STSClient = STSClient;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js
var require_AssumeRoleWithSAMLCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleWithSAMLCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithSAMLCommand = class _AssumeRoleWithSAMLCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssumeRoleWithSAMLCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithSAMLCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLResponseFilterSensitiveLog,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "AWSSecurityTokenServiceV20110615",
            operation: "AssumeRoleWithSAML"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleWithSAMLCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleWithSAMLCommand)(output, context);
      }
    };
    exports.AssumeRoleWithSAMLCommand = AssumeRoleWithSAMLCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js
var require_DecodeAuthorizationMessageCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DecodeAuthorizationMessageCommand = exports.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs18();
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_query_1 = require_Aws_query();
    var DecodeAuthorizationMessageCommand = class _DecodeAuthorizationMessageCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DecodeAuthorizationMessageCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "DecodeAuthorizationMessageCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "AWSSecurityTokenServiceV20110615",
            operation: "DecodeAuthorizationMessage"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DecodeAuthorizationMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DecodeAuthorizationMessageCommand)(output, context);
      }
    };
    exports.DecodeAuthorizationMessageCommand = DecodeAuthorizationMessageCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js
var require_GetAccessKeyInfoCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAccessKeyInfoCommand = exports.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs18();
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_query_1 = require_Aws_query();
    var GetAccessKeyInfoCommand = class _GetAccessKeyInfoCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetAccessKeyInfoCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "GetAccessKeyInfoCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "AWSSecurityTokenServiceV20110615",
            operation: "GetAccessKeyInfo"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetAccessKeyInfoCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetAccessKeyInfoCommand)(output, context);
      }
    };
    exports.GetAccessKeyInfoCommand = GetAccessKeyInfoCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js
var require_GetCallerIdentityCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetCallerIdentityCommand = exports.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs18();
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_query_1 = require_Aws_query();
    var GetCallerIdentityCommand = class _GetCallerIdentityCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetCallerIdentityCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "GetCallerIdentityCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "AWSSecurityTokenServiceV20110615",
            operation: "GetCallerIdentity"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetCallerIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetCallerIdentityCommand)(output, context);
      }
    };
    exports.GetCallerIdentityCommand = GetCallerIdentityCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js
var require_GetFederationTokenCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetFederationTokenCommand = exports.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs18();
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetFederationTokenCommand = class _GetFederationTokenCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetFederationTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "GetFederationTokenCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetFederationTokenResponseFilterSensitiveLog,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "AWSSecurityTokenServiceV20110615",
            operation: "GetFederationToken"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetFederationTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetFederationTokenCommand)(output, context);
      }
    };
    exports.GetFederationTokenCommand = GetFederationTokenCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js
var require_GetSessionTokenCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSessionTokenCommand = exports.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs18();
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetSessionTokenCommand = class _GetSessionTokenCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetSessionTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "GetSessionTokenCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetSessionTokenResponseFilterSensitiveLog,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "AWSSecurityTokenServiceV20110615",
            operation: "GetSessionToken"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetSessionTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetSessionTokenCommand)(output, context);
      }
    };
    exports.GetSessionTokenCommand = GetSessionTokenCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STS.js
var require_STS = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/STS.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STS = void 0;
    var smithy_client_1 = require_dist_cjs37();
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithSAMLCommand_1 = require_AssumeRoleWithSAMLCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var DecodeAuthorizationMessageCommand_1 = require_DecodeAuthorizationMessageCommand();
    var GetAccessKeyInfoCommand_1 = require_GetAccessKeyInfoCommand();
    var GetCallerIdentityCommand_1 = require_GetCallerIdentityCommand();
    var GetFederationTokenCommand_1 = require_GetFederationTokenCommand();
    var GetSessionTokenCommand_1 = require_GetSessionTokenCommand();
    var STSClient_1 = require_STSClient();
    var commands = {
      AssumeRoleCommand: AssumeRoleCommand_1.AssumeRoleCommand,
      AssumeRoleWithSAMLCommand: AssumeRoleWithSAMLCommand_1.AssumeRoleWithSAMLCommand,
      AssumeRoleWithWebIdentityCommand: AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand,
      DecodeAuthorizationMessageCommand: DecodeAuthorizationMessageCommand_1.DecodeAuthorizationMessageCommand,
      GetAccessKeyInfoCommand: GetAccessKeyInfoCommand_1.GetAccessKeyInfoCommand,
      GetCallerIdentityCommand: GetCallerIdentityCommand_1.GetCallerIdentityCommand,
      GetFederationTokenCommand: GetFederationTokenCommand_1.GetFederationTokenCommand,
      GetSessionTokenCommand: GetSessionTokenCommand_1.GetSessionTokenCommand
    };
    var STS = class extends STSClient_1.STSClient {
    };
    exports.STS = STS;
    (0, smithy_client_1.createAggregatedClient)(commands, STS);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js
var require_commands2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AssumeRoleCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithSAMLCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithWebIdentityCommand(), exports);
    tslib_1.__exportStar(require_DecodeAuthorizationMessageCommand(), exports);
    tslib_1.__exportStar(require_GetAccessKeyInfoCommand(), exports);
    tslib_1.__exportStar(require_GetCallerIdentityCommand(), exports);
    tslib_1.__exportStar(require_GetFederationTokenCommand(), exports);
    tslib_1.__exportStar(require_GetSessionTokenCommand(), exports);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js
var require_models2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_02(), exports);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js
var require_defaultRoleAssumers = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var STSClient_1 = require_STSClient();
    var getCustomizableStsClientCtor = (baseCtor, customizations) => {
      if (!customizations)
        return baseCtor;
      else
        return class CustomizableSTSClient extends baseCtor {
          constructor(config) {
            super(config);
            for (const customization of customizations) {
              this.middlewareStack.use(customization);
            }
          }
        };
    };
    var getDefaultRoleAssumer = (stsOptions = {}, stsPlugins) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumer)(stsOptions, getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins));
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}, stsPlugins) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumerWithWebIdentity)(stsOptions, getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins));
    exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: (0, exports.getDefaultRoleAssumer)(input),
      roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input),
      ...input
    });
    exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/index.js
var require_dist_cjs55 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_STSClient(), exports);
    tslib_1.__exportStar(require_STS(), exports);
    tslib_1.__exportStar(require_commands2(), exports);
    tslib_1.__exportStar(require_models2(), exports);
    tslib_1.__exportStar(require_defaultRoleAssumers(), exports);
    var STSServiceException_1 = require_STSServiceException();
    Object.defineProperty(exports, "STSServiceException", { enumerable: true, get: function() {
      return STSServiceException_1.STSServiceException;
    } });
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/ruleset.js
var require_ruleset3 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var u = "required";
    var v = "fn";
    var w = "argv";
    var x = "ref";
    var a = "isSet";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = "PartitionResult";
    var f = "getAttr";
    var g = "stringEquals";
    var h = { [u]: false, "type": "String" };
    var i = { [u]: true, "default": false, "type": "Boolean" };
    var j = { [x]: "Endpoint" };
    var k = { [v]: "booleanEquals", [w]: [{ [x]: "UseFIPS" }, true] };
    var l = { [v]: "booleanEquals", [w]: [{ [x]: "UseDualStack" }, true] };
    var m = {};
    var n = { [x]: "Region" };
    var o = { [v]: "booleanEquals", [w]: [true, { [v]: f, [w]: [{ [x]: e }, "supportsFIPS"] }] };
    var p = { [x]: e };
    var q = { [v]: "booleanEquals", [w]: [true, { [v]: f, [w]: [p, "supportsDualStack"] }] };
    var r = [k];
    var s = [l];
    var t = [n];
    var _data = { version: "1.0", parameters: { Region: h, UseDualStack: i, UseFIPS: i, Endpoint: h }, rules: [{ conditions: [{ [v]: a, [w]: [j] }], type: b, rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: j, properties: m, headers: m }, type: d }] }, { conditions: [{ [v]: a, [w]: t }], type: b, rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: e }], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ conditions: [o, q], type: b, rules: [{ endpoint: { url: "https://dynamodb-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: r, type: b, rules: [{ conditions: [o], type: b, rules: [{ conditions: [{ [v]: g, [w]: ["aws-us-gov", { [v]: f, [w]: [p, "name"] }] }], endpoint: { url: "https://dynamodb.{Region}.amazonaws.com", properties: m, headers: m }, type: d }, { endpoint: { url: "https://dynamodb-fips.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: d }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: s, type: b, rules: [{ conditions: [q], type: b, rules: [{ endpoint: { url: "https://dynamodb.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { conditions: [{ [v]: g, [w]: [n, "local"] }], endpoint: { url: "http://localhost:8000", properties: { authSchemes: [{ name: "sigv4", signingName: "dynamodb", signingRegion: "us-east-1" }] }, headers: m }, type: d }, { endpoint: { url: "https://dynamodb.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: d }] }] }, { error: "Invalid Configuration: Missing Region", type: c }] };
    exports.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver3 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs20();
    var ruleset_1 = require_ruleset3();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared3 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs37();
    var url_parser_1 = require_dist_cjs26();
    var util_base64_1 = require_dist_cjs33();
    var util_utf8_1 = require_dist_cjs15();
    var endpointResolver_1 = require_endpointResolver3();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2012-08-10",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      extensions: config?.extensions ?? [],
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "DynamoDB",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.js
var require_runtimeConfig3 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package());
    var client_sts_1 = require_dist_cjs55();
    var credential_provider_node_1 = require_dist_cjs54();
    var middleware_endpoint_discovery_1 = require_dist_cjs4();
    var util_user_agent_node_1 = require_dist_cjs44();
    var config_resolver_1 = require_dist_cjs23();
    var hash_node_1 = require_dist_cjs45();
    var middleware_retry_1 = require_dist_cjs31();
    var node_config_provider_1 = require_dist_cjs41();
    var node_http_handler_1 = require_dist_cjs35();
    var util_body_length_node_1 = require_dist_cjs46();
    var util_retry_1 = require_dist_cjs30();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs37();
    var util_defaults_mode_node_1 = require_dist_cjs47();
    var smithy_client_2 = require_dist_cjs37();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        endpointDiscoveryEnabledProvider: config?.endpointDiscoveryEnabledProvider ?? (0, node_config_provider_1.loadConfig)(middleware_endpoint_discovery_1.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeExtensions.js
var require_runtimeExtensions3 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeExtensions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveRuntimeExtensions = void 0;
    var region_config_resolver_1 = require_dist_cjs48();
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs37();
    var asPartial = (t) => t;
    var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, region_config_resolver_1.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, smithy_client_1.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, protocol_http_1.getHttpHandlerExtensionConfiguration)(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, region_config_resolver_1.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, smithy_client_1.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, protocol_http_1.resolveHttpHandlerRuntimeConfig)(extensionConfiguration)
      };
    };
    exports.resolveRuntimeExtensions = resolveRuntimeExtensions;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDBClient.js
var require_DynamoDBClient = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDBClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DynamoDBClient = exports.__Client = void 0;
    var middleware_endpoint_discovery_1 = require_dist_cjs4();
    var middleware_host_header_1 = require_dist_cjs5();
    var middleware_logger_1 = require_dist_cjs6();
    var middleware_recursion_detection_1 = require_dist_cjs7();
    var middleware_signing_1 = require_dist_cjs18();
    var middleware_user_agent_1 = require_dist_cjs21();
    var config_resolver_1 = require_dist_cjs23();
    var middleware_content_length_1 = require_dist_cjs24();
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_retry_1 = require_dist_cjs31();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var DescribeEndpointsCommand_1 = require_DescribeEndpointsCommand();
    var EndpointParameters_1 = require_EndpointParameters();
    var runtimeConfig_1 = require_runtimeConfig3();
    var runtimeExtensions_1 = require_runtimeExtensions3();
    var DynamoDBClient2 = class extends smithy_client_1.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        const _config_8 = (0, middleware_endpoint_discovery_1.resolveEndpointDiscoveryConfig)(_config_7, {
          endpointDiscoveryCommandCtor: DescribeEndpointsCommand_1.DescribeEndpointsCommand
        });
        const _config_9 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_8, configuration?.extensions || []);
        super(_config_9);
        this.config = _config_9;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.DynamoDBClient = DynamoDBClient2;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js
var require_BatchExecuteStatementCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchExecuteStatementCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchExecuteStatementCommand = class _BatchExecuteStatementCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _BatchExecuteStatementCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "BatchExecuteStatementCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "BatchExecuteStatement"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_BatchExecuteStatementCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_BatchExecuteStatementCommand)(output, context);
      }
    };
    exports.BatchExecuteStatementCommand = BatchExecuteStatementCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchGetItemCommand.js
var require_BatchGetItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchGetItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchGetItemCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchGetItemCommand = class _BatchGetItemCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _BatchGetItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "BatchGetItemCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "BatchGetItem"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_BatchGetItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_BatchGetItemCommand)(output, context);
      }
    };
    exports.BatchGetItemCommand = BatchGetItemCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchWriteItemCommand.js
var require_BatchWriteItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchWriteItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchWriteItemCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchWriteItemCommand = class _BatchWriteItemCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _BatchWriteItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "BatchWriteItemCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "BatchWriteItem"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_BatchWriteItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_BatchWriteItemCommand)(output, context);
      }
    };
    exports.BatchWriteItemCommand = BatchWriteItemCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateBackupCommand.js
var require_CreateBackupCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateBackupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateBackupCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateBackupCommand = class _CreateBackupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateBackupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "CreateBackupCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "CreateBackup"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_CreateBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_CreateBackupCommand)(output, context);
      }
    };
    exports.CreateBackupCommand = CreateBackupCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateGlobalTableCommand.js
var require_CreateGlobalTableCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateGlobalTableCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateGlobalTableCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateGlobalTableCommand = class _CreateGlobalTableCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateGlobalTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "CreateGlobalTableCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "CreateGlobalTable"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_CreateGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_CreateGlobalTableCommand)(output, context);
      }
    };
    exports.CreateGlobalTableCommand = CreateGlobalTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateTableCommand.js
var require_CreateTableCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateTableCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateTableCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateTableCommand = class _CreateTableCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "CreateTableCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "CreateTable"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_CreateTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_CreateTableCommand)(output, context);
      }
    };
    exports.CreateTableCommand = CreateTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteBackupCommand.js
var require_DeleteBackupCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteBackupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteBackupCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteBackupCommand = class _DeleteBackupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteBackupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DeleteBackupCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "DeleteBackup"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DeleteBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DeleteBackupCommand)(output, context);
      }
    };
    exports.DeleteBackupCommand = DeleteBackupCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteItemCommand.js
var require_DeleteItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteItemCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteItemCommand = class _DeleteItemCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DeleteItemCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "DeleteItem"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DeleteItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DeleteItemCommand)(output, context);
      }
    };
    exports.DeleteItemCommand = DeleteItemCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteTableCommand.js
var require_DeleteTableCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteTableCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteTableCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteTableCommand = class _DeleteTableCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DeleteTableCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "DeleteTable"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DeleteTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DeleteTableCommand)(output, context);
      }
    };
    exports.DeleteTableCommand = DeleteTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeBackupCommand.js
var require_DescribeBackupCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeBackupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeBackupCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeBackupCommand = class _DescribeBackupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeBackupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeBackupCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "DescribeBackup"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeBackupCommand)(output, context);
      }
    };
    exports.DescribeBackupCommand = DescribeBackupCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContinuousBackupsCommand.js
var require_DescribeContinuousBackupsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContinuousBackupsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeContinuousBackupsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeContinuousBackupsCommand = class _DescribeContinuousBackupsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeContinuousBackupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeContinuousBackupsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "DescribeContinuousBackups"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeContinuousBackupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeContinuousBackupsCommand)(output, context);
      }
    };
    exports.DescribeContinuousBackupsCommand = DescribeContinuousBackupsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContributorInsightsCommand.js
var require_DescribeContributorInsightsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContributorInsightsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeContributorInsightsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeContributorInsightsCommand = class _DescribeContributorInsightsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeContributorInsightsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeContributorInsightsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "DescribeContributorInsights"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeContributorInsightsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeContributorInsightsCommand)(output, context);
      }
    };
    exports.DescribeContributorInsightsCommand = DescribeContributorInsightsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeExportCommand.js
var require_DescribeExportCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeExportCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeExportCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeExportCommand = class _DescribeExportCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeExportCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeExportCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "DescribeExport"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeExportCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeExportCommand)(output, context);
      }
    };
    exports.DescribeExportCommand = DescribeExportCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableCommand.js
var require_DescribeGlobalTableCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeGlobalTableCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeGlobalTableCommand = class _DescribeGlobalTableCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeGlobalTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeGlobalTableCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "DescribeGlobalTable"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeGlobalTableCommand)(output, context);
      }
    };
    exports.DescribeGlobalTableCommand = DescribeGlobalTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableSettingsCommand.js
var require_DescribeGlobalTableSettingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeGlobalTableSettingsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeGlobalTableSettingsCommand = class _DescribeGlobalTableSettingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeGlobalTableSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeGlobalTableSettingsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "DescribeGlobalTableSettings"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeGlobalTableSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeGlobalTableSettingsCommand)(output, context);
      }
    };
    exports.DescribeGlobalTableSettingsCommand = DescribeGlobalTableSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeImportCommand.js
var require_DescribeImportCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeImportCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeImportCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeImportCommand = class _DescribeImportCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeImportCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeImportCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "DescribeImport"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeImportCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeImportCommand)(output, context);
      }
    };
    exports.DescribeImportCommand = DescribeImportCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeKinesisStreamingDestinationCommand.js
var require_DescribeKinesisStreamingDestinationCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeKinesisStreamingDestinationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeKinesisStreamingDestinationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeKinesisStreamingDestinationCommand = class _DescribeKinesisStreamingDestinationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeKinesisStreamingDestinationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeKinesisStreamingDestinationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "DescribeKinesisStreamingDestination"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeKinesisStreamingDestinationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeKinesisStreamingDestinationCommand)(output, context);
      }
    };
    exports.DescribeKinesisStreamingDestinationCommand = DescribeKinesisStreamingDestinationCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeLimitsCommand.js
var require_DescribeLimitsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeLimitsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeLimitsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeLimitsCommand = class _DescribeLimitsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeLimitsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeLimitsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "DescribeLimits"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeLimitsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeLimitsCommand)(output, context);
      }
    };
    exports.DescribeLimitsCommand = DescribeLimitsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableCommand.js
var require_DescribeTableCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeTableCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTableCommand = class _DescribeTableCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeTableCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "DescribeTable"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeTableCommand)(output, context);
      }
    };
    exports.DescribeTableCommand = DescribeTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableReplicaAutoScalingCommand.js
var require_DescribeTableReplicaAutoScalingCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableReplicaAutoScalingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeTableReplicaAutoScalingCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTableReplicaAutoScalingCommand = class _DescribeTableReplicaAutoScalingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeTableReplicaAutoScalingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeTableReplicaAutoScalingCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "DescribeTableReplicaAutoScaling"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeTableReplicaAutoScalingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeTableReplicaAutoScalingCommand)(output, context);
      }
    };
    exports.DescribeTableReplicaAutoScalingCommand = DescribeTableReplicaAutoScalingCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTimeToLiveCommand.js
var require_DescribeTimeToLiveCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTimeToLiveCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeTimeToLiveCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTimeToLiveCommand = class _DescribeTimeToLiveCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeTimeToLiveCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeTimeToLiveCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "DescribeTimeToLive"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeTimeToLiveCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeTimeToLiveCommand)(output, context);
      }
    };
    exports.DescribeTimeToLiveCommand = DescribeTimeToLiveCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DisableKinesisStreamingDestinationCommand.js
var require_DisableKinesisStreamingDestinationCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DisableKinesisStreamingDestinationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DisableKinesisStreamingDestinationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DisableKinesisStreamingDestinationCommand = class _DisableKinesisStreamingDestinationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DisableKinesisStreamingDestinationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DisableKinesisStreamingDestinationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "DisableKinesisStreamingDestination"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DisableKinesisStreamingDestinationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DisableKinesisStreamingDestinationCommand)(output, context);
      }
    };
    exports.DisableKinesisStreamingDestinationCommand = DisableKinesisStreamingDestinationCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/EnableKinesisStreamingDestinationCommand.js
var require_EnableKinesisStreamingDestinationCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/EnableKinesisStreamingDestinationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EnableKinesisStreamingDestinationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var EnableKinesisStreamingDestinationCommand = class _EnableKinesisStreamingDestinationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _EnableKinesisStreamingDestinationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "EnableKinesisStreamingDestinationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "EnableKinesisStreamingDestination"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_EnableKinesisStreamingDestinationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_EnableKinesisStreamingDestinationCommand)(output, context);
      }
    };
    exports.EnableKinesisStreamingDestinationCommand = EnableKinesisStreamingDestinationCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js
var require_ExecuteStatementCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExecuteStatementCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExecuteStatementCommand = class _ExecuteStatementCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ExecuteStatementCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ExecuteStatementCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "ExecuteStatement"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ExecuteStatementCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ExecuteStatementCommand)(output, context);
      }
    };
    exports.ExecuteStatementCommand = ExecuteStatementCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js
var require_ExecuteTransactionCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExecuteTransactionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExecuteTransactionCommand = class _ExecuteTransactionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ExecuteTransactionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ExecuteTransactionCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "ExecuteTransaction"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ExecuteTransactionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ExecuteTransactionCommand)(output, context);
      }
    };
    exports.ExecuteTransactionCommand = ExecuteTransactionCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExportTableToPointInTimeCommand.js
var require_ExportTableToPointInTimeCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExportTableToPointInTimeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExportTableToPointInTimeCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExportTableToPointInTimeCommand = class _ExportTableToPointInTimeCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ExportTableToPointInTimeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ExportTableToPointInTimeCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "ExportTableToPointInTime"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ExportTableToPointInTimeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ExportTableToPointInTimeCommand)(output, context);
      }
    };
    exports.ExportTableToPointInTimeCommand = ExportTableToPointInTimeCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/GetItemCommand.js
var require_GetItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/GetItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetItemCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var GetItemCommand = class _GetItemCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "GetItemCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "GetItem"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_GetItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_GetItemCommand)(output, context);
      }
    };
    exports.GetItemCommand = GetItemCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ImportTableCommand.js
var require_ImportTableCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ImportTableCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ImportTableCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ImportTableCommand = class _ImportTableCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ImportTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ImportTableCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "ImportTable"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ImportTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ImportTableCommand)(output, context);
      }
    };
    exports.ImportTableCommand = ImportTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListBackupsCommand.js
var require_ListBackupsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListBackupsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListBackupsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListBackupsCommand = class _ListBackupsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListBackupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListBackupsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "ListBackups"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListBackupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListBackupsCommand)(output, context);
      }
    };
    exports.ListBackupsCommand = ListBackupsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListContributorInsightsCommand.js
var require_ListContributorInsightsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListContributorInsightsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListContributorInsightsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListContributorInsightsCommand = class _ListContributorInsightsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListContributorInsightsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListContributorInsightsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "ListContributorInsights"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListContributorInsightsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListContributorInsightsCommand)(output, context);
      }
    };
    exports.ListContributorInsightsCommand = ListContributorInsightsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListExportsCommand.js
var require_ListExportsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListExportsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListExportsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListExportsCommand = class _ListExportsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListExportsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListExportsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "ListExports"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListExportsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListExportsCommand)(output, context);
      }
    };
    exports.ListExportsCommand = ListExportsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListGlobalTablesCommand.js
var require_ListGlobalTablesCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListGlobalTablesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListGlobalTablesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListGlobalTablesCommand = class _ListGlobalTablesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListGlobalTablesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListGlobalTablesCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "ListGlobalTables"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListGlobalTablesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListGlobalTablesCommand)(output, context);
      }
    };
    exports.ListGlobalTablesCommand = ListGlobalTablesCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListImportsCommand.js
var require_ListImportsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListImportsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListImportsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListImportsCommand = class _ListImportsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListImportsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListImportsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "ListImports"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListImportsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListImportsCommand)(output, context);
      }
    };
    exports.ListImportsCommand = ListImportsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTablesCommand.js
var require_ListTablesCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTablesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListTablesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListTablesCommand = class _ListTablesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListTablesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListTablesCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "ListTables"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListTablesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListTablesCommand)(output, context);
      }
    };
    exports.ListTablesCommand = ListTablesCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTagsOfResourceCommand.js
var require_ListTagsOfResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTagsOfResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListTagsOfResourceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListTagsOfResourceCommand = class _ListTagsOfResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListTagsOfResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListTagsOfResourceCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "ListTagsOfResource"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListTagsOfResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListTagsOfResourceCommand)(output, context);
      }
    };
    exports.ListTagsOfResourceCommand = ListTagsOfResourceCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/PutItemCommand.js
var require_PutItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/PutItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutItemCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var PutItemCommand = class _PutItemCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "PutItemCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "PutItem"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_PutItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_PutItemCommand)(output, context);
      }
    };
    exports.PutItemCommand = PutItemCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/QueryCommand.js
var require_QueryCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/QueryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueryCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var QueryCommand = class _QueryCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _QueryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "QueryCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "Query"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_QueryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_QueryCommand)(output, context);
      }
    };
    exports.QueryCommand = QueryCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableFromBackupCommand.js
var require_RestoreTableFromBackupCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableFromBackupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RestoreTableFromBackupCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var RestoreTableFromBackupCommand = class _RestoreTableFromBackupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RestoreTableFromBackupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "RestoreTableFromBackupCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "RestoreTableFromBackup"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_RestoreTableFromBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_RestoreTableFromBackupCommand)(output, context);
      }
    };
    exports.RestoreTableFromBackupCommand = RestoreTableFromBackupCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableToPointInTimeCommand.js
var require_RestoreTableToPointInTimeCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableToPointInTimeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RestoreTableToPointInTimeCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var RestoreTableToPointInTimeCommand = class _RestoreTableToPointInTimeCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RestoreTableToPointInTimeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "RestoreTableToPointInTimeCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "RestoreTableToPointInTime"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_RestoreTableToPointInTimeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_RestoreTableToPointInTimeCommand)(output, context);
      }
    };
    exports.RestoreTableToPointInTimeCommand = RestoreTableToPointInTimeCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ScanCommand.js
var require_ScanCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ScanCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ScanCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ScanCommand = class _ScanCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ScanCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ScanCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "Scan"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ScanCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ScanCommand)(output, context);
      }
    };
    exports.ScanCommand = ScanCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TagResourceCommand.js
var require_TagResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TagResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TagResourceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TagResourceCommand = class _TagResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _TagResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "TagResourceCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "TagResource"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_TagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_TagResourceCommand)(output, context);
      }
    };
    exports.TagResourceCommand = TagResourceCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactGetItemsCommand.js
var require_TransactGetItemsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactGetItemsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransactGetItemsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TransactGetItemsCommand = class _TransactGetItemsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _TransactGetItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "TransactGetItemsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "TransactGetItems"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_TransactGetItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_TransactGetItemsCommand)(output, context);
      }
    };
    exports.TransactGetItemsCommand = TransactGetItemsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactWriteItemsCommand.js
var require_TransactWriteItemsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactWriteItemsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransactWriteItemsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TransactWriteItemsCommand = class _TransactWriteItemsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _TransactWriteItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "TransactWriteItemsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "TransactWriteItems"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_TransactWriteItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_TransactWriteItemsCommand)(output, context);
      }
    };
    exports.TransactWriteItemsCommand = TransactWriteItemsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UntagResourceCommand.js
var require_UntagResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UntagResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UntagResourceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UntagResourceCommand = class _UntagResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UntagResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UntagResourceCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "UntagResource"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UntagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UntagResourceCommand)(output, context);
      }
    };
    exports.UntagResourceCommand = UntagResourceCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContinuousBackupsCommand.js
var require_UpdateContinuousBackupsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContinuousBackupsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateContinuousBackupsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateContinuousBackupsCommand = class _UpdateContinuousBackupsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateContinuousBackupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateContinuousBackupsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "UpdateContinuousBackups"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateContinuousBackupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateContinuousBackupsCommand)(output, context);
      }
    };
    exports.UpdateContinuousBackupsCommand = UpdateContinuousBackupsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContributorInsightsCommand.js
var require_UpdateContributorInsightsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContributorInsightsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateContributorInsightsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateContributorInsightsCommand = class _UpdateContributorInsightsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateContributorInsightsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateContributorInsightsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "UpdateContributorInsights"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateContributorInsightsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateContributorInsightsCommand)(output, context);
      }
    };
    exports.UpdateContributorInsightsCommand = UpdateContributorInsightsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableCommand.js
var require_UpdateGlobalTableCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateGlobalTableCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateGlobalTableCommand = class _UpdateGlobalTableCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateGlobalTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateGlobalTableCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "UpdateGlobalTable"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateGlobalTableCommand)(output, context);
      }
    };
    exports.UpdateGlobalTableCommand = UpdateGlobalTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableSettingsCommand.js
var require_UpdateGlobalTableSettingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateGlobalTableSettingsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateGlobalTableSettingsCommand = class _UpdateGlobalTableSettingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateGlobalTableSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateGlobalTableSettingsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "UpdateGlobalTableSettings"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateGlobalTableSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateGlobalTableSettingsCommand)(output, context);
      }
    };
    exports.UpdateGlobalTableSettingsCommand = UpdateGlobalTableSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateItemCommand.js
var require_UpdateItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateItemCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateItemCommand = class _UpdateItemCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateItemCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "UpdateItem"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateItemCommand)(output, context);
      }
    };
    exports.UpdateItemCommand = UpdateItemCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableCommand.js
var require_UpdateTableCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateTableCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTableCommand = class _UpdateTableCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateTableCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "UpdateTable"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateTableCommand)(output, context);
      }
    };
    exports.UpdateTableCommand = UpdateTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableReplicaAutoScalingCommand.js
var require_UpdateTableReplicaAutoScalingCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableReplicaAutoScalingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateTableReplicaAutoScalingCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTableReplicaAutoScalingCommand = class _UpdateTableReplicaAutoScalingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateTableReplicaAutoScalingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateTableReplicaAutoScalingCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "UpdateTableReplicaAutoScaling"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateTableReplicaAutoScalingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateTableReplicaAutoScalingCommand)(output, context);
      }
    };
    exports.UpdateTableReplicaAutoScalingCommand = UpdateTableReplicaAutoScalingCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTimeToLiveCommand.js
var require_UpdateTimeToLiveCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTimeToLiveCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateTimeToLiveCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs28();
    var middleware_serde_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var types_1 = require_dist_cjs();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTimeToLiveCommand = class _UpdateTimeToLiveCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateTimeToLiveCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateTimeToLiveCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _,
          [types_1.SMITHY_CONTEXT_KEY]: {
            service: "DynamoDB_20120810",
            operation: "UpdateTimeToLive"
          }
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateTimeToLiveCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateTimeToLiveCommand)(output, context);
      }
    };
    exports.UpdateTimeToLiveCommand = UpdateTimeToLiveCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDB.js
var require_DynamoDB = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDB.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DynamoDB = void 0;
    var smithy_client_1 = require_dist_cjs37();
    var BatchExecuteStatementCommand_1 = require_BatchExecuteStatementCommand();
    var BatchGetItemCommand_1 = require_BatchGetItemCommand();
    var BatchWriteItemCommand_1 = require_BatchWriteItemCommand();
    var CreateBackupCommand_1 = require_CreateBackupCommand();
    var CreateGlobalTableCommand_1 = require_CreateGlobalTableCommand();
    var CreateTableCommand_1 = require_CreateTableCommand();
    var DeleteBackupCommand_1 = require_DeleteBackupCommand();
    var DeleteItemCommand_1 = require_DeleteItemCommand();
    var DeleteTableCommand_1 = require_DeleteTableCommand();
    var DescribeBackupCommand_1 = require_DescribeBackupCommand();
    var DescribeContinuousBackupsCommand_1 = require_DescribeContinuousBackupsCommand();
    var DescribeContributorInsightsCommand_1 = require_DescribeContributorInsightsCommand();
    var DescribeEndpointsCommand_1 = require_DescribeEndpointsCommand();
    var DescribeExportCommand_1 = require_DescribeExportCommand();
    var DescribeGlobalTableCommand_1 = require_DescribeGlobalTableCommand();
    var DescribeGlobalTableSettingsCommand_1 = require_DescribeGlobalTableSettingsCommand();
    var DescribeImportCommand_1 = require_DescribeImportCommand();
    var DescribeKinesisStreamingDestinationCommand_1 = require_DescribeKinesisStreamingDestinationCommand();
    var DescribeLimitsCommand_1 = require_DescribeLimitsCommand();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var DescribeTableReplicaAutoScalingCommand_1 = require_DescribeTableReplicaAutoScalingCommand();
    var DescribeTimeToLiveCommand_1 = require_DescribeTimeToLiveCommand();
    var DisableKinesisStreamingDestinationCommand_1 = require_DisableKinesisStreamingDestinationCommand();
    var EnableKinesisStreamingDestinationCommand_1 = require_EnableKinesisStreamingDestinationCommand();
    var ExecuteStatementCommand_1 = require_ExecuteStatementCommand();
    var ExecuteTransactionCommand_1 = require_ExecuteTransactionCommand();
    var ExportTableToPointInTimeCommand_1 = require_ExportTableToPointInTimeCommand();
    var GetItemCommand_1 = require_GetItemCommand();
    var ImportTableCommand_1 = require_ImportTableCommand();
    var ListBackupsCommand_1 = require_ListBackupsCommand();
    var ListContributorInsightsCommand_1 = require_ListContributorInsightsCommand();
    var ListExportsCommand_1 = require_ListExportsCommand();
    var ListGlobalTablesCommand_1 = require_ListGlobalTablesCommand();
    var ListImportsCommand_1 = require_ListImportsCommand();
    var ListTablesCommand_1 = require_ListTablesCommand();
    var ListTagsOfResourceCommand_1 = require_ListTagsOfResourceCommand();
    var PutItemCommand_1 = require_PutItemCommand();
    var QueryCommand_1 = require_QueryCommand();
    var RestoreTableFromBackupCommand_1 = require_RestoreTableFromBackupCommand();
    var RestoreTableToPointInTimeCommand_1 = require_RestoreTableToPointInTimeCommand();
    var ScanCommand_1 = require_ScanCommand();
    var TagResourceCommand_1 = require_TagResourceCommand();
    var TransactGetItemsCommand_1 = require_TransactGetItemsCommand();
    var TransactWriteItemsCommand_1 = require_TransactWriteItemsCommand();
    var UntagResourceCommand_1 = require_UntagResourceCommand();
    var UpdateContinuousBackupsCommand_1 = require_UpdateContinuousBackupsCommand();
    var UpdateContributorInsightsCommand_1 = require_UpdateContributorInsightsCommand();
    var UpdateGlobalTableCommand_1 = require_UpdateGlobalTableCommand();
    var UpdateGlobalTableSettingsCommand_1 = require_UpdateGlobalTableSettingsCommand();
    var UpdateItemCommand_1 = require_UpdateItemCommand();
    var UpdateTableCommand_1 = require_UpdateTableCommand();
    var UpdateTableReplicaAutoScalingCommand_1 = require_UpdateTableReplicaAutoScalingCommand();
    var UpdateTimeToLiveCommand_1 = require_UpdateTimeToLiveCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var commands = {
      BatchExecuteStatementCommand: BatchExecuteStatementCommand_1.BatchExecuteStatementCommand,
      BatchGetItemCommand: BatchGetItemCommand_1.BatchGetItemCommand,
      BatchWriteItemCommand: BatchWriteItemCommand_1.BatchWriteItemCommand,
      CreateBackupCommand: CreateBackupCommand_1.CreateBackupCommand,
      CreateGlobalTableCommand: CreateGlobalTableCommand_1.CreateGlobalTableCommand,
      CreateTableCommand: CreateTableCommand_1.CreateTableCommand,
      DeleteBackupCommand: DeleteBackupCommand_1.DeleteBackupCommand,
      DeleteItemCommand: DeleteItemCommand_1.DeleteItemCommand,
      DeleteTableCommand: DeleteTableCommand_1.DeleteTableCommand,
      DescribeBackupCommand: DescribeBackupCommand_1.DescribeBackupCommand,
      DescribeContinuousBackupsCommand: DescribeContinuousBackupsCommand_1.DescribeContinuousBackupsCommand,
      DescribeContributorInsightsCommand: DescribeContributorInsightsCommand_1.DescribeContributorInsightsCommand,
      DescribeEndpointsCommand: DescribeEndpointsCommand_1.DescribeEndpointsCommand,
      DescribeExportCommand: DescribeExportCommand_1.DescribeExportCommand,
      DescribeGlobalTableCommand: DescribeGlobalTableCommand_1.DescribeGlobalTableCommand,
      DescribeGlobalTableSettingsCommand: DescribeGlobalTableSettingsCommand_1.DescribeGlobalTableSettingsCommand,
      DescribeImportCommand: DescribeImportCommand_1.DescribeImportCommand,
      DescribeKinesisStreamingDestinationCommand: DescribeKinesisStreamingDestinationCommand_1.DescribeKinesisStreamingDestinationCommand,
      DescribeLimitsCommand: DescribeLimitsCommand_1.DescribeLimitsCommand,
      DescribeTableCommand: DescribeTableCommand_1.DescribeTableCommand,
      DescribeTableReplicaAutoScalingCommand: DescribeTableReplicaAutoScalingCommand_1.DescribeTableReplicaAutoScalingCommand,
      DescribeTimeToLiveCommand: DescribeTimeToLiveCommand_1.DescribeTimeToLiveCommand,
      DisableKinesisStreamingDestinationCommand: DisableKinesisStreamingDestinationCommand_1.DisableKinesisStreamingDestinationCommand,
      EnableKinesisStreamingDestinationCommand: EnableKinesisStreamingDestinationCommand_1.EnableKinesisStreamingDestinationCommand,
      ExecuteStatementCommand: ExecuteStatementCommand_1.ExecuteStatementCommand,
      ExecuteTransactionCommand: ExecuteTransactionCommand_1.ExecuteTransactionCommand,
      ExportTableToPointInTimeCommand: ExportTableToPointInTimeCommand_1.ExportTableToPointInTimeCommand,
      GetItemCommand: GetItemCommand_1.GetItemCommand,
      ImportTableCommand: ImportTableCommand_1.ImportTableCommand,
      ListBackupsCommand: ListBackupsCommand_1.ListBackupsCommand,
      ListContributorInsightsCommand: ListContributorInsightsCommand_1.ListContributorInsightsCommand,
      ListExportsCommand: ListExportsCommand_1.ListExportsCommand,
      ListGlobalTablesCommand: ListGlobalTablesCommand_1.ListGlobalTablesCommand,
      ListImportsCommand: ListImportsCommand_1.ListImportsCommand,
      ListTablesCommand: ListTablesCommand_1.ListTablesCommand,
      ListTagsOfResourceCommand: ListTagsOfResourceCommand_1.ListTagsOfResourceCommand,
      PutItemCommand: PutItemCommand_1.PutItemCommand,
      QueryCommand: QueryCommand_1.QueryCommand,
      RestoreTableFromBackupCommand: RestoreTableFromBackupCommand_1.RestoreTableFromBackupCommand,
      RestoreTableToPointInTimeCommand: RestoreTableToPointInTimeCommand_1.RestoreTableToPointInTimeCommand,
      ScanCommand: ScanCommand_1.ScanCommand,
      TagResourceCommand: TagResourceCommand_1.TagResourceCommand,
      TransactGetItemsCommand: TransactGetItemsCommand_1.TransactGetItemsCommand,
      TransactWriteItemsCommand: TransactWriteItemsCommand_1.TransactWriteItemsCommand,
      UntagResourceCommand: UntagResourceCommand_1.UntagResourceCommand,
      UpdateContinuousBackupsCommand: UpdateContinuousBackupsCommand_1.UpdateContinuousBackupsCommand,
      UpdateContributorInsightsCommand: UpdateContributorInsightsCommand_1.UpdateContributorInsightsCommand,
      UpdateGlobalTableCommand: UpdateGlobalTableCommand_1.UpdateGlobalTableCommand,
      UpdateGlobalTableSettingsCommand: UpdateGlobalTableSettingsCommand_1.UpdateGlobalTableSettingsCommand,
      UpdateItemCommand: UpdateItemCommand_1.UpdateItemCommand,
      UpdateTableCommand: UpdateTableCommand_1.UpdateTableCommand,
      UpdateTableReplicaAutoScalingCommand: UpdateTableReplicaAutoScalingCommand_1.UpdateTableReplicaAutoScalingCommand,
      UpdateTimeToLiveCommand: UpdateTimeToLiveCommand_1.UpdateTimeToLiveCommand
    };
    var DynamoDB = class extends DynamoDBClient_1.DynamoDBClient {
    };
    exports.DynamoDB = DynamoDB;
    (0, smithy_client_1.createAggregatedClient)(commands, DynamoDB);
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/index.js
var require_commands3 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_BatchExecuteStatementCommand(), exports);
    tslib_1.__exportStar(require_BatchGetItemCommand(), exports);
    tslib_1.__exportStar(require_BatchWriteItemCommand(), exports);
    tslib_1.__exportStar(require_CreateBackupCommand(), exports);
    tslib_1.__exportStar(require_CreateGlobalTableCommand(), exports);
    tslib_1.__exportStar(require_CreateTableCommand(), exports);
    tslib_1.__exportStar(require_DeleteBackupCommand(), exports);
    tslib_1.__exportStar(require_DeleteItemCommand(), exports);
    tslib_1.__exportStar(require_DeleteTableCommand(), exports);
    tslib_1.__exportStar(require_DescribeBackupCommand(), exports);
    tslib_1.__exportStar(require_DescribeContinuousBackupsCommand(), exports);
    tslib_1.__exportStar(require_DescribeContributorInsightsCommand(), exports);
    tslib_1.__exportStar(require_DescribeEndpointsCommand(), exports);
    tslib_1.__exportStar(require_DescribeExportCommand(), exports);
    tslib_1.__exportStar(require_DescribeGlobalTableCommand(), exports);
    tslib_1.__exportStar(require_DescribeGlobalTableSettingsCommand(), exports);
    tslib_1.__exportStar(require_DescribeImportCommand(), exports);
    tslib_1.__exportStar(require_DescribeKinesisStreamingDestinationCommand(), exports);
    tslib_1.__exportStar(require_DescribeLimitsCommand(), exports);
    tslib_1.__exportStar(require_DescribeTableCommand(), exports);
    tslib_1.__exportStar(require_DescribeTableReplicaAutoScalingCommand(), exports);
    tslib_1.__exportStar(require_DescribeTimeToLiveCommand(), exports);
    tslib_1.__exportStar(require_DisableKinesisStreamingDestinationCommand(), exports);
    tslib_1.__exportStar(require_EnableKinesisStreamingDestinationCommand(), exports);
    tslib_1.__exportStar(require_ExecuteStatementCommand(), exports);
    tslib_1.__exportStar(require_ExecuteTransactionCommand(), exports);
    tslib_1.__exportStar(require_ExportTableToPointInTimeCommand(), exports);
    tslib_1.__exportStar(require_GetItemCommand(), exports);
    tslib_1.__exportStar(require_ImportTableCommand(), exports);
    tslib_1.__exportStar(require_ListBackupsCommand(), exports);
    tslib_1.__exportStar(require_ListContributorInsightsCommand(), exports);
    tslib_1.__exportStar(require_ListExportsCommand(), exports);
    tslib_1.__exportStar(require_ListGlobalTablesCommand(), exports);
    tslib_1.__exportStar(require_ListImportsCommand(), exports);
    tslib_1.__exportStar(require_ListTablesCommand(), exports);
    tslib_1.__exportStar(require_ListTagsOfResourceCommand(), exports);
    tslib_1.__exportStar(require_PutItemCommand(), exports);
    tslib_1.__exportStar(require_QueryCommand(), exports);
    tslib_1.__exportStar(require_RestoreTableFromBackupCommand(), exports);
    tslib_1.__exportStar(require_RestoreTableToPointInTimeCommand(), exports);
    tslib_1.__exportStar(require_ScanCommand(), exports);
    tslib_1.__exportStar(require_TagResourceCommand(), exports);
    tslib_1.__exportStar(require_TransactGetItemsCommand(), exports);
    tslib_1.__exportStar(require_TransactWriteItemsCommand(), exports);
    tslib_1.__exportStar(require_UntagResourceCommand(), exports);
    tslib_1.__exportStar(require_UpdateContinuousBackupsCommand(), exports);
    tslib_1.__exportStar(require_UpdateContributorInsightsCommand(), exports);
    tslib_1.__exportStar(require_UpdateGlobalTableCommand(), exports);
    tslib_1.__exportStar(require_UpdateGlobalTableSettingsCommand(), exports);
    tslib_1.__exportStar(require_UpdateItemCommand(), exports);
    tslib_1.__exportStar(require_UpdateTableCommand(), exports);
    tslib_1.__exportStar(require_UpdateTableReplicaAutoScalingCommand(), exports);
    tslib_1.__exportStar(require_UpdateTimeToLiveCommand(), exports);
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/Interfaces.js
var require_Interfaces2 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListContributorInsightsPaginator.js
var require_ListContributorInsightsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListContributorInsightsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListContributorInsights = void 0;
    var ListContributorInsightsCommand_1 = require_ListContributorInsightsCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListContributorInsightsCommand_1.ListContributorInsightsCommand(input), ...args);
    };
    async function* paginateListContributorInsights(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListContributorInsights = paginateListContributorInsights;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListExportsPaginator.js
var require_ListExportsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListExportsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListExports = void 0;
    var ListExportsCommand_1 = require_ListExportsCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListExportsCommand_1.ListExportsCommand(input), ...args);
    };
    async function* paginateListExports(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListExports = paginateListExports;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListImportsPaginator.js
var require_ListImportsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListImportsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListImports = void 0;
    var ListImportsCommand_1 = require_ListImportsCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListImportsCommand_1.ListImportsCommand(input), ...args);
    };
    async function* paginateListImports(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["PageSize"] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListImports = paginateListImports;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListTablesPaginator.js
var require_ListTablesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListTablesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListTables = void 0;
    var ListTablesCommand_1 = require_ListTablesCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListTablesCommand_1.ListTablesCommand(input), ...args);
    };
    async function* paginateListTables(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartTableName = token;
        input["Limit"] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        }
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedTableName;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListTables = paginateListTables;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/QueryPaginator.js
var require_QueryPaginator = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/QueryPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateQuery = void 0;
    var QueryCommand_1 = require_QueryCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new QueryCommand_1.QueryCommand(input), ...args);
    };
    async function* paginateQuery(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input["Limit"] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        }
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedKey;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateQuery = paginateQuery;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ScanPaginator.js
var require_ScanPaginator = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ScanPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateScan = void 0;
    var ScanCommand_1 = require_ScanCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ScanCommand_1.ScanCommand(input), ...args);
    };
    async function* paginateScan(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input["Limit"] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        }
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedKey;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateScan = paginateScan;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/index.js
var require_pagination4 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces2(), exports);
    tslib_1.__exportStar(require_ListContributorInsightsPaginator(), exports);
    tslib_1.__exportStar(require_ListExportsPaginator(), exports);
    tslib_1.__exportStar(require_ListImportsPaginator(), exports);
    tslib_1.__exportStar(require_ListTablesPaginator(), exports);
    tslib_1.__exportStar(require_QueryPaginator(), exports);
    tslib_1.__exportStar(require_ScanPaginator(), exports);
  }
});

// node_modules/@smithy/util-waiter/dist-cjs/utils/sleep.js
var require_sleep = __commonJS({
  "node_modules/@smithy/util-waiter/dist-cjs/utils/sleep.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sleep = void 0;
    var sleep = (seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    };
    exports.sleep = sleep;
  }
});

// node_modules/@smithy/util-waiter/dist-cjs/waiter.js
var require_waiter3 = __commonJS({
  "node_modules/@smithy/util-waiter/dist-cjs/waiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkExceptions = exports.WaiterState = exports.waiterServiceDefaults = void 0;
    exports.waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120
    };
    var WaiterState;
    (function(WaiterState2) {
      WaiterState2["ABORTED"] = "ABORTED";
      WaiterState2["FAILURE"] = "FAILURE";
      WaiterState2["SUCCESS"] = "SUCCESS";
      WaiterState2["RETRY"] = "RETRY";
      WaiterState2["TIMEOUT"] = "TIMEOUT";
    })(WaiterState = exports.WaiterState || (exports.WaiterState = {}));
    var checkExceptions = (result) => {
      if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(`${JSON.stringify({
          ...result,
          reason: "Request was aborted"
        })}`);
        abortError.name = "AbortError";
        throw abortError;
      } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(`${JSON.stringify({
          ...result,
          reason: "Waiter has timed out"
        })}`);
        timeoutError.name = "TimeoutError";
        throw timeoutError;
      } else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify({ result })}`);
      }
      return result;
    };
    exports.checkExceptions = checkExceptions;
  }
});

// node_modules/@smithy/util-waiter/dist-cjs/poller.js
var require_poller = __commonJS({
  "node_modules/@smithy/util-waiter/dist-cjs/poller.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.runPolling = void 0;
    var sleep_1 = require_sleep();
    var waiter_1 = require_waiter3();
    var exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling)
        return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    };
    var randomInRange = (min, max) => min + Math.random() * (max - min);
    var runPolling = async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
      var _a;
      const { state, reason } = await acceptorChecks(client, input);
      if (state !== waiter_1.WaiterState.RETRY) {
        return { state, reason };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (((_a = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _a === void 0 ? void 0 : _a.aborted) || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted)) {
          return { state: waiter_1.WaiterState.ABORTED };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: waiter_1.WaiterState.TIMEOUT };
        }
        await (0, sleep_1.sleep)(delay);
        const { state: state2, reason: reason2 } = await acceptorChecks(client, input);
        if (state2 !== waiter_1.WaiterState.RETRY) {
          return { state: state2, reason: reason2 };
        }
        currentAttempt += 1;
      }
    };
    exports.runPolling = runPolling;
  }
});

// node_modules/@smithy/util-waiter/dist-cjs/utils/validate.js
var require_validate = __commonJS({
  "node_modules/@smithy/util-waiter/dist-cjs/utils/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateWaiterOptions = void 0;
    var validateWaiterOptions = (options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
      } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      }
    };
    exports.validateWaiterOptions = validateWaiterOptions;
  }
});

// node_modules/@smithy/util-waiter/dist-cjs/utils/index.js
var require_utils2 = __commonJS({
  "node_modules/@smithy/util-waiter/dist-cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_sleep(), exports);
    tslib_1.__exportStar(require_validate(), exports);
  }
});

// node_modules/@smithy/util-waiter/dist-cjs/createWaiter.js
var require_createWaiter = __commonJS({
  "node_modules/@smithy/util-waiter/dist-cjs/createWaiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createWaiter = void 0;
    var poller_1 = require_poller();
    var utils_1 = require_utils2();
    var waiter_1 = require_waiter3();
    var abortTimeout = async (abortSignal) => {
      return new Promise((resolve) => {
        abortSignal.onabort = () => resolve({ state: waiter_1.WaiterState.ABORTED });
      });
    };
    var createWaiter = async (options, input, acceptorChecks) => {
      const params = {
        ...waiter_1.waiterServiceDefaults,
        ...options
      };
      (0, utils_1.validateWaiterOptions)(params);
      const exitConditions = [(0, poller_1.runPolling)(params, input, acceptorChecks)];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    };
    exports.createWaiter = createWaiter;
  }
});

// node_modules/@smithy/util-waiter/dist-cjs/index.js
var require_dist_cjs56 = __commonJS({
  "node_modules/@smithy/util-waiter/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_createWaiter(), exports);
    tslib_1.__exportStar(require_waiter3(), exports);
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableExists.js
var require_waitForTableExists = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableExists.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilTableExists = exports.waitForTableExists = void 0;
    var util_waiter_1 = require_dist_cjs56();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeTableCommand_1.DescribeTableCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.Table.TableStatus;
          };
          if (returnComparator() === "ACTIVE") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ResourceNotFoundException") {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForTableExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForTableExists = waitForTableExists;
    var waitUntilTableExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilTableExists = waitUntilTableExists;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableNotExists.js
var require_waitForTableNotExists = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableNotExists.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilTableNotExists = exports.waitForTableNotExists = void 0;
    var util_waiter_1 = require_dist_cjs56();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeTableCommand_1.DescribeTableCommand(input));
        reason = result;
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ResourceNotFoundException") {
          return { state: util_waiter_1.WaiterState.SUCCESS, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForTableNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForTableNotExists = waitForTableNotExists;
    var waitUntilTableNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilTableNotExists = waitUntilTableNotExists;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/index.js
var require_waiters = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_waitForTableExists(), exports);
    tslib_1.__exportStar(require_waitForTableNotExists(), exports);
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/index.js
var require_models3 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_0(), exports);
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/index.js
var require_dist_cjs57 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DynamoDBServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_DynamoDBClient(), exports);
    tslib_1.__exportStar(require_DynamoDB(), exports);
    tslib_1.__exportStar(require_commands3(), exports);
    tslib_1.__exportStar(require_pagination4(), exports);
    tslib_1.__exportStar(require_waiters(), exports);
    tslib_1.__exportStar(require_models3(), exports);
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    Object.defineProperty(exports, "DynamoDBServiceException", { enumerable: true, get: function() {
      return DynamoDBServiceException_1.DynamoDBServiceException;
    } });
  }
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/convertToAttr.js
var require_convertToAttr = __commonJS({
  "node_modules/@aws-sdk/util-dynamodb/dist-cjs/convertToAttr.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertToAttr = void 0;
    var convertToAttr = (data, options) => {
      var _a, _b, _c, _d, _e, _f;
      if (data === void 0) {
        throw new Error(`Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.`);
      } else if (data === null && typeof data === "object") {
        return convertToNullAttr();
      } else if (Array.isArray(data)) {
        return convertToListAttr(data, options);
      } else if (((_a = data === null || data === void 0 ? void 0 : data.constructor) === null || _a === void 0 ? void 0 : _a.name) === "Set") {
        return convertToSetAttr(data, options);
      } else if (((_b = data === null || data === void 0 ? void 0 : data.constructor) === null || _b === void 0 ? void 0 : _b.name) === "Map") {
        return convertToMapAttrFromIterable(data, options);
      } else if (((_c = data === null || data === void 0 ? void 0 : data.constructor) === null || _c === void 0 ? void 0 : _c.name) === "Object" || !data.constructor && typeof data === "object") {
        return convertToMapAttrFromEnumerableProps(data, options);
      } else if (isBinary(data)) {
        if (data.length === 0 && (options === null || options === void 0 ? void 0 : options.convertEmptyValues)) {
          return convertToNullAttr();
        }
        return convertToBinaryAttr(data);
      } else if (typeof data === "boolean" || ((_d = data === null || data === void 0 ? void 0 : data.constructor) === null || _d === void 0 ? void 0 : _d.name) === "Boolean") {
        return { BOOL: data.valueOf() };
      } else if (typeof data === "number" || ((_e = data === null || data === void 0 ? void 0 : data.constructor) === null || _e === void 0 ? void 0 : _e.name) === "Number") {
        return convertToNumberAttr(data);
      } else if (typeof data === "bigint") {
        return convertToBigIntAttr(data);
      } else if (typeof data === "string" || ((_f = data === null || data === void 0 ? void 0 : data.constructor) === null || _f === void 0 ? void 0 : _f.name) === "String") {
        if (data.length === 0 && (options === null || options === void 0 ? void 0 : options.convertEmptyValues)) {
          return convertToNullAttr();
        }
        return convertToStringAttr(data);
      } else if ((options === null || options === void 0 ? void 0 : options.convertClassInstanceToMap) && typeof data === "object") {
        return convertToMapAttrFromEnumerableProps(data, options);
      }
      throw new Error(`Unsupported type passed: ${data}. Pass options.convertClassInstanceToMap=true to marshall typeof object as map attribute.`);
    };
    exports.convertToAttr = convertToAttr;
    var convertToListAttr = (data, options) => ({
      L: data.filter((item) => !(options === null || options === void 0 ? void 0 : options.removeUndefinedValues) || (options === null || options === void 0 ? void 0 : options.removeUndefinedValues) && item !== void 0).map((item) => (0, exports.convertToAttr)(item, options))
    });
    var convertToSetAttr = (set, options) => {
      const setToOperate = (options === null || options === void 0 ? void 0 : options.removeUndefinedValues) ? new Set([...set].filter((value) => value !== void 0)) : set;
      if (!(options === null || options === void 0 ? void 0 : options.removeUndefinedValues) && setToOperate.has(void 0)) {
        throw new Error(`Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.`);
      }
      if (setToOperate.size === 0) {
        if (options === null || options === void 0 ? void 0 : options.convertEmptyValues) {
          return convertToNullAttr();
        }
        throw new Error(`Pass a non-empty set, or options.convertEmptyValues=true.`);
      }
      const item = setToOperate.values().next().value;
      if (typeof item === "number") {
        return {
          NS: Array.from(setToOperate).map(convertToNumberAttr).map((item2) => item2.N)
        };
      } else if (typeof item === "bigint") {
        return {
          NS: Array.from(setToOperate).map(convertToBigIntAttr).map((item2) => item2.N)
        };
      } else if (typeof item === "string") {
        return {
          SS: Array.from(setToOperate).map(convertToStringAttr).map((item2) => item2.S)
        };
      } else if (isBinary(item)) {
        return {
          BS: Array.from(setToOperate).map(convertToBinaryAttr).map((item2) => item2.B)
        };
      } else {
        throw new Error(`Only Number Set (NS), Binary Set (BS) or String Set (SS) are allowed.`);
      }
    };
    var convertToMapAttrFromIterable = (data, options) => ({
      M: ((data2) => {
        const map = {};
        for (const [key, value] of data2) {
          if (typeof value !== "function" && (value !== void 0 || !(options === null || options === void 0 ? void 0 : options.removeUndefinedValues))) {
            map[key] = (0, exports.convertToAttr)(value, options);
          }
        }
        return map;
      })(data)
    });
    var convertToMapAttrFromEnumerableProps = (data, options) => ({
      M: ((data2) => {
        const map = {};
        for (const key in data2) {
          const value = data2[key];
          if (typeof value !== "function" && (value !== void 0 || !(options === null || options === void 0 ? void 0 : options.removeUndefinedValues))) {
            map[key] = (0, exports.convertToAttr)(value, options);
          }
        }
        return map;
      })(data)
    });
    var convertToNullAttr = () => ({ NULL: true });
    var convertToBinaryAttr = (data) => ({ B: data });
    var convertToStringAttr = (data) => ({ S: data.toString() });
    var convertToBigIntAttr = (data) => ({ N: data.toString() });
    var validateBigIntAndThrow = (errorPrefix) => {
      throw new Error(`${errorPrefix} ${typeof BigInt === "function" ? "Use BigInt." : "Pass string value instead."} `);
    };
    var convertToNumberAttr = (num) => {
      if ([Number.NaN, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY].map((val2) => val2.toString()).includes(num.toString())) {
        throw new Error(`Special numeric value ${num.toString()} is not allowed`);
      } else if (num > Number.MAX_SAFE_INTEGER) {
        validateBigIntAndThrow(`Number ${num.toString()} is greater than Number.MAX_SAFE_INTEGER.`);
      } else if (num < Number.MIN_SAFE_INTEGER) {
        validateBigIntAndThrow(`Number ${num.toString()} is lesser than Number.MIN_SAFE_INTEGER.`);
      }
      return { N: num.toString() };
    };
    var isBinary = (data) => {
      const binaryTypes = [
        "ArrayBuffer",
        "Blob",
        "Buffer",
        "DataView",
        "File",
        "Int8Array",
        "Uint8Array",
        "Uint8ClampedArray",
        "Int16Array",
        "Uint16Array",
        "Int32Array",
        "Uint32Array",
        "Float32Array",
        "Float64Array",
        "BigInt64Array",
        "BigUint64Array"
      ];
      if (data === null || data === void 0 ? void 0 : data.constructor) {
        return binaryTypes.includes(data.constructor.name);
      }
      return false;
    };
  }
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/convertToNative.js
var require_convertToNative = __commonJS({
  "node_modules/@aws-sdk/util-dynamodb/dist-cjs/convertToNative.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertToNative = void 0;
    var convertToNative = (data, options) => {
      for (const [key, value] of Object.entries(data)) {
        if (value !== void 0) {
          switch (key) {
            case "NULL":
              return null;
            case "BOOL":
              return Boolean(value);
            case "N":
              return convertNumber(value, options);
            case "B":
              return convertBinary(value);
            case "S":
              return convertString(value);
            case "L":
              return convertList(value, options);
            case "M":
              return convertMap(value, options);
            case "NS":
              return new Set(value.map((item) => convertNumber(item, options)));
            case "BS":
              return new Set(value.map(convertBinary));
            case "SS":
              return new Set(value.map(convertString));
            default:
              throw new Error(`Unsupported type passed: ${key}`);
          }
        }
      }
      throw new Error(`No value defined: ${JSON.stringify(data)}`);
    };
    exports.convertToNative = convertToNative;
    var convertNumber = (numString, options) => {
      if (options === null || options === void 0 ? void 0 : options.wrapNumbers) {
        return { value: numString };
      }
      const num = Number(numString);
      const infinityValues = [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY];
      if ((num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) && !infinityValues.includes(num)) {
        if (typeof BigInt === "function") {
          try {
            return BigInt(numString);
          } catch (error) {
            throw new Error(`${numString} can't be converted to BigInt. Set options.wrapNumbers to get string value.`);
          }
        } else {
          throw new Error(`${numString} is outside SAFE_INTEGER bounds. Set options.wrapNumbers to get string value.`);
        }
      }
      return num;
    };
    var convertString = (stringValue) => stringValue;
    var convertBinary = (binaryValue) => binaryValue;
    var convertList = (list, options) => list.map((item) => (0, exports.convertToNative)(item, options));
    var convertMap = (map, options) => Object.entries(map).reduce((acc, [key, value]) => (acc[key] = (0, exports.convertToNative)(value, options), acc), {});
  }
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/marshall.js
var require_marshall = __commonJS({
  "node_modules/@aws-sdk/util-dynamodb/dist-cjs/marshall.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.marshall = void 0;
    var convertToAttr_1 = require_convertToAttr();
    function marshall(data, options) {
      const attributeValue = (0, convertToAttr_1.convertToAttr)(data, options);
      const [key, value] = Object.entries(attributeValue)[0];
      switch (key) {
        case "M":
        case "L":
          return value;
        case "SS":
        case "NS":
        case "BS":
        case "S":
        case "N":
        case "B":
        case "NULL":
        case "BOOL":
        case "$unknown":
        default:
          return attributeValue;
      }
    }
    exports.marshall = marshall;
  }
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/models.js
var require_models4 = __commonJS({
  "node_modules/@aws-sdk/util-dynamodb/dist-cjs/models.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/unmarshall.js
var require_unmarshall = __commonJS({
  "node_modules/@aws-sdk/util-dynamodb/dist-cjs/unmarshall.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.unmarshall = void 0;
    var convertToNative_1 = require_convertToNative();
    var unmarshall = (data, options) => (0, convertToNative_1.convertToNative)({ M: data }, options);
    exports.unmarshall = unmarshall;
  }
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/index.js
var require_dist_cjs58 = __commonJS({
  "node_modules/@aws-sdk/util-dynamodb/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_convertToAttr(), exports);
    tslib_1.__exportStar(require_convertToNative(), exports);
    tslib_1.__exportStar(require_marshall(), exports);
    tslib_1.__exportStar(require_models4(), exports);
    tslib_1.__exportStar(require_unmarshall(), exports);
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/utils.js
var require_utils3 = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.unmarshallOutput = exports.marshallInput = void 0;
    var util_dynamodb_1 = require_dist_cjs58();
    var processObj = (obj, processFunc, children) => {
      if (obj !== void 0) {
        if (!children || Array.isArray(children) && children.length === 0) {
          return processFunc(obj);
        } else {
          if (Array.isArray(children)) {
            return processKeysInObj(obj, processFunc, children);
          } else {
            return processAllKeysInObj(obj, processFunc, children.children);
          }
        }
      }
      return void 0;
    };
    var processKeyInObj = (obj, processFunc, children) => {
      if (Array.isArray(obj)) {
        return obj.map((item) => processObj(item, processFunc, children));
      }
      return processObj(obj, processFunc, children);
    };
    var processKeysInObj = (obj, processFunc, keyNodes) => {
      const accumulator = { ...obj };
      return keyNodes.reduce((acc, { key, children }) => {
        acc[key] = processKeyInObj(acc[key], processFunc, children);
        return acc;
      }, accumulator);
    };
    var processAllKeysInObj = (obj, processFunc, children) => Object.entries(obj).reduce((acc, [key, value]) => {
      acc[key] = processKeyInObj(value, processFunc, children);
      return acc;
    }, {});
    var marshallInput = (obj, keyNodes, options) => {
      const marshallFunc = (toMarshall) => (0, util_dynamodb_1.marshall)(toMarshall, options);
      return processKeysInObj(obj, marshallFunc, keyNodes);
    };
    exports.marshallInput = marshallInput;
    var unmarshallOutput = (obj, keyNodes, options) => {
      const unmarshallFunc = (toMarshall) => (0, util_dynamodb_1.unmarshall)(toMarshall, options);
      return processKeysInObj(obj, unmarshallFunc, keyNodes);
    };
    exports.unmarshallOutput = unmarshallOutput;
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/baseCommand/DynamoDBDocumentClientCommand.js
var require_DynamoDBDocumentClientCommand = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/baseCommand/DynamoDBDocumentClientCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DynamoDBDocumentClientCommand = void 0;
    var smithy_client_1 = require_dist_cjs37();
    var utils_1 = require_utils3();
    var DynamoDBDocumentClientCommand = class _DynamoDBDocumentClientCommand extends smithy_client_1.Command {
      addMarshallingMiddleware(configuration) {
        const { marshallOptions, unmarshallOptions } = configuration.translateConfig || {};
        this.clientCommand.middlewareStack.addRelativeTo((next, context) => async (args) => {
          args.input = (0, utils_1.marshallInput)(this.input, this.inputKeyNodes, marshallOptions);
          context.dynamoDbDocumentClientOptions = context.dynamoDbDocumentClientOptions || _DynamoDBDocumentClientCommand.defaultLogFilterOverrides;
          const input = args.input;
          context.dynamoDbDocumentClientOptions.overrideInputFilterSensitiveLog = () => {
            var _a;
            return (_a = context.inputFilterSensitiveLog) === null || _a === void 0 ? void 0 : _a.call(context, input);
          };
          return next(args);
        }, {
          name: "DocumentMarshall",
          relation: "before",
          toMiddleware: "serializerMiddleware",
          override: true
        });
        this.clientCommand.middlewareStack.addRelativeTo((next, context) => async (args) => {
          const deserialized = await next(args);
          const output = deserialized.output;
          context.dynamoDbDocumentClientOptions = context.dynamoDbDocumentClientOptions || _DynamoDBDocumentClientCommand.defaultLogFilterOverrides;
          context.dynamoDbDocumentClientOptions.overrideOutputFilterSensitiveLog = () => {
            var _a;
            return (_a = context.outputFilterSensitiveLog) === null || _a === void 0 ? void 0 : _a.call(context, output);
          };
          deserialized.output = (0, utils_1.unmarshallOutput)(deserialized.output, this.outputKeyNodes, unmarshallOptions);
          return deserialized;
        }, {
          name: "DocumentUnmarshall",
          relation: "before",
          toMiddleware: "deserializerMiddleware",
          override: true
        });
      }
    };
    exports.DynamoDBDocumentClientCommand = DynamoDBDocumentClientCommand;
    DynamoDBDocumentClientCommand.defaultLogFilterOverrides = {
      overrideInputFilterSensitiveLog(...args) {
      },
      overrideOutputFilterSensitiveLog(...args) {
      }
    };
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js
var require_BatchExecuteStatementCommand2 = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchExecuteStatementCommand = exports.$Command = exports.DynamoDBDocumentClientCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs57();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    Object.defineProperty(exports, "DynamoDBDocumentClientCommand", { enumerable: true, get: function() {
      return DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand;
    } });
    var BatchExecuteStatementCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [{ key: "Statements", children: [{ key: "Parameters" }] }];
        this.outputKeyNodes = [
          { key: "Responses", children: [{ key: "Error", children: [{ key: "Item" }] }, { key: "Item" }] }
        ];
        this.clientCommand = new client_dynamodb_1.BatchExecuteStatementCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.BatchExecuteStatementCommand = BatchExecuteStatementCommand;
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchGetCommand.js
var require_BatchGetCommand = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchGetCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchGetCommand = exports.$Command = exports.DynamoDBDocumentClientCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs57();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    Object.defineProperty(exports, "DynamoDBDocumentClientCommand", { enumerable: true, get: function() {
      return DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand;
    } });
    var BatchGetCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: "RequestItems",
            children: {
              children: [{ key: "Keys" }]
            }
          }
        ];
        this.outputKeyNodes = [
          { key: "Responses", children: {} },
          {
            key: "UnprocessedKeys",
            children: {
              children: [{ key: "Keys" }]
            }
          }
        ];
        this.clientCommand = new client_dynamodb_1.BatchGetItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.BatchGetCommand = BatchGetCommand;
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchWriteCommand.js
var require_BatchWriteCommand = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchWriteCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchWriteCommand = exports.$Command = exports.DynamoDBDocumentClientCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs57();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    Object.defineProperty(exports, "DynamoDBDocumentClientCommand", { enumerable: true, get: function() {
      return DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand;
    } });
    var BatchWriteCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: "RequestItems",
            children: {
              children: [
                { key: "PutRequest", children: [{ key: "Item" }] },
                { key: "DeleteRequest", children: [{ key: "Key" }] }
              ]
            }
          }
        ];
        this.outputKeyNodes = [
          {
            key: "UnprocessedItems",
            children: {
              children: [
                { key: "PutRequest", children: [{ key: "Item" }] },
                { key: "DeleteRequest", children: [{ key: "Key" }] }
              ]
            }
          },
          {
            key: "ItemCollectionMetrics",
            children: {
              children: [{ key: "ItemCollectionKey" }]
            }
          }
        ];
        this.clientCommand = new client_dynamodb_1.BatchWriteItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.BatchWriteCommand = BatchWriteCommand;
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/DeleteCommand.js
var require_DeleteCommand = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/DeleteCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteCommand = exports.$Command = exports.DynamoDBDocumentClientCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs57();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    Object.defineProperty(exports, "DynamoDBDocumentClientCommand", { enumerable: true, get: function() {
      return DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand;
    } });
    var DeleteCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          { key: "Key" },
          {
            key: "Expected",
            children: {
              children: [{ key: "Value" }, { key: "AttributeValueList" }]
            }
          },
          { key: "ExpressionAttributeValues" }
        ];
        this.outputKeyNodes = [
          { key: "Attributes" },
          { key: "ItemCollectionMetrics", children: [{ key: "ItemCollectionKey" }] }
        ];
        this.clientCommand = new client_dynamodb_1.DeleteItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.DeleteCommand = DeleteCommand;
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js
var require_ExecuteStatementCommand2 = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExecuteStatementCommand = exports.$Command = exports.DynamoDBDocumentClientCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs57();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    Object.defineProperty(exports, "DynamoDBDocumentClientCommand", { enumerable: true, get: function() {
      return DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand;
    } });
    var ExecuteStatementCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [{ key: "Parameters" }];
        this.outputKeyNodes = [{ key: "Items" }, { key: "LastEvaluatedKey" }];
        this.clientCommand = new client_dynamodb_1.ExecuteStatementCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.ExecuteStatementCommand = ExecuteStatementCommand;
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js
var require_ExecuteTransactionCommand2 = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExecuteTransactionCommand = exports.$Command = exports.DynamoDBDocumentClientCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs57();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    Object.defineProperty(exports, "DynamoDBDocumentClientCommand", { enumerable: true, get: function() {
      return DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand;
    } });
    var ExecuteTransactionCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [{ key: "TransactStatements", children: [{ key: "Parameters" }] }];
        this.outputKeyNodes = [{ key: "Responses", children: [{ key: "Item" }] }];
        this.clientCommand = new client_dynamodb_1.ExecuteTransactionCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.ExecuteTransactionCommand = ExecuteTransactionCommand;
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/GetCommand.js
var require_GetCommand = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/GetCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetCommand = exports.$Command = exports.DynamoDBDocumentClientCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs57();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    Object.defineProperty(exports, "DynamoDBDocumentClientCommand", { enumerable: true, get: function() {
      return DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand;
    } });
    var GetCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [{ key: "Key" }];
        this.outputKeyNodes = [{ key: "Item" }];
        this.clientCommand = new client_dynamodb_1.GetItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.GetCommand = GetCommand;
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/PutCommand.js
var require_PutCommand = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/PutCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutCommand = exports.$Command = exports.DynamoDBDocumentClientCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs57();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    Object.defineProperty(exports, "DynamoDBDocumentClientCommand", { enumerable: true, get: function() {
      return DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand;
    } });
    var PutCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          { key: "Item" },
          {
            key: "Expected",
            children: {
              children: [{ key: "Value" }, { key: "AttributeValueList" }]
            }
          },
          { key: "ExpressionAttributeValues" }
        ];
        this.outputKeyNodes = [
          { key: "Attributes" },
          { key: "ItemCollectionMetrics", children: [{ key: "ItemCollectionKey" }] }
        ];
        this.clientCommand = new client_dynamodb_1.PutItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.PutCommand = PutCommand;
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/QueryCommand.js
var require_QueryCommand2 = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/QueryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueryCommand = exports.$Command = exports.DynamoDBDocumentClientCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs57();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    Object.defineProperty(exports, "DynamoDBDocumentClientCommand", { enumerable: true, get: function() {
      return DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand;
    } });
    var QueryCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: "KeyConditions",
            children: {
              children: [{ key: "AttributeValueList" }]
            }
          },
          {
            key: "QueryFilter",
            children: {
              children: [{ key: "AttributeValueList" }]
            }
          },
          { key: "ExclusiveStartKey" },
          { key: "ExpressionAttributeValues" }
        ];
        this.outputKeyNodes = [{ key: "Items" }, { key: "LastEvaluatedKey" }];
        this.clientCommand = new client_dynamodb_1.QueryCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.QueryCommand = QueryCommand;
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ScanCommand.js
var require_ScanCommand2 = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ScanCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ScanCommand = exports.$Command = exports.DynamoDBDocumentClientCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs57();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    Object.defineProperty(exports, "DynamoDBDocumentClientCommand", { enumerable: true, get: function() {
      return DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand;
    } });
    var ScanCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: "ScanFilter",
            children: {
              children: [{ key: "AttributeValueList" }]
            }
          },
          { key: "ExclusiveStartKey" },
          { key: "ExpressionAttributeValues" }
        ];
        this.outputKeyNodes = [{ key: "Items" }, { key: "LastEvaluatedKey" }];
        this.clientCommand = new client_dynamodb_1.ScanCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.ScanCommand = ScanCommand;
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/TransactGetCommand.js
var require_TransactGetCommand = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/TransactGetCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransactGetCommand = exports.$Command = exports.DynamoDBDocumentClientCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs57();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    Object.defineProperty(exports, "DynamoDBDocumentClientCommand", { enumerable: true, get: function() {
      return DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand;
    } });
    var TransactGetCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [{ key: "TransactItems", children: [{ key: "Get", children: [{ key: "Key" }] }] }];
        this.outputKeyNodes = [{ key: "Responses", children: [{ key: "Item" }] }];
        this.clientCommand = new client_dynamodb_1.TransactGetItemsCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.TransactGetCommand = TransactGetCommand;
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/TransactWriteCommand.js
var require_TransactWriteCommand = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/TransactWriteCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransactWriteCommand = exports.$Command = exports.DynamoDBDocumentClientCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs57();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    Object.defineProperty(exports, "DynamoDBDocumentClientCommand", { enumerable: true, get: function() {
      return DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand;
    } });
    var TransactWriteCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: "TransactItems",
            children: [
              { key: "ConditionCheck", children: [{ key: "Key" }, { key: "ExpressionAttributeValues" }] },
              { key: "Put", children: [{ key: "Item" }, { key: "ExpressionAttributeValues" }] },
              { key: "Delete", children: [{ key: "Key" }, { key: "ExpressionAttributeValues" }] },
              { key: "Update", children: [{ key: "Key" }, { key: "ExpressionAttributeValues" }] }
            ]
          }
        ];
        this.outputKeyNodes = [
          {
            key: "ItemCollectionMetrics",
            children: {
              children: [{ key: "ItemCollectionKey" }]
            }
          }
        ];
        this.clientCommand = new client_dynamodb_1.TransactWriteItemsCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.TransactWriteCommand = TransactWriteCommand;
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/UpdateCommand.js
var require_UpdateCommand = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/UpdateCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateCommand = exports.$Command = exports.DynamoDBDocumentClientCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs57();
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    Object.defineProperty(exports, "DynamoDBDocumentClientCommand", { enumerable: true, get: function() {
      return DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand;
    } });
    var UpdateCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          { key: "Key" },
          {
            key: "AttributeUpdates",
            children: {
              children: [{ key: "Value" }]
            }
          },
          {
            key: "Expected",
            children: {
              children: [{ key: "Value" }, { key: "AttributeValueList" }]
            }
          },
          { key: "ExpressionAttributeValues" }
        ];
        this.outputKeyNodes = [
          { key: "Attributes" },
          { key: "ItemCollectionMetrics", children: [{ key: "ItemCollectionKey" }] }
        ];
        this.clientCommand = new client_dynamodb_1.UpdateItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.UpdateCommand = UpdateCommand;
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/DynamoDBDocumentClient.js
var require_DynamoDBDocumentClient = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/DynamoDBDocumentClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DynamoDBDocumentClient = exports.__Client = void 0;
    var smithy_client_1 = require_dist_cjs37();
    Object.defineProperty(exports, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var DynamoDBDocumentClient2 = class _DynamoDBDocumentClient extends smithy_client_1.Client {
      constructor(client, translateConfig) {
        super(client.config);
        this.config = client.config;
        this.config.translateConfig = translateConfig;
        this.middlewareStack = client.middlewareStack;
      }
      static from(client, translateConfig) {
        return new _DynamoDBDocumentClient(client, translateConfig);
      }
      destroy() {
      }
    };
    exports.DynamoDBDocumentClient = DynamoDBDocumentClient2;
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/DynamoDBDocument.js
var require_DynamoDBDocument = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/DynamoDBDocument.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DynamoDBDocument = void 0;
    var BatchExecuteStatementCommand_1 = require_BatchExecuteStatementCommand2();
    var BatchGetCommand_1 = require_BatchGetCommand();
    var BatchWriteCommand_1 = require_BatchWriteCommand();
    var DeleteCommand_1 = require_DeleteCommand();
    var ExecuteStatementCommand_1 = require_ExecuteStatementCommand2();
    var ExecuteTransactionCommand_1 = require_ExecuteTransactionCommand2();
    var GetCommand_1 = require_GetCommand();
    var PutCommand_1 = require_PutCommand();
    var QueryCommand_1 = require_QueryCommand2();
    var ScanCommand_1 = require_ScanCommand2();
    var TransactGetCommand_1 = require_TransactGetCommand();
    var TransactWriteCommand_1 = require_TransactWriteCommand();
    var UpdateCommand_1 = require_UpdateCommand();
    var DynamoDBDocumentClient_1 = require_DynamoDBDocumentClient();
    var DynamoDBDocument = class _DynamoDBDocument extends DynamoDBDocumentClient_1.DynamoDBDocumentClient {
      static from(client, translateConfig) {
        return new _DynamoDBDocument(client, translateConfig);
      }
      batchExecuteStatement(args, optionsOrCb, cb) {
        const command = new BatchExecuteStatementCommand_1.BatchExecuteStatementCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchGet(args, optionsOrCb, cb) {
        const command = new BatchGetCommand_1.BatchGetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchWrite(args, optionsOrCb, cb) {
        const command = new BatchWriteCommand_1.BatchWriteCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      delete(args, optionsOrCb, cb) {
        const command = new DeleteCommand_1.DeleteCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      executeStatement(args, optionsOrCb, cb) {
        const command = new ExecuteStatementCommand_1.ExecuteStatementCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      executeTransaction(args, optionsOrCb, cb) {
        const command = new ExecuteTransactionCommand_1.ExecuteTransactionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      get(args, optionsOrCb, cb) {
        const command = new GetCommand_1.GetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      put(args, optionsOrCb, cb) {
        const command = new PutCommand_1.PutCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      query(args, optionsOrCb, cb) {
        const command = new QueryCommand_1.QueryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      scan(args, optionsOrCb, cb) {
        const command = new ScanCommand_1.ScanCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      transactGet(args, optionsOrCb, cb) {
        const command = new TransactGetCommand_1.TransactGetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      transactWrite(args, optionsOrCb, cb) {
        const command = new TransactWriteCommand_1.TransactWriteCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      update(args, optionsOrCb, cb) {
        const command = new UpdateCommand_1.UpdateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.DynamoDBDocument = DynamoDBDocument;
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/index.js
var require_commands4 = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_BatchExecuteStatementCommand2(), exports);
    tslib_1.__exportStar(require_BatchGetCommand(), exports);
    tslib_1.__exportStar(require_BatchWriteCommand(), exports);
    tslib_1.__exportStar(require_DeleteCommand(), exports);
    tslib_1.__exportStar(require_ExecuteStatementCommand2(), exports);
    tslib_1.__exportStar(require_ExecuteTransactionCommand2(), exports);
    tslib_1.__exportStar(require_GetCommand(), exports);
    tslib_1.__exportStar(require_PutCommand(), exports);
    tslib_1.__exportStar(require_QueryCommand2(), exports);
    tslib_1.__exportStar(require_ScanCommand2(), exports);
    tslib_1.__exportStar(require_TransactGetCommand(), exports);
    tslib_1.__exportStar(require_TransactWriteCommand(), exports);
    tslib_1.__exportStar(require_UpdateCommand(), exports);
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/Interfaces.js
var require_Interfaces3 = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/QueryPaginator.js
var require_QueryPaginator2 = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/QueryPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateQuery = void 0;
    var QueryCommand_1 = require_QueryCommand2();
    var DynamoDBDocument_1 = require_DynamoDBDocument();
    var DynamoDBDocumentClient_1 = require_DynamoDBDocumentClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new QueryCommand_1.QueryCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.query(input, ...args);
    };
    async function* paginateQuery(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input["Limit"] = config.pageSize;
        if (config.client instanceof DynamoDBDocument_1.DynamoDBDocument) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof DynamoDBDocumentClient_1.DynamoDBDocumentClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected DynamoDBDocument | DynamoDBDocumentClient");
        }
        yield page;
        token = page.LastEvaluatedKey;
        hasNext = !!token;
      }
      return void 0;
    }
    exports.paginateQuery = paginateQuery;
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/ScanPaginator.js
var require_ScanPaginator2 = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/ScanPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateScan = void 0;
    var ScanCommand_1 = require_ScanCommand2();
    var DynamoDBDocument_1 = require_DynamoDBDocument();
    var DynamoDBDocumentClient_1 = require_DynamoDBDocumentClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ScanCommand_1.ScanCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.scan(input, ...args);
    };
    async function* paginateScan(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input["Limit"] = config.pageSize;
        if (config.client instanceof DynamoDBDocument_1.DynamoDBDocument) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof DynamoDBDocumentClient_1.DynamoDBDocumentClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected DynamoDBDocument | DynamoDBDocumentClient");
        }
        yield page;
        token = page.LastEvaluatedKey;
        hasNext = !!token;
      }
      return void 0;
    }
    exports.paginateScan = paginateScan;
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/index.js
var require_pagination5 = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces3(), exports);
    tslib_1.__exportStar(require_QueryPaginator2(), exports);
    tslib_1.__exportStar(require_ScanPaginator2(), exports);
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/index.js
var require_dist_cjs59 = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_DynamoDBDocument(), exports);
    tslib_1.__exportStar(require_DynamoDBDocumentClient(), exports);
    tslib_1.__exportStar(require_commands4(), exports);
    tslib_1.__exportStar(require_pagination5(), exports);
  }
});

// node_modules/electrodb/src/types.js
var require_types8 = __commonJS({
  "node_modules/electrodb/src/types.js"(exports, module2) {
    var KeyTypes = {
      pk: "pk",
      sk: "sk"
    };
    var QueryTypes = {
      and: "and",
      gte: "gte",
      gt: "gt",
      lte: "lte",
      lt: "lt",
      eq: "eq",
      begins: "begins",
      between: "between",
      collection: "collection",
      clustered_collection: "clustered_collection",
      is: "is"
    };
    var MethodTypes = {
      check: "check",
      put: "put",
      get: "get",
      query: "query",
      scan: "scan",
      update: "update",
      delete: "delete",
      remove: "remove",
      patch: "patch",
      create: "create",
      batchGet: "batchGet",
      batchWrite: "batchWrite",
      upsert: "upsert",
      transactWrite: "transactWrite",
      transactGet: "transactGet"
    };
    var TransactionMethods = {
      transactWrite: MethodTypes.transactWrite,
      transactGet: MethodTypes.transactGet
    };
    var TransactionOperations = {
      [MethodTypes.get]: "Get",
      [MethodTypes.check]: "ConditionCheck",
      [MethodTypes.put]: "Put",
      [MethodTypes.create]: "Put",
      [MethodTypes.upsert]: "Update",
      [MethodTypes.update]: "Update",
      [MethodTypes.patch]: "Update",
      [MethodTypes.remove]: "Delete",
      [MethodTypes.delete]: "Delete"
    };
    var MethodTypeTranslation = {
      put: "put",
      get: "get",
      query: "query",
      scan: "scan",
      update: "update",
      delete: "delete",
      remove: "delete",
      patch: "update",
      create: "put",
      batchGet: "batchGet",
      batchWrite: "batchWrite",
      upsert: "update",
      transactWrite: "transactWrite",
      transactGet: "transactGet"
    };
    var IndexTypes = {
      isolated: "isolated",
      clustered: "clustered"
    };
    var Comparisons = {
      lte: "<=",
      lt: "<",
      gte: ">=",
      gt: ">"
    };
    var PartialComparisons = {
      lt: "<",
      gte: ">=",
      /**
       * gt becomes gte and last character of incoming value is shifted up one character code
       * example:
       * sk > '2020-09-05'
       *   expected
       *     - 2020-09-06@05:05_hero
       *     - 2020-10-05@05:05_hero
       *     - 2022-02-05@05:05_villian
       *     - 2022-06-05@05:05_clown
       *     - 2022-09-06@05:05_clown
       *   actual (bad - includes all 2020-09-05 records)
       *     - 2020-09-05@05:05_hero
       *     - 2020-09-06@05:05_hero
       *     - 2020-10-05@05:05_hero
       *     - 2022-02-05@05:05_villian
       *     - 2022-06-05@05:05_clown
       */
      gt: ">=",
      /**
       * lte becomes lt and last character of incoming value is shifted up one character code
       * example:
       * sk >= '2020-09-05'
       *   expected
       *     - 2012-02-05@05:05_clown
       *     - 2015-10-05@05:05_hero
       *     - 2017-02-05@05:05_clown
       *     - 2017-02-05@05:05_villian
       *     - 2020-02-05@05:05_clown
       *     - 2020-02-25@05:05_clown
       *     - 2020-09-05@05:05_hero
       *   actual (bad - missing all 2020-09-05 records)
       *     - 2012-02-05@05:05_clown
       *     - 2015-10-05@05:05_hero
       *     - 2017-02-05@05:05_clown
       *     - 2017-02-05@05:05_villian
       *     - 2020-02-05@05:05_clown
       *     - 2020-02-25@05:05_clown
       */
      lte: "<"
    };
    var CastTypes = ["string", "number"];
    var AttributeTypes = {
      string: "string",
      number: "number",
      boolean: "boolean",
      enum: "enum",
      map: "map",
      set: "set",
      // enumSet: "enumSet",
      list: "list",
      any: "any",
      custom: "custom",
      static: "static"
    };
    var PathTypes = {
      ...AttributeTypes,
      item: "item"
    };
    var ExpressionTypes = {
      ConditionExpression: "ConditionExpression",
      FilterExpression: "FilterExpression"
    };
    var ElectroInstance = {
      entity: Symbol("entity"),
      service: Symbol("service"),
      electro: Symbol("electro")
    };
    var ElectroInstanceTypes = {
      electro: "electro",
      service: "service",
      entity: "entity",
      model: "model"
    };
    var ModelVersions = {
      beta: "beta",
      v1: "v1",
      v2: "v2"
    };
    var EntityVersions = {
      v1: "v1"
    };
    var ServiceVersions = {
      v1: "v1"
    };
    var MaxBatchItems = {
      [MethodTypes.batchGet]: 100,
      [MethodTypes.batchWrite]: 25
    };
    var AttributeMutationMethods = {
      get: "get",
      set: "set"
    };
    var Pager = {
      raw: "raw",
      named: "named",
      item: "item",
      cursor: "cursor"
    };
    var UnprocessedTypes = {
      raw: "raw",
      item: "item"
    };
    var AttributeWildCard = "*";
    var ItemOperations = {
      "set": "set",
      "delete": "delete",
      "remove": "remove",
      "add": "add",
      "subtract": "subtract",
      "append": "append",
      "ifNotExists": "ifNotExists"
    };
    var UpsertOperations = {
      "set": "set",
      "add": "add",
      "subtract": "subtract",
      "append": "append",
      "ifNotExists": "ifNotExists"
    };
    var AttributeProxySymbol = Symbol("attribute_proxy");
    var TransactionCommitSymbol = Symbol("transaction_commit");
    var BuilderTypes = {
      update: "update",
      filter: "filter"
    };
    var ValueTypes = {
      string: "string",
      boolean: "boolean",
      number: "number",
      array: "array",
      set: "set",
      aws_set: "aws_set",
      object: "object",
      map: "map",
      null: "null",
      undefined: "undefined",
      unknown: "unknown"
    };
    var TraverserIndexes = {
      readonly: "readonly",
      required: "required",
      getters: "getters",
      setters: "setters"
    };
    var ReturnValues = {
      "default": "default",
      "none": "none",
      "all_old": "all_old",
      "updated_old": "updated_old",
      "all_new": "all_new",
      "updated_new": "updated_new"
    };
    var FormatToReturnValues = {
      "none": "NONE",
      "default": "NONE",
      "all_old": "ALL_OLD",
      "updated_old": "UPDATED_OLD",
      "all_new": "ALL_NEW",
      "updated_new": "UPDATED_NEW"
    };
    var TableIndex = "";
    var KeyCasing = {
      none: "none",
      upper: "upper",
      lower: "lower",
      default: "default"
    };
    var EventSubscriptionTypes = [
      "query",
      "results"
    ];
    var TerminalOperation = {
      go: "go",
      page: "page"
    };
    var AllPages = "all";
    var ResultOrderOption = {
      "asc": true,
      "desc": false
    };
    var ResultOrderParam = "ScanIndexForward";
    var DynamoDBAttributeTypes = Object.entries({
      string: "S",
      stringSet: "SS",
      number: "N",
      numberSet: "NS",
      binary: "B",
      binarySet: "BS",
      boolean: "BOOL",
      null: "NULL",
      list: "L",
      map: "M"
    }).reduce((obj, [name, type]) => {
      obj[name] = type;
      obj[type] = type;
      return obj;
    }, {});
    var CastKeyOptions = {
      string: "string",
      number: "number"
    };
    module2.exports = {
      Pager,
      KeyTypes,
      CastTypes,
      KeyCasing,
      PathTypes,
      IndexTypes,
      QueryTypes,
      ValueTypes,
      TableIndex,
      MethodTypes,
      Comparisons,
      BuilderTypes,
      ReturnValues,
      MaxBatchItems,
      ModelVersions,
      ItemOperations,
      AttributeTypes,
      EntityVersions,
      CastKeyOptions,
      ServiceVersions,
      ExpressionTypes,
      ElectroInstance,
      TraverserIndexes,
      UnprocessedTypes,
      AttributeWildCard,
      TerminalOperation,
      PartialComparisons,
      FormatToReturnValues,
      AttributeProxySymbol,
      ElectroInstanceTypes,
      MethodTypeTranslation,
      EventSubscriptionTypes,
      DynamoDBAttributeTypes,
      AttributeMutationMethods,
      AllPages,
      ResultOrderOption,
      ResultOrderParam,
      TransactionCommitSymbol,
      TransactionOperations,
      TransactionMethods,
      UpsertOperations
    };
  }
});

// node_modules/electrodb/src/errors.js
var require_errors = __commonJS({
  "node_modules/electrodb/src/errors.js"(exports, module2) {
    function getHelpLink(section) {
      section = section || "unknown-error-5001";
      return `https://electrodb.dev/en/reference/errors/#${section}`;
    }
    var ErrorCode = Symbol("error-code");
    var ErrorCodes = {
      NoClientDefined: {
        code: 1001,
        section: "no-client-defined-on-model",
        name: "NoClientDefined",
        sym: ErrorCode
      },
      InvalidIdentifier: {
        code: 1002,
        section: "invalid-identifier",
        name: "InvalidIdentifier",
        sym: ErrorCode
      },
      InvalidKeyCompositeAttributeTemplate: {
        code: 1003,
        section: "invalid-key-composite-attribute-template",
        name: "InvalidKeyCompositeAttributeTemplate",
        sym: ErrorCode
      },
      DuplicateIndexes: {
        code: 1004,
        section: "duplicate-indexes",
        name: "DuplicateIndexes",
        sym: ErrorCode
      },
      CollectionNoSK: {
        code: 1005,
        section: "collection-without-an-sk",
        name: "CollectionNoSK",
        sym: ErrorCode
      },
      DuplicateCollections: {
        code: 1006,
        section: "duplicate-collections",
        name: "DuplicateCollections",
        sym: ErrorCode
      },
      MissingPrimaryIndex: {
        code: 1007,
        section: "missing-primary-index",
        name: "MissingPrimaryIndex",
        sym: ErrorCode
      },
      InvalidAttributeDefinition: {
        code: 1008,
        section: "invalid-attribute-definition",
        name: "InvalidAttributeDefinition",
        sym: ErrorCode
      },
      InvalidModel: {
        code: 1009,
        section: "invalid-model",
        name: "InvalidModel",
        sym: ErrorCode
      },
      InvalidOptions: {
        code: 1010,
        section: "invalid-options",
        name: "InvalidOptions",
        sym: ErrorCode
      },
      InvalidFilter: {
        code: 1011,
        section: "filters",
        name: "InvalidFilter",
        sym: ErrorCode
      },
      InvalidWhere: {
        code: 1012,
        section: "where",
        name: "InvalidWhere",
        sym: ErrorCode
      },
      InvalidJoin: {
        code: 1013,
        section: "join",
        name: "InvalidJoin",
        sym: ErrorCode
      },
      DuplicateIndexFields: {
        code: 1014,
        section: "duplicate-index-fields",
        name: "DuplicateIndexField",
        sym: ErrorCode
      },
      DuplicateIndexCompositeAttributes: {
        code: 1015,
        section: "duplicate-index-composite-attributes",
        name: "DuplicateIndexCompositeAttributes",
        sym: ErrorCode
      },
      InvalidAttributeWatchDefinition: {
        code: 1016,
        section: "invalid-attribute-watch-definition",
        name: "InvalidAttributeWatchDefinition",
        sym: ErrorCode
      },
      IncompatibleKeyCompositeAttributeTemplate: {
        code: 1017,
        section: "incompatible-key-composite-attribute-template",
        name: "IncompatibleKeyCompositeAttributeTemplate",
        sym: ErrorCode
      },
      InvalidIndexWithAttributeName: {
        code: 1018,
        section: "invalid-index-with-attribute-name",
        name: "InvalidIndexWithAttributeName",
        sym: ErrorCode
      },
      InvalidCollectionOnIndexWithAttributeFieldNames: {
        code: 1019,
        section: "invalid-collection-on-index-with-attribute-field-names",
        name: "InvalidIndexCompositeWithAttributeName",
        sym: ErrorCode
      },
      InvalidListenerProvided: {
        code: 1020,
        section: "invalid-listener-provided",
        name: "InvalidListenerProvided",
        sym: ErrorCode
      },
      InvalidLoggerProvided: {
        code: 1020,
        section: "invalid-listener-provided",
        name: "InvalidListenerProvided",
        sym: ErrorCode
      },
      InvalidClientProvided: {
        code: 1021,
        section: "invalid-client-provided",
        name: "InvalidClientProvided",
        sym: ErrorCode
      },
      InconsistentIndexDefinition: {
        code: 1022,
        section: "inconsistent-index-definition",
        name: "Inconsistent Index Definition",
        sym: ErrorCode
      },
      MissingAttribute: {
        code: 2001,
        section: "missing-attribute",
        name: "MissingAttribute",
        sym: ErrorCode
      },
      IncompleteCompositeAttributes: {
        code: 2002,
        section: "incomplete-composite-attributes",
        name: "IncompleteCompositeAttributes",
        sym: ErrorCode
      },
      MissingTable: {
        code: 2003,
        section: "missing-table",
        name: "MissingTable",
        sym: ErrorCode
      },
      InvalidConcurrencyOption: {
        code: 2004,
        section: "invalid-concurrency-option",
        name: "InvalidConcurrencyOption",
        sym: ErrorCode
      },
      InvalidPagesOption: {
        code: 2005,
        section: "invalid-pages-option",
        name: "InvalidPagesOption",
        sym: ErrorCode
      },
      InvalidLimitOption: {
        code: 2006,
        section: "invalid-limit-option",
        name: "InvalidLimitOption",
        sym: ErrorCode
      },
      InvalidConversionKeysProvided: {
        code: 2007,
        section: "invalid-conversion-values-provided",
        name: "InvalidConversionKeysProvided",
        sym: ErrorCode
      },
      InvalidConversionCursorProvided: {
        code: 2008,
        section: "invalid-conversion-values-provided",
        name: "InvalidConversionCursorProvided",
        sym: ErrorCode
      },
      InvalidConversionCompositeProvided: {
        code: 2009,
        section: "invalid-conversion-values-provided",
        name: "InvalidConversionCompositeProvided",
        sym: ErrorCode
      },
      DuplicateUpdateCompositesProvided: {
        code: 2010,
        section: "duplicate-update-composites-provided",
        name: "DuplicateUpdateCompositesProvided",
        sym: ErrorCode
      },
      InvalidAttribute: {
        code: 3001,
        section: "invalid-attribute",
        name: "InvalidAttribute",
        sym: ErrorCode
      },
      AWSError: {
        code: 4001,
        section: "aws-error",
        name: "AWSError",
        sym: ErrorCode
      },
      UnknownError: {
        code: 5001,
        section: "unknown-error",
        name: "UnknownError",
        sym: ErrorCode
      },
      GeneralError: {
        code: 5002,
        section: "",
        name: "GeneralError",
        sym: ErrorCode
      },
      LastEvaluatedKey: {
        code: 5003,
        section: "invalid-last-evaluated-key",
        name: "LastEvaluatedKey",
        sym: ErrorCode
      },
      NoOwnerForPager: {
        code: 5004,
        section: "no-owner-for-pager",
        name: "NoOwnerForPager",
        sym: ErrorCode
      },
      NoOwnerForCursor: {
        code: 5004,
        section: "no-owner-for-pager",
        name: "NoOwnerForCursor",
        sym: ErrorCode
      },
      PagerNotUnique: {
        code: 5005,
        section: "pager-not-unique",
        name: "NoOwnerForPager",
        sym: ErrorCode
      }
    };
    function makeMessage(message, section) {
      return `${message} - For more detail on this error reference: ${getHelpLink(section)}`;
    }
    var ElectroError = class _ElectroError extends Error {
      constructor(code, message) {
        super(message);
        let detail = ErrorCodes.UnknownError;
        if (code && code.sym === ErrorCode) {
          detail = code;
        }
        this._message = message;
        this.message = makeMessage(message, detail.section);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, _ElectroError);
        }
        this.name = "ElectroError";
        this.ref = code;
        this.code = detail.code;
        this.date = Date.now();
        this.isElectroError = true;
      }
    };
    var ElectroValidationError = class extends ElectroError {
      constructor(errors = []) {
        const fields = [];
        const messages = [];
        for (let i = 0; i < errors.length; i++) {
          const error = errors[i];
          const message2 = error ? error._message || error.message : void 0;
          messages.push(message2);
          if (error instanceof ElectroUserValidationError) {
            fields.push({
              field: error.field,
              index: error.index,
              reason: message2,
              cause: error.cause,
              type: "validation"
            });
          } else if (error instanceof ElectroAttributeValidationError) {
            fields.push({
              field: error.field,
              index: error.index,
              reason: message2,
              cause: error.cause || error,
              // error | undefined
              type: "validation"
            });
          } else if (message2) {
            fields.push({
              field: "",
              index: error.index,
              reason: message2,
              cause: error !== void 0 ? error.cause || error : void 0,
              type: "fatal"
            });
          }
        }
        const message = messages.filter((message2) => typeof message2 === "string" && message2.length).join(", ") || `Invalid value(s) provided`;
        super(ErrorCodes.InvalidAttribute, message);
        this.fields = fields;
        this.name = "ElectroValidationError";
      }
    };
    var ElectroUserValidationError = class extends ElectroError {
      constructor(field, cause) {
        let message;
        let hasCause = false;
        if (typeof cause === "string") {
          message = cause;
        } else if (cause !== void 0 && typeof cause._message === "string" && cause._message.length) {
          message = cause._message;
          hasCause = true;
        } else if (cause !== void 0 && typeof cause.message === "string" && cause.message.length) {
          message = cause.message;
          hasCause = true;
        } else {
          message = "Invalid value provided";
        }
        super(ErrorCodes.InvalidAttribute, message);
        this.field = field;
        this.name = "ElectroUserValidationError";
        if (hasCause) {
          this.cause = cause;
        }
      }
    };
    var ElectroAttributeValidationError = class extends ElectroError {
      constructor(field, reason) {
        super(ErrorCodes.InvalidAttribute, reason);
        this.field = field;
      }
    };
    module2.exports = {
      ErrorCodes,
      ElectroError,
      ElectroValidationError,
      ElectroUserValidationError,
      ElectroAttributeValidationError
    };
  }
});

// node_modules/jsonschema/lib/helpers.js
var require_helpers = __commonJS({
  "node_modules/jsonschema/lib/helpers.js"(exports, module2) {
    "use strict";
    var uri = require("url");
    var ValidationError = exports.ValidationError = function ValidationError2(message, instance, schema, propertyPath, name, argument) {
      if (propertyPath) {
        this.property = propertyPath;
      }
      if (message) {
        this.message = message;
      }
      if (schema) {
        if (schema.id) {
          this.schema = schema.id;
        } else {
          this.schema = schema;
        }
      }
      if (instance !== void 0) {
        this.instance = instance;
      }
      this.name = name;
      this.argument = argument;
      this.stack = this.toString();
    };
    ValidationError.prototype.toString = function toString() {
      return this.property + " " + this.message;
    };
    var ValidatorResult = exports.ValidatorResult = function ValidatorResult2(instance, schema, options, ctx) {
      this.instance = instance;
      this.schema = schema;
      this.propertyPath = ctx.propertyPath;
      this.errors = [];
      this.throwError = options && options.throwError;
      this.disableFormat = options && options.disableFormat === true;
    };
    ValidatorResult.prototype.addError = function addError(detail) {
      var err;
      if (typeof detail == "string") {
        err = new ValidationError(detail, this.instance, this.schema, this.propertyPath);
      } else {
        if (!detail)
          throw new Error("Missing error detail");
        if (!detail.message)
          throw new Error("Missing error message");
        if (!detail.name)
          throw new Error("Missing validator type");
        err = new ValidationError(detail.message, this.instance, this.schema, this.propertyPath, detail.name, detail.argument);
      }
      if (this.throwError) {
        throw err;
      }
      this.errors.push(err);
      return err;
    };
    ValidatorResult.prototype.importErrors = function importErrors(res) {
      if (typeof res == "string" || res && res.validatorType) {
        this.addError(res);
      } else if (res && res.errors) {
        Array.prototype.push.apply(this.errors, res.errors);
      }
    };
    function stringizer(v, i) {
      return i + ": " + v.toString() + "\n";
    }
    ValidatorResult.prototype.toString = function toString(res) {
      return this.errors.map(stringizer).join("");
    };
    Object.defineProperty(ValidatorResult.prototype, "valid", { get: function() {
      return !this.errors.length;
    } });
    var SchemaError = exports.SchemaError = function SchemaError2(msg, schema) {
      this.message = msg;
      this.schema = schema;
      Error.call(this, msg);
      Error.captureStackTrace(this, SchemaError2);
    };
    SchemaError.prototype = Object.create(
      Error.prototype,
      {
        constructor: { value: SchemaError, enumerable: false },
        name: { value: "SchemaError", enumerable: false }
      }
    );
    var SchemaContext = exports.SchemaContext = function SchemaContext2(schema, options, propertyPath, base, schemas) {
      this.schema = schema;
      this.options = options;
      this.propertyPath = propertyPath;
      this.base = base;
      this.schemas = schemas;
    };
    SchemaContext.prototype.resolve = function resolve(target) {
      return uri.resolve(this.base, target);
    };
    SchemaContext.prototype.makeChild = function makeChild(schema, propertyName) {
      var propertyPath = propertyName === void 0 ? this.propertyPath : this.propertyPath + makeSuffix(propertyName);
      var base = uri.resolve(this.base, schema.id || "");
      var ctx = new SchemaContext(schema, this.options, propertyPath, base, Object.create(this.schemas));
      if (schema.id && !ctx.schemas[base]) {
        ctx.schemas[base] = schema;
      }
      return ctx;
    };
    var FORMAT_REGEXPS = exports.FORMAT_REGEXPS = {
      "date-time": /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\.\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,
      "date": /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,
      "time": /^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,
      "email": /^(?:[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!\.)){0,61}[a-zA-Z0-9]?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/,
      "ip-address": /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,
      "ipv6": /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,
      "uri": /^[a-zA-Z][a-zA-Z0-9+-.]*:[^\s]*$/,
      "color": /^(#?([0-9A-Fa-f]{3}){1,2}\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\)))$/,
      // hostname regex from: http://stackoverflow.com/a/1420225/5628
      "hostname": /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,
      "host-name": /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,
      "alpha": /^[a-zA-Z]+$/,
      "alphanumeric": /^[a-zA-Z0-9]+$/,
      "utc-millisec": function(input) {
        return typeof input === "string" && parseFloat(input) === parseInt(input, 10) && !isNaN(input);
      },
      "regex": function(input) {
        var result = true;
        try {
          new RegExp(input);
        } catch (e) {
          result = false;
        }
        return result;
      },
      "style": /\s*(.+?):\s*([^;]+);?/,
      "phone": /^\+(?:[0-9] ?){6,14}[0-9]$/
    };
    FORMAT_REGEXPS.regexp = FORMAT_REGEXPS.regex;
    FORMAT_REGEXPS.pattern = FORMAT_REGEXPS.regex;
    FORMAT_REGEXPS.ipv4 = FORMAT_REGEXPS["ip-address"];
    exports.isFormat = function isFormat(input, format, validator) {
      if (typeof input === "string" && FORMAT_REGEXPS[format] !== void 0) {
        if (FORMAT_REGEXPS[format] instanceof RegExp) {
          return FORMAT_REGEXPS[format].test(input);
        }
        if (typeof FORMAT_REGEXPS[format] === "function") {
          return FORMAT_REGEXPS[format](input);
        }
      } else if (validator && validator.customFormats && typeof validator.customFormats[format] === "function") {
        return validator.customFormats[format](input);
      }
      return true;
    };
    var makeSuffix = exports.makeSuffix = function makeSuffix2(key) {
      key = key.toString();
      if (!key.match(/[.\s\[\]]/) && !key.match(/^[\d]/)) {
        return "." + key;
      }
      if (key.match(/^\d+$/)) {
        return "[" + key + "]";
      }
      return "[" + JSON.stringify(key) + "]";
    };
    exports.deepCompareStrict = function deepCompareStrict(a, b) {
      if (typeof a !== typeof b) {
        return false;
      }
      if (Array.isArray(a)) {
        if (!Array.isArray(b)) {
          return false;
        }
        if (a.length !== b.length) {
          return false;
        }
        return a.every(function(v, i) {
          return deepCompareStrict(a[i], b[i]);
        });
      }
      if (typeof a === "object") {
        if (!a || !b) {
          return a === b;
        }
        var aKeys = Object.keys(a);
        var bKeys = Object.keys(b);
        if (aKeys.length !== bKeys.length) {
          return false;
        }
        return aKeys.every(function(v) {
          return deepCompareStrict(a[v], b[v]);
        });
      }
      return a === b;
    };
    function deepMerger(target, dst, e, i) {
      if (typeof e === "object") {
        dst[i] = deepMerge(target[i], e);
      } else {
        if (target.indexOf(e) === -1) {
          dst.push(e);
        }
      }
    }
    function copyist(src, dst, key) {
      dst[key] = src[key];
    }
    function copyistWithDeepMerge(target, src, dst, key) {
      if (typeof src[key] !== "object" || !src[key]) {
        dst[key] = src[key];
      } else {
        if (!target[key]) {
          dst[key] = src[key];
        } else {
          dst[key] = deepMerge(target[key], src[key]);
        }
      }
    }
    function deepMerge(target, src) {
      var array = Array.isArray(src);
      var dst = array && [] || {};
      if (array) {
        target = target || [];
        dst = dst.concat(target);
        src.forEach(deepMerger.bind(null, target, dst));
      } else {
        if (target && typeof target === "object") {
          Object.keys(target).forEach(copyist.bind(null, target, dst));
        }
        Object.keys(src).forEach(copyistWithDeepMerge.bind(null, target, src, dst));
      }
      return dst;
    }
    module2.exports.deepMerge = deepMerge;
    exports.objectGetPath = function objectGetPath(o, s) {
      var parts = s.split("/").slice(1);
      var k;
      while (typeof (k = parts.shift()) == "string") {
        var n = decodeURIComponent(k.replace(/~0/, "~").replace(/~1/g, "/"));
        if (!(n in o))
          return;
        o = o[n];
      }
      return o;
    };
    function pathEncoder(v) {
      return "/" + encodeURIComponent(v).replace(/~/g, "%7E");
    }
    exports.encodePath = function encodePointer(a) {
      return a.map(pathEncoder).join("");
    };
    exports.getDecimalPlaces = function getDecimalPlaces(number) {
      var decimalPlaces = 0;
      if (isNaN(number))
        return decimalPlaces;
      if (typeof number !== "number") {
        number = Number(number);
      }
      var parts = number.toString().split("e");
      if (parts.length === 2) {
        if (parts[1][0] !== "-") {
          return decimalPlaces;
        } else {
          decimalPlaces = Number(parts[1].slice(1));
        }
      }
      var decimalParts = parts[0].split(".");
      if (decimalParts.length === 2) {
        decimalPlaces += decimalParts[1].length;
      }
      return decimalPlaces;
    };
  }
});

// node_modules/jsonschema/lib/attribute.js
var require_attribute = __commonJS({
  "node_modules/jsonschema/lib/attribute.js"(exports, module2) {
    "use strict";
    var helpers = require_helpers();
    var ValidatorResult = helpers.ValidatorResult;
    var SchemaError = helpers.SchemaError;
    var attribute = {};
    attribute.ignoreProperties = {
      // informative properties
      "id": true,
      "default": true,
      "description": true,
      "title": true,
      // arguments to other properties
      "exclusiveMinimum": true,
      "exclusiveMaximum": true,
      "additionalItems": true,
      // special-handled properties
      "$schema": true,
      "$ref": true,
      "extends": true
    };
    var validators = attribute.validators = {};
    validators.type = function validateType(instance, schema, options, ctx) {
      if (instance === void 0) {
        return null;
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      var types = Array.isArray(schema.type) ? schema.type : [schema.type];
      if (!types.some(this.testType.bind(this, instance, schema, options, ctx))) {
        var list = types.map(function(v) {
          return v.id && "<" + v.id + ">" || v + "";
        });
        result.addError({
          name: "type",
          argument: list,
          message: "is not of a type(s) " + list
        });
      }
      return result;
    };
    function testSchemaNoThrow(instance, options, ctx, callback, schema) {
      var throwError = options.throwError;
      options.throwError = false;
      var res = this.validateSchema(instance, schema, options, ctx);
      options.throwError = throwError;
      if (!res.valid && callback instanceof Function) {
        callback(res);
      }
      return res.valid;
    }
    validators.anyOf = function validateAnyOf(instance, schema, options, ctx) {
      if (instance === void 0) {
        return null;
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      var inner = new ValidatorResult(instance, schema, options, ctx);
      if (!Array.isArray(schema.anyOf)) {
        throw new SchemaError("anyOf must be an array");
      }
      if (!schema.anyOf.some(
        testSchemaNoThrow.bind(
          this,
          instance,
          options,
          ctx,
          function(res) {
            inner.importErrors(res);
          }
        )
      )) {
        var list = schema.anyOf.map(function(v, i) {
          return v.id && "<" + v.id + ">" || v.title && JSON.stringify(v.title) || v["$ref"] && "<" + v["$ref"] + ">" || "[subschema " + i + "]";
        });
        if (options.nestedErrors) {
          result.importErrors(inner);
        }
        result.addError({
          name: "anyOf",
          argument: list,
          message: "is not any of " + list.join(",")
        });
      }
      return result;
    };
    validators.allOf = function validateAllOf(instance, schema, options, ctx) {
      if (instance === void 0) {
        return null;
      }
      if (!Array.isArray(schema.allOf)) {
        throw new SchemaError("allOf must be an array");
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      var self2 = this;
      schema.allOf.forEach(function(v, i) {
        var valid = self2.validateSchema(instance, v, options, ctx);
        if (!valid.valid) {
          var msg = v.id && "<" + v.id + ">" || v.title && JSON.stringify(v.title) || v["$ref"] && "<" + v["$ref"] + ">" || "[subschema " + i + "]";
          result.addError({
            name: "allOf",
            argument: { id: msg, length: valid.errors.length, valid },
            message: "does not match allOf schema " + msg + " with " + valid.errors.length + " error[s]:"
          });
          result.importErrors(valid);
        }
      });
      return result;
    };
    validators.oneOf = function validateOneOf(instance, schema, options, ctx) {
      if (instance === void 0) {
        return null;
      }
      if (!Array.isArray(schema.oneOf)) {
        throw new SchemaError("oneOf must be an array");
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      var inner = new ValidatorResult(instance, schema, options, ctx);
      var count = schema.oneOf.filter(
        testSchemaNoThrow.bind(
          this,
          instance,
          options,
          ctx,
          function(res) {
            inner.importErrors(res);
          }
        )
      ).length;
      var list = schema.oneOf.map(function(v, i) {
        return v.id && "<" + v.id + ">" || v.title && JSON.stringify(v.title) || v["$ref"] && "<" + v["$ref"] + ">" || "[subschema " + i + "]";
      });
      if (count !== 1) {
        if (options.nestedErrors) {
          result.importErrors(inner);
        }
        result.addError({
          name: "oneOf",
          argument: list,
          message: "is not exactly one from " + list.join(",")
        });
      }
      return result;
    };
    validators.properties = function validateProperties(instance, schema, options, ctx) {
      if (!this.types.object(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var properties = schema.properties || {};
      for (var property in properties) {
        if (typeof options.preValidateProperty == "function") {
          options.preValidateProperty(instance, property, properties[property], options, ctx);
        }
        var prop = Object.hasOwnProperty.call(instance, property) ? instance[property] : void 0;
        var res = this.validateSchema(prop, properties[property], options, ctx.makeChild(properties[property], property));
        if (res.instance !== result.instance[property])
          result.instance[property] = res.instance;
        result.importErrors(res);
      }
      return result;
    };
    function testAdditionalProperty(instance, schema, options, ctx, property, result) {
      if (!this.types.object(instance))
        return;
      if (schema.properties && schema.properties[property] !== void 0) {
        return;
      }
      if (schema.additionalProperties === false) {
        result.addError({
          name: "additionalProperties",
          argument: property,
          message: "additionalProperty " + JSON.stringify(property) + " exists in instance when not allowed"
        });
      } else {
        var additionalProperties = schema.additionalProperties || {};
        if (typeof options.preValidateProperty == "function") {
          options.preValidateProperty(instance, property, additionalProperties, options, ctx);
        }
        var res = this.validateSchema(instance[property], additionalProperties, options, ctx.makeChild(additionalProperties, property));
        if (res.instance !== result.instance[property])
          result.instance[property] = res.instance;
        result.importErrors(res);
      }
    }
    validators.patternProperties = function validatePatternProperties(instance, schema, options, ctx) {
      if (!this.types.object(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var patternProperties = schema.patternProperties || {};
      for (var property in instance) {
        var test = true;
        for (var pattern in patternProperties) {
          var expr = new RegExp(pattern, "u");
          if (!expr.test(property)) {
            continue;
          }
          test = false;
          if (typeof options.preValidateProperty == "function") {
            options.preValidateProperty(instance, property, patternProperties[pattern], options, ctx);
          }
          var res = this.validateSchema(instance[property], patternProperties[pattern], options, ctx.makeChild(patternProperties[pattern], property));
          if (res.instance !== result.instance[property])
            result.instance[property] = res.instance;
          result.importErrors(res);
        }
        if (test) {
          testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);
        }
      }
      return result;
    };
    validators.additionalProperties = function validateAdditionalProperties(instance, schema, options, ctx) {
      if (!this.types.object(instance))
        return;
      if (schema.patternProperties) {
        return null;
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      for (var property in instance) {
        testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);
      }
      return result;
    };
    validators.minProperties = function validateMinProperties(instance, schema, options, ctx) {
      if (!this.types.object(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var keys = Object.keys(instance);
      if (!(keys.length >= schema.minProperties)) {
        result.addError({
          name: "minProperties",
          argument: schema.minProperties,
          message: "does not meet minimum property length of " + schema.minProperties
        });
      }
      return result;
    };
    validators.maxProperties = function validateMaxProperties(instance, schema, options, ctx) {
      if (!this.types.object(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var keys = Object.keys(instance);
      if (!(keys.length <= schema.maxProperties)) {
        result.addError({
          name: "maxProperties",
          argument: schema.maxProperties,
          message: "does not meet maximum property length of " + schema.maxProperties
        });
      }
      return result;
    };
    validators.items = function validateItems(instance, schema, options, ctx) {
      var self2 = this;
      if (!this.types.array(instance))
        return;
      if (!schema.items)
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      instance.every(function(value, i) {
        var items = Array.isArray(schema.items) ? schema.items[i] || schema.additionalItems : schema.items;
        if (items === void 0) {
          return true;
        }
        if (items === false) {
          result.addError({
            name: "items",
            message: "additionalItems not permitted"
          });
          return false;
        }
        var res = self2.validateSchema(value, items, options, ctx.makeChild(items, i));
        if (res.instance !== result.instance[i])
          result.instance[i] = res.instance;
        result.importErrors(res);
        return true;
      });
      return result;
    };
    validators.minimum = function validateMinimum(instance, schema, options, ctx) {
      if (!this.types.number(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var valid = true;
      if (schema.exclusiveMinimum && schema.exclusiveMinimum === true) {
        valid = instance > schema.minimum;
      } else {
        valid = instance >= schema.minimum;
      }
      if (!valid) {
        result.addError({
          name: "minimum",
          argument: schema.minimum,
          message: "must have a minimum value of " + schema.minimum
        });
      }
      return result;
    };
    validators.maximum = function validateMaximum(instance, schema, options, ctx) {
      if (!this.types.number(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var valid;
      if (schema.exclusiveMaximum && schema.exclusiveMaximum === true) {
        valid = instance < schema.maximum;
      } else {
        valid = instance <= schema.maximum;
      }
      if (!valid) {
        result.addError({
          name: "maximum",
          argument: schema.maximum,
          message: "must have a maximum value of " + schema.maximum
        });
      }
      return result;
    };
    var validateMultipleOfOrDivisbleBy = function validateMultipleOfOrDivisbleBy2(instance, schema, options, ctx, validationType, errorMessage) {
      if (!this.types.number(instance))
        return;
      var validationArgument = schema[validationType];
      if (validationArgument == 0) {
        throw new SchemaError(validationType + " cannot be zero");
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      var instanceDecimals = helpers.getDecimalPlaces(instance);
      var divisorDecimals = helpers.getDecimalPlaces(validationArgument);
      var maxDecimals = Math.max(instanceDecimals, divisorDecimals);
      var multiplier = Math.pow(10, maxDecimals);
      if (Math.round(instance * multiplier) % Math.round(validationArgument * multiplier) !== 0) {
        result.addError({
          name: validationType,
          argument: validationArgument,
          message: errorMessage + JSON.stringify(validationArgument)
        });
      }
      return result;
    };
    validators.multipleOf = function validateMultipleOf(instance, schema, options, ctx) {
      return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, "multipleOf", "is not a multiple of (divisible by) ");
    };
    validators.divisibleBy = function validateDivisibleBy(instance, schema, options, ctx) {
      return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, "divisibleBy", "is not divisible by (multiple of) ");
    };
    validators.required = function validateRequired(instance, schema, options, ctx) {
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (instance === void 0 && schema.required === true) {
        result.addError({
          name: "required",
          message: "is required"
        });
      } else if (this.types.object(instance) && Array.isArray(schema.required)) {
        schema.required.forEach(function(n) {
          if (instance[n] === void 0) {
            result.addError({
              name: "required",
              argument: n,
              message: "requires property " + JSON.stringify(n)
            });
          }
        });
      }
      return result;
    };
    validators.pattern = function validatePattern(instance, schema, options, ctx) {
      if (!this.types.string(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var regexp = new RegExp(schema.pattern, "u");
      if (!instance.match(regexp)) {
        result.addError({
          name: "pattern",
          argument: schema.pattern,
          message: "does not match pattern " + JSON.stringify(schema.pattern.toString())
        });
      }
      return result;
    };
    validators.format = function validateFormat(instance, schema, options, ctx) {
      if (instance === void 0)
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (!result.disableFormat && !helpers.isFormat(instance, schema.format, this)) {
        result.addError({
          name: "format",
          argument: schema.format,
          message: "does not conform to the " + JSON.stringify(schema.format) + " format"
        });
      }
      return result;
    };
    validators.minLength = function validateMinLength(instance, schema, options, ctx) {
      if (!this.types.string(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var hsp = instance.match(/[\uDC00-\uDFFF]/g);
      var length = instance.length - (hsp ? hsp.length : 0);
      if (!(length >= schema.minLength)) {
        result.addError({
          name: "minLength",
          argument: schema.minLength,
          message: "does not meet minimum length of " + schema.minLength
        });
      }
      return result;
    };
    validators.maxLength = function validateMaxLength(instance, schema, options, ctx) {
      if (!this.types.string(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var hsp = instance.match(/[\uDC00-\uDFFF]/g);
      var length = instance.length - (hsp ? hsp.length : 0);
      if (!(length <= schema.maxLength)) {
        result.addError({
          name: "maxLength",
          argument: schema.maxLength,
          message: "does not meet maximum length of " + schema.maxLength
        });
      }
      return result;
    };
    validators.minItems = function validateMinItems(instance, schema, options, ctx) {
      if (!this.types.array(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (!(instance.length >= schema.minItems)) {
        result.addError({
          name: "minItems",
          argument: schema.minItems,
          message: "does not meet minimum length of " + schema.minItems
        });
      }
      return result;
    };
    validators.maxItems = function validateMaxItems(instance, schema, options, ctx) {
      if (!this.types.array(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (!(instance.length <= schema.maxItems)) {
        result.addError({
          name: "maxItems",
          argument: schema.maxItems,
          message: "does not meet maximum length of " + schema.maxItems
        });
      }
      return result;
    };
    function testArrays(v, i, a) {
      var j, len = a.length;
      for (j = i + 1, len; j < len; j++) {
        if (helpers.deepCompareStrict(v, a[j])) {
          return false;
        }
      }
      return true;
    }
    validators.uniqueItems = function validateUniqueItems(instance, schema, options, ctx) {
      if (schema.uniqueItems !== true)
        return;
      if (!this.types.array(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (!instance.every(testArrays)) {
        result.addError({
          name: "uniqueItems",
          message: "contains duplicate item"
        });
      }
      return result;
    };
    validators.dependencies = function validateDependencies(instance, schema, options, ctx) {
      if (!this.types.object(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      for (var property in schema.dependencies) {
        if (instance[property] === void 0) {
          continue;
        }
        var dep = schema.dependencies[property];
        var childContext = ctx.makeChild(dep, property);
        if (typeof dep == "string") {
          dep = [dep];
        }
        if (Array.isArray(dep)) {
          dep.forEach(function(prop) {
            if (instance[prop] === void 0) {
              result.addError({
                // FIXME there's two different "dependencies" errors here with slightly different outputs
                // Can we make these the same? Or should we create different error types?
                name: "dependencies",
                argument: childContext.propertyPath,
                message: "property " + prop + " not found, required by " + childContext.propertyPath
              });
            }
          });
        } else {
          var res = this.validateSchema(instance, dep, options, childContext);
          if (result.instance !== res.instance)
            result.instance = res.instance;
          if (res && res.errors.length) {
            result.addError({
              name: "dependencies",
              argument: childContext.propertyPath,
              message: "does not meet dependency required by " + childContext.propertyPath
            });
            result.importErrors(res);
          }
        }
      }
      return result;
    };
    validators["enum"] = function validateEnum(instance, schema, options, ctx) {
      if (instance === void 0) {
        return null;
      }
      if (!Array.isArray(schema["enum"])) {
        throw new SchemaError("enum expects an array", schema);
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (!schema["enum"].some(helpers.deepCompareStrict.bind(null, instance))) {
        result.addError({
          name: "enum",
          argument: schema["enum"],
          message: "is not one of enum values: " + schema["enum"].map(String).join(",")
        });
      }
      return result;
    };
    validators["const"] = function validateEnum(instance, schema, options, ctx) {
      if (instance === void 0) {
        return null;
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (!helpers.deepCompareStrict(schema["const"], instance)) {
        result.addError({
          name: "const",
          argument: schema["const"],
          message: "does not exactly match expected constant: " + schema["const"]
        });
      }
      return result;
    };
    validators.not = validators.disallow = function validateNot(instance, schema, options, ctx) {
      var self2 = this;
      if (instance === void 0)
        return null;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var notTypes = schema.not || schema.disallow;
      if (!notTypes)
        return null;
      if (!Array.isArray(notTypes))
        notTypes = [notTypes];
      notTypes.forEach(function(type) {
        if (self2.testType(instance, schema, options, ctx, type)) {
          var schemaId = type && type.id && "<" + type.id + ">" || type;
          result.addError({
            name: "not",
            argument: schemaId,
            message: "is of prohibited type " + schemaId
          });
        }
      });
      return result;
    };
    module2.exports = attribute;
  }
});

// node_modules/jsonschema/lib/scan.js
var require_scan = __commonJS({
  "node_modules/jsonschema/lib/scan.js"(exports, module2) {
    "use strict";
    var urilib = require("url");
    var helpers = require_helpers();
    module2.exports.SchemaScanResult = SchemaScanResult;
    function SchemaScanResult(found, ref) {
      this.id = found;
      this.ref = ref;
    }
    module2.exports.scan = function scan(base, schema) {
      function scanSchema(baseuri, schema2) {
        if (!schema2 || typeof schema2 != "object")
          return;
        if (schema2.$ref) {
          var resolvedUri = urilib.resolve(baseuri, schema2.$ref);
          ref[resolvedUri] = ref[resolvedUri] ? ref[resolvedUri] + 1 : 0;
          return;
        }
        var ourBase = schema2.id ? urilib.resolve(baseuri, schema2.id) : baseuri;
        if (ourBase) {
          if (ourBase.indexOf("#") < 0)
            ourBase += "#";
          if (found[ourBase]) {
            if (!helpers.deepCompareStrict(found[ourBase], schema2)) {
              throw new Error("Schema <" + schema2 + "> already exists with different definition");
            }
            return found[ourBase];
          }
          found[ourBase] = schema2;
          if (ourBase[ourBase.length - 1] == "#") {
            found[ourBase.substring(0, ourBase.length - 1)] = schema2;
          }
        }
        scanArray(ourBase + "/items", Array.isArray(schema2.items) ? schema2.items : [schema2.items]);
        scanArray(ourBase + "/extends", Array.isArray(schema2.extends) ? schema2.extends : [schema2.extends]);
        scanSchema(ourBase + "/additionalItems", schema2.additionalItems);
        scanObject(ourBase + "/properties", schema2.properties);
        scanSchema(ourBase + "/additionalProperties", schema2.additionalProperties);
        scanObject(ourBase + "/definitions", schema2.definitions);
        scanObject(ourBase + "/patternProperties", schema2.patternProperties);
        scanObject(ourBase + "/dependencies", schema2.dependencies);
        scanArray(ourBase + "/disallow", schema2.disallow);
        scanArray(ourBase + "/allOf", schema2.allOf);
        scanArray(ourBase + "/anyOf", schema2.anyOf);
        scanArray(ourBase + "/oneOf", schema2.oneOf);
        scanSchema(ourBase + "/not", schema2.not);
      }
      function scanArray(baseuri, schemas) {
        if (!Array.isArray(schemas))
          return;
        for (var i = 0; i < schemas.length; i++) {
          scanSchema(baseuri + "/" + i, schemas[i]);
        }
      }
      function scanObject(baseuri, schemas) {
        if (!schemas || typeof schemas != "object")
          return;
        for (var p in schemas) {
          scanSchema(baseuri + "/" + p, schemas[p]);
        }
      }
      var found = {};
      var ref = {};
      scanSchema(base, schema);
      return new SchemaScanResult(found, ref);
    };
  }
});

// node_modules/jsonschema/lib/validator.js
var require_validator2 = __commonJS({
  "node_modules/jsonschema/lib/validator.js"(exports, module2) {
    "use strict";
    var urilib = require("url");
    var attribute = require_attribute();
    var helpers = require_helpers();
    var scanSchema = require_scan().scan;
    var ValidatorResult = helpers.ValidatorResult;
    var SchemaError = helpers.SchemaError;
    var SchemaContext = helpers.SchemaContext;
    var anonymousBase = "/";
    var Validator = function Validator2() {
      this.customFormats = Object.create(Validator2.prototype.customFormats);
      this.schemas = {};
      this.unresolvedRefs = [];
      this.types = Object.create(types);
      this.attributes = Object.create(attribute.validators);
    };
    Validator.prototype.customFormats = {};
    Validator.prototype.schemas = null;
    Validator.prototype.types = null;
    Validator.prototype.attributes = null;
    Validator.prototype.unresolvedRefs = null;
    Validator.prototype.addSchema = function addSchema(schema, base) {
      var self2 = this;
      if (!schema) {
        return null;
      }
      var scan = scanSchema(base || anonymousBase, schema);
      var ourUri = base || schema.id;
      for (var uri in scan.id) {
        this.schemas[uri] = scan.id[uri];
      }
      for (var uri in scan.ref) {
        this.unresolvedRefs.push(uri);
      }
      this.unresolvedRefs = this.unresolvedRefs.filter(function(uri2) {
        return typeof self2.schemas[uri2] === "undefined";
      });
      return this.schemas[ourUri];
    };
    Validator.prototype.addSubSchemaArray = function addSubSchemaArray(baseuri, schemas) {
      if (!Array.isArray(schemas))
        return;
      for (var i = 0; i < schemas.length; i++) {
        this.addSubSchema(baseuri, schemas[i]);
      }
    };
    Validator.prototype.addSubSchemaObject = function addSubSchemaArray(baseuri, schemas) {
      if (!schemas || typeof schemas != "object")
        return;
      for (var p in schemas) {
        this.addSubSchema(baseuri, schemas[p]);
      }
    };
    Validator.prototype.setSchemas = function setSchemas(schemas) {
      this.schemas = schemas;
    };
    Validator.prototype.getSchema = function getSchema(urn) {
      return this.schemas[urn];
    };
    Validator.prototype.validate = function validate2(instance, schema, options, ctx) {
      if (!options) {
        options = {};
      }
      var propertyName = options.propertyName || "instance";
      var base = urilib.resolve(options.base || anonymousBase, schema.id || "");
      if (!ctx) {
        ctx = new SchemaContext(schema, options, propertyName, base, Object.create(this.schemas));
        if (!ctx.schemas[base]) {
          ctx.schemas[base] = schema;
        }
        var found = scanSchema(base, schema);
        for (var n in found.id) {
          var sch = found.id[n];
          ctx.schemas[n] = sch;
        }
      }
      if (schema) {
        var result = this.validateSchema(instance, schema, options, ctx);
        if (!result) {
          throw new Error("Result undefined");
        }
        return result;
      }
      throw new SchemaError("no schema specified", schema);
    };
    function shouldResolve(schema) {
      var ref = typeof schema === "string" ? schema : schema.$ref;
      if (typeof ref == "string")
        return ref;
      return false;
    }
    Validator.prototype.validateSchema = function validateSchema(instance, schema, options, ctx) {
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (typeof schema === "boolean") {
        if (schema === true) {
          schema = {};
        } else if (schema === false) {
          schema = { type: [] };
        }
      } else if (!schema) {
        throw new Error("schema is undefined");
      }
      if (schema["extends"]) {
        if (Array.isArray(schema["extends"])) {
          var schemaobj = { schema, ctx };
          schema["extends"].forEach(this.schemaTraverser.bind(this, schemaobj));
          schema = schemaobj.schema;
          schemaobj.schema = null;
          schemaobj.ctx = null;
          schemaobj = null;
        } else {
          schema = helpers.deepMerge(schema, this.superResolve(schema["extends"], ctx));
        }
      }
      var switchSchema = shouldResolve(schema);
      if (switchSchema) {
        var resolved = this.resolve(schema, switchSchema, ctx);
        var subctx = new SchemaContext(resolved.subschema, options, ctx.propertyPath, resolved.switchSchema, ctx.schemas);
        return this.validateSchema(instance, resolved.subschema, options, subctx);
      }
      var skipAttributes = options && options.skipAttributes || [];
      for (var key in schema) {
        if (!attribute.ignoreProperties[key] && skipAttributes.indexOf(key) < 0) {
          var validatorErr = null;
          var validator = this.attributes[key];
          if (validator) {
            validatorErr = validator.call(this, instance, schema, options, ctx);
          } else if (options.allowUnknownAttributes === false) {
            throw new SchemaError("Unsupported attribute: " + key, schema);
          }
          if (validatorErr) {
            result.importErrors(validatorErr);
          }
        }
      }
      if (typeof options.rewrite == "function") {
        var value = options.rewrite.call(this, instance, schema, options, ctx);
        result.instance = value;
      }
      return result;
    };
    Validator.prototype.schemaTraverser = function schemaTraverser(schemaobj, s) {
      schemaobj.schema = helpers.deepMerge(schemaobj.schema, this.superResolve(s, schemaobj.ctx));
    };
    Validator.prototype.superResolve = function superResolve(schema, ctx) {
      var ref = shouldResolve(schema);
      if (ref) {
        return this.resolve(schema, ref, ctx).subschema;
      }
      return schema;
    };
    Validator.prototype.resolve = function resolve(schema, switchSchema, ctx) {
      switchSchema = ctx.resolve(switchSchema);
      if (ctx.schemas[switchSchema]) {
        return { subschema: ctx.schemas[switchSchema], switchSchema };
      }
      var parsed = urilib.parse(switchSchema);
      var fragment = parsed && parsed.hash;
      var document = fragment && fragment.length && switchSchema.substr(0, switchSchema.length - fragment.length);
      if (!document || !ctx.schemas[document]) {
        throw new SchemaError("no such schema <" + switchSchema + ">", schema);
      }
      var subschema = helpers.objectGetPath(ctx.schemas[document], fragment.substr(1));
      if (subschema === void 0) {
        throw new SchemaError("no such schema " + fragment + " located in <" + document + ">", schema);
      }
      return { subschema, switchSchema };
    };
    Validator.prototype.testType = function validateType(instance, schema, options, ctx, type) {
      if (typeof this.types[type] == "function") {
        return this.types[type].call(this, instance);
      }
      if (type && typeof type == "object") {
        var res = this.validateSchema(instance, type, options, ctx);
        return res === void 0 || !(res && res.errors.length);
      }
      return true;
    };
    var types = Validator.prototype.types = {};
    types.string = function testString(instance) {
      return typeof instance == "string";
    };
    types.number = function testNumber(instance) {
      return typeof instance == "number" && isFinite(instance);
    };
    types.integer = function testInteger(instance) {
      return typeof instance == "number" && instance % 1 === 0;
    };
    types.boolean = function testBoolean(instance) {
      return typeof instance == "boolean";
    };
    types.array = function testArray(instance) {
      return Array.isArray(instance);
    };
    types["null"] = function testNull(instance) {
      return instance === null;
    };
    types.date = function testDate(instance) {
      return instance instanceof Date;
    };
    types.any = function testAny(instance) {
      return true;
    };
    types.object = function testObject(instance) {
      return instance && typeof instance === "object" && !Array.isArray(instance) && !(instance instanceof Date);
    };
    module2.exports = Validator;
  }
});

// node_modules/jsonschema/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/jsonschema/lib/index.js"(exports, module2) {
    "use strict";
    var Validator = module2.exports.Validator = require_validator2();
    module2.exports.ValidatorResult = require_helpers().ValidatorResult;
    module2.exports.ValidationError = require_helpers().ValidationError;
    module2.exports.SchemaError = require_helpers().SchemaError;
    module2.exports.SchemaScanResult = require_scan().SchemaScanResult;
    module2.exports.scan = require_scan().scan;
    module2.exports.validate = function(instance, schema, options) {
      var v = new Validator();
      return v.validate(instance, schema, options);
    };
  }
});

// node_modules/electrodb/src/validations.js
var require_validations = __commonJS({
  "node_modules/electrodb/src/validations.js"(exports, module2) {
    var e = require_errors();
    var { KeyCasing } = require_types8();
    var Validator = require_lib2().Validator;
    Validator.prototype.customFormats.isFunction = function(input) {
      return typeof input === "function";
    };
    Validator.prototype.customFormats.isFunctionOrString = function(input) {
      return typeof input === "function" || typeof input === "string";
    };
    Validator.prototype.customFormats.isFunctionOrRegexp = function(input) {
      return typeof input === "function" || input instanceof RegExp;
    };
    var v = new Validator();
    var Attribute = {
      id: "/Attribute",
      type: ["object", "string", "array"],
      required: ["type"],
      properties: {
        type: {
          // todo: only specific values
          type: ["string", "array"]
          // enum: ["string", "number", "boolean", "enum"],
        },
        field: {
          type: "string"
        },
        hidden: {
          type: "boolean"
        },
        watch: {
          type: ["array", "string"],
          items: {
            type: "string"
          }
        },
        label: {
          type: "string"
        },
        readOnly: {
          type: "boolean"
        },
        required: {
          type: "boolean"
        },
        cast: {
          type: "string",
          enum: ["string", "number"]
        },
        default: {
          type: "any"
        },
        validate: {
          type: "any",
          format: "isFunctionOrRegexp"
        },
        get: {
          type: "any",
          format: "isFunction"
        },
        set: {
          type: "any",
          format: "isFunction"
        },
        padding: {
          type: "object",
          required: ["length", "char"],
          properties: {
            length: {
              type: "number"
            },
            char: {
              type: "string"
            }
          }
        }
      }
    };
    var Index = {
      id: "/Index",
      type: "object",
      properties: {
        pk: {
          type: "object",
          required: true,
          properties: {
            field: {
              type: "string",
              required: true
            },
            facets: {
              type: ["array", "string"],
              items: {
                type: "string"
              },
              required: false
            },
            composite: {
              type: ["array"],
              items: {
                type: "string"
              },
              required: false
            },
            template: {
              type: "string",
              required: false
            },
            casing: {
              type: "string",
              enum: ["upper", "lower", "none", "default"],
              required: false
            },
            cast: {
              type: "string",
              enum: ["string", "number"],
              required: false
            }
          }
        },
        sk: {
          type: "object",
          required: ["field"],
          properties: {
            field: {
              type: "string",
              required: true
            },
            facets: {
              type: ["array", "string"],
              required: false,
              items: {
                type: "string"
              }
            },
            composite: {
              type: ["array"],
              required: false,
              items: {
                type: "string"
              }
            },
            template: {
              type: "string",
              required: false
            },
            casing: {
              type: "string",
              enum: ["upper", "lower", "none", "default"],
              required: false
            },
            cast: {
              type: "string",
              enum: ["string", "number"],
              required: false
            }
          }
        },
        index: {
          type: "string"
        },
        collection: {
          type: ["array", "string"]
        },
        type: {
          type: "string",
          enum: ["clustered", "isolated"],
          required: false
        }
      }
    };
    var Modelv1 = {
      type: "object",
      required: true,
      properties: {
        model: {
          type: "object",
          required: true,
          properties: {
            entity: {
              type: "string",
              required: true
            },
            version: {
              type: "string",
              required: true
            },
            service: {
              type: "string",
              required: true
            }
          }
        },
        table: {
          type: "string"
        },
        attributes: {
          type: "object",
          patternProperties: {
            ["."]: { $ref: "/Attribute" }
          }
        },
        indexes: {
          type: "object",
          minProperties: 1,
          patternProperties: {
            ["."]: { $ref: "/Index" }
          }
        },
        filters: { $ref: "/Filters" }
      },
      required: ["model", "attributes", "indexes"]
    };
    var ModelBeta = {
      type: "object",
      required: true,
      properties: {
        service: {
          type: "string",
          required: true
        },
        entity: {
          type: "string",
          required: true
        },
        table: {
          type: "string"
        },
        version: {
          type: "string"
        },
        attributes: {
          type: "object",
          patternProperties: {
            ["."]: { $ref: "/Attribute" }
          }
        },
        indexes: {
          type: "object",
          minProperties: 1,
          patternProperties: {
            ["."]: { $ref: "/Index" }
          }
        },
        filters: { $ref: "/Filters" }
      },
      required: ["attributes", "indexes"]
    };
    var Filters = {
      id: "/Filters",
      type: "object",
      patternProperties: {
        ["."]: {
          type: "any",
          format: "isFunction",
          message: "Requires function"
        }
      }
    };
    v.addSchema(Attribute, "/Attribute");
    v.addSchema(Index, "/Index");
    v.addSchema(Filters, "/Filters");
    v.addSchema(ModelBeta, "/ModelBeta");
    v.addSchema(Modelv1, "/Modelv1");
    function validateModel(model = {}) {
      let betaErrors = v.validate(model, "/ModelBeta").errors;
      if (betaErrors.length) {
        let errors = v.validate(model, "/Modelv1").errors;
        if (errors.length) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidModel,
            errors.map((err) => {
              let message = `${err.property}`;
              switch (err.argument) {
                case "isFunction":
                  return `${message} must be a function`;
                case "isFunctionOrString":
                  return `${message} must be either a function or string`;
                case "isFunctionOrRegexp":
                  return `${message} must be either a function or Regexp`;
                default:
                  return `${message} ${err.message}`;
              }
            }).join(", ")
          );
        }
      }
    }
    function testModel(model) {
      let isModel = false;
      let error = "";
      try {
        validateModel(model);
        isModel = true;
      } catch (err) {
        error = err.message;
      }
      return [isModel, error];
    }
    function isStringHasLength(str) {
      return typeof str === "string" && str.length > 0;
    }
    function isObjectHasLength(obj) {
      return typeof obj === "object" && Object.keys(obj).length > 0;
    }
    function isArrayHasLength(arr) {
      return Array.isArray(arr) && arr.length > 0;
    }
    function isNameEntityRecordType(entityRecord) {
      return isObjectHasLength(entityRecord) && Object.values(entityRecord).find((value) => {
        return value._instance !== void 0;
      });
    }
    function isNameModelRecordType(modelRecord) {
      return isObjectHasLength(modelRecord) && Object.values(modelRecord).find((value) => {
        return value.model && isStringHasLength(value.model.entity) && isStringHasLength(value.model.version) && isStringHasLength(value.model.service);
      });
    }
    function isBetaServiceConfig(serviceConfig) {
      return isObjectHasLength(serviceConfig) && (isStringHasLength(serviceConfig.service) || isStringHasLength(serviceConfig.name)) && isStringHasLength(serviceConfig.version);
    }
    function isFunction(value) {
      return typeof value === "function";
    }
    function stringArrayMatch(arr1, arr2) {
      let areArrays = Array.isArray(arr1) && Array.isArray(arr2);
      let match = areArrays && arr1.length === arr2.length;
      for (let i = 0; i < arr1.length; i++) {
        if (!match) {
          break;
        }
        match = isStringHasLength(arr1[i]) && arr1[i] === arr2[i];
      }
      return match;
    }
    function isMatchingCasing(casing1, casing2) {
      const equivalentCasings = [KeyCasing.default, KeyCasing.lower];
      if (isStringHasLength(casing1) && isStringHasLength(casing2)) {
        let isRealCase = KeyCasing[casing1.toLowerCase()] !== void 0;
        let casingsMatch = casing1 === casing2;
        let casingsAreEquivalent = [casing1, casing2].every((casing) => {
          return casing === KeyCasing.lower || casing === KeyCasing.default;
        });
        return isRealCase && (casingsMatch || casingsAreEquivalent);
      } else if (isStringHasLength(casing1)) {
        return equivalentCasings.includes(casing1.toLowerCase());
      } else if (isStringHasLength(casing2)) {
        return equivalentCasings.includes(casing2.toLowerCase());
      } else {
        return casing1 === void 0 && casing2 === void 0;
      }
    }
    module2.exports = {
      testModel,
      isFunction,
      stringArrayMatch,
      isMatchingCasing,
      isArrayHasLength,
      isStringHasLength,
      isObjectHasLength,
      isBetaServiceConfig,
      isNameModelRecordType,
      isNameEntityRecordType,
      model: validateModel
    };
  }
});

// node_modules/electrodb/src/util.js
var require_util5 = __commonJS({
  "node_modules/electrodb/src/util.js"(exports, module2) {
    var t = require_types8();
    var e = require_errors();
    var v = require_validations();
    function parseJSONPath(path = "") {
      if (typeof path !== "string") {
        throw new Error("Path must be a string");
      }
      path = path.replace(/\[/g, ".");
      path = path.replace(/\]/g, "");
      return path.split(".").filter((part) => part !== "");
    }
    function genericizeJSONPath(path = "") {
      return path.replace(/\[\d+\]/g, "[*]");
    }
    function getInstanceType(instance = {}) {
      let [isModel, errors] = v.testModel(instance);
      if (!instance || Object.keys(instance).length === 0) {
        return "";
      } else if (isModel) {
        return t.ElectroInstanceTypes.model;
      } else if (instance._instance === t.ElectroInstance.entity) {
        return t.ElectroInstanceTypes.entity;
      } else if (instance._instance === t.ElectroInstance.service) {
        return t.ElectroInstanceTypes.service;
      } else if (instance._instance === t.ElectroInstance.electro) {
        return t.ElectroInstanceTypes.electro;
      } else {
        return "";
      }
    }
    function getModelVersion(model = {}) {
      let nameOnRoot = model && v.isStringHasLength(model.entity);
      let nameInModelNamespace = model && model.model && v.isStringHasLength(model.model.entity);
      if (nameInModelNamespace) {
        return t.ModelVersions.v1;
      } else if (nameOnRoot) {
        return t.ModelVersions.beta;
      } else {
        return "";
      }
    }
    function applyBetaModelOverrides(model = {}, { service = "", version: version2 = "", table = "" } = {}) {
      let type = getModelVersion(model);
      if (type !== t.ModelVersions.beta) {
        throw new Error("Invalid model");
      }
      let copy = Object.assign({}, model);
      if (v.isStringHasLength(service)) {
        copy.service = service;
      }
      if (v.isStringHasLength(version2)) {
        copy.version = version2;
      }
      if (v.isStringHasLength(table)) {
        copy.table = table;
      }
      return copy;
    }
    function batchItems(arr = [], size) {
      if (isNaN(size)) {
        throw new Error("Batch size must be of type number");
      }
      let batched = [];
      for (let i = 0; i < arr.length; i++) {
        let partition = Math.floor(i / size);
        batched[partition] = batched[partition] || [];
        batched[partition].push(arr[i]);
      }
      return batched;
    }
    function commaSeparatedString(array = [], prefix = '"', postfix = '"') {
      return array.map((value) => `${prefix}${value}${postfix}`).join(", ");
    }
    function formatStringCasing(str, casing, defaultCase) {
      if (typeof str !== "string") {
        return str;
      }
      let strCase = defaultCase;
      if (v.isStringHasLength(casing) && typeof t.KeyCasing[casing] === "string") {
        strCase = t.KeyCasing.default === casing ? defaultCase : t.KeyCasing[casing];
      }
      switch (strCase) {
        case t.KeyCasing.upper:
          return str.toUpperCase();
        case t.KeyCasing.none:
          return str;
        case t.KeyCasing.lower:
          return str.toLowerCase();
        case t.KeyCasing.default:
        default:
          return str;
      }
    }
    function formatKeyCasing(str, casing) {
      return formatStringCasing(str, casing, t.KeyCasing.lower);
    }
    function formatAttributeCasing(str, casing) {
      return formatStringCasing(str, casing, t.KeyCasing.none);
    }
    function formatIndexNameForDisplay(index) {
      if (index) {
        return index;
      } else {
        return "(Primary Index)";
      }
    }
    var BatchGetOrderMaintainer = class {
      constructor({ table, enabled, keyFormatter }) {
        this.table = table;
        this.enabled = enabled;
        this.keyFormatter = keyFormatter;
        this.batchIndexMap = /* @__PURE__ */ new Map();
        this.currentSlot = 0;
      }
      getSize() {
        return this.batchIndexMap.size;
      }
      getOrder(item) {
        const key = this.keyFormatter(item);
        const value = this.batchIndexMap.get(key);
        if (value === void 0) {
          return -1;
        }
        return value;
      }
      defineOrder(parameters = []) {
        if (this.enabled) {
          for (let i = 0; i < parameters.length; i++) {
            const batchParams = parameters[i];
            const recordKeys = batchParams && batchParams.RequestItems && batchParams.RequestItems[this.table] && batchParams.RequestItems[this.table].Keys || [];
            for (const recordKey of recordKeys) {
              const indexMapKey = this.keyFormatter(recordKey);
              this.batchIndexMap.set(indexMapKey, this.currentSlot++);
            }
          }
        }
      }
    };
    function getUnique(arr1, arr2) {
      return Array.from(/* @__PURE__ */ new Set([
        ...arr1,
        ...arr2
      ]));
    }
    var cursorFormatter = {
      serialize: (key) => {
        if (!key) {
          return null;
        } else if (typeof val !== "string") {
          key = JSON.stringify(key);
        }
        return Buffer.from(key).toString("base64url");
      },
      deserialize: (cursor) => {
        if (!cursor) {
          return void 0;
        } else if (typeof cursor !== "string") {
          throw new Error(`Invalid cursor provided, expected type 'string' recieved: ${JSON.stringify(cursor)}`);
        }
        try {
          return JSON.parse(Buffer.from(cursor, "base64url").toString("utf8"));
        } catch (err) {
          throw new Error("Unable to parse cursor");
        }
      }
    };
    function removeFixings({ prefix = "", postfix = "", value = "" } = {}) {
      const start = value.toLowerCase().startsWith(prefix.toLowerCase()) ? prefix.length : 0;
      const end = value.length - (value.toLowerCase().endsWith(postfix.toLowerCase()) ? postfix.length : 0);
      let formatted = "";
      for (let i = start; i < end; i++) {
        formatted += value[i];
      }
      return formatted;
    }
    function addPadding({ padding = {}, value = "" } = {}) {
      return value.padStart(padding.length, padding.char);
    }
    function removePadding({ padding = {}, value = "" } = {}) {
      if (!padding.length || value.length >= padding.length) {
        return value;
      }
      let formatted = "";
      let useRemaining = false;
      for (let i = 0; i < value.length; i++) {
        const char = value[i];
        if (useRemaining || i >= padding.length) {
          formatted += char;
        } else if (char !== padding.char) {
          formatted += char;
          useRemaining = true;
        }
      }
      return formatted;
    }
    function shiftSortOrder(str = "", codePoint) {
      let newString = "";
      for (let i = 0; i < str.length; i++) {
        const isLast = i === str.length - 1;
        let char = str[i];
        if (isLast) {
          char = String.fromCodePoint(char.codePointAt(0) + codePoint);
        }
        newString += char;
      }
      return newString;
    }
    function getFirstDefined(...params) {
      return params.find((val2) => val2 !== void 0);
    }
    function regexpEscape(str) {
      return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }
    module2.exports = {
      getUnique,
      batchItems,
      addPadding,
      regexpEscape,
      removePadding,
      removeFixings,
      parseJSONPath,
      shiftSortOrder,
      getFirstDefined,
      getInstanceType,
      getModelVersion,
      formatKeyCasing,
      cursorFormatter,
      genericizeJSONPath,
      commaSeparatedString,
      formatAttributeCasing,
      applyBetaModelOverrides,
      formatIndexNameForDisplay,
      BatchGetOrderMaintainer
    };
  }
});

// node_modules/electrodb/src/set.js
var require_set = __commonJS({
  "node_modules/electrodb/src/set.js"(exports, module2) {
    var memberTypeToSetType = {
      "String": "String",
      "Number": "Number",
      "NumberValue": "Number",
      "Binary": "Binary",
      "string": "String",
      "number": "Number"
    };
    var DynamoDBSet = class {
      constructor(list, type) {
        this.wrapperName = "Set";
        this.type = memberTypeToSetType[type];
        if (this.type === void 0) {
          new Error(`Invalid Set type: ${type}`);
        }
        this.values = Array.from(new Set([].concat(list)));
      }
      initialize(list, validate2) {
      }
      detectType() {
        return memberTypeToSetType[typeof this.values[0]];
      }
      validate() {
      }
      toJSON() {
        return this.values;
      }
    };
    module2.exports = { DynamoDBSet };
  }
});

// node_modules/electrodb/src/schema.js
var require_schema = __commonJS({
  "node_modules/electrodb/src/schema.js"(exports, module2) {
    var { CastTypes, ValueTypes, KeyCasing, AttributeTypes, AttributeMutationMethods, AttributeWildCard, PathTypes, TableIndex, ItemOperations } = require_types8();
    var AttributeTypeNames = Object.keys(AttributeTypes);
    var ValidFacetTypes = [AttributeTypes.string, AttributeTypes.number, AttributeTypes.boolean, AttributeTypes.enum];
    var e = require_errors();
    var u = require_util5();
    var v = require_validations();
    var { DynamoDBSet } = require_set();
    function getValueType(value) {
      if (value === void 0) {
        return ValueTypes.undefined;
      } else if (value === null) {
        return ValueTypes.null;
      } else if (typeof value === "string") {
        return ValueTypes.string;
      } else if (typeof value === "number") {
        return ValueTypes.number;
      } else if (typeof value === "boolean") {
        return ValueTypes.boolean;
      } else if (Array.isArray(value)) {
        return ValueTypes.array;
      } else if (value.wrapperName === "Set") {
        return ValueTypes.aws_set;
      } else if (value.constructor.name === "Set") {
        return ValueTypes.set;
      } else if (value.constructor.name === "Map") {
        return ValueTypes.map;
      } else if (value.constructor.name === "Object") {
        return ValueTypes.object;
      } else {
        return ValueTypes.unknown;
      }
    }
    var AttributeTraverser = class _AttributeTraverser {
      constructor(parentTraverser) {
        if (parentTraverser instanceof _AttributeTraverser) {
          this.parent = parentTraverser;
          this.paths = this.parent.paths;
        } else {
          this.parent = null;
          this.paths = /* @__PURE__ */ new Map();
        }
        this.children = /* @__PURE__ */ new Map();
      }
      setChild(name, attribute) {
        this.children.set(name, attribute);
      }
      asChild(name, attribute) {
        if (this.parent) {
          this.parent.setChild(name, attribute);
        }
      }
      setPath(path, attribute) {
        if (this.parent) {
          this.parent.setPath(path, attribute);
        }
        this.paths.set(path, attribute);
      }
      getPath(path) {
        path = u.genericizeJSONPath(path);
        if (this.parent) {
          return this.parent.getPath(path);
        }
        return this.paths.get(path);
      }
      getChild(name) {
        return this.children.get(name);
      }
      getAllChildren() {
        return this.children.entries();
      }
      getAll() {
        if (this.parent) {
          return this.parent.getAll();
        }
        return this.paths.entries();
      }
    };
    var Attribute = class _Attribute {
      constructor(definition = {}) {
        this.name = definition.name;
        this.field = definition.field || definition.name;
        this.label = definition.label;
        this.readOnly = !!definition.readOnly;
        this.hidden = !!definition.hidden;
        this.required = !!definition.required;
        this.cast = this._makeCast(definition.name, definition.cast);
        this.default = this._makeDefault(definition.default);
        this.validate = this._makeValidate(definition.validate);
        this.isKeyField = !!definition.isKeyField;
        this.unformat = this._makeDestructureKey(definition);
        this.format = this._makeStructureKey(definition);
        this.padding = definition.padding;
        this.applyFixings = this._makeApplyFixings(definition);
        this.applyPadding = this._makePadding(definition);
        this.indexes = [...definition.indexes || []];
        let { isWatched, isWatcher, watchedBy, watching, watchAll } = _Attribute._destructureWatcher(definition);
        this._isWatched = isWatched;
        this._isWatcher = isWatcher;
        this.watchedBy = watchedBy;
        this.watching = watching;
        this.watchAll = watchAll;
        let { type, enumArray } = this._makeType(this.name, definition);
        this.type = type;
        this.enumArray = enumArray;
        this.parentType = definition.parentType;
        this.parentPath = definition.parentPath;
        const pathType = this.getPathType(this.type, this.parentType);
        const path = _Attribute.buildPath(this.name, pathType, this.parentPath);
        const fieldPath = _Attribute.buildPath(this.field, pathType, this.parentType);
        this.path = path;
        this.fieldPath = fieldPath;
        this.traverser = new AttributeTraverser(definition.traverser);
        this.traverser.setPath(this.path, this);
        this.traverser.setPath(this.fieldPath, this);
        this.traverser.asChild(this.name, this);
        this.parent = { parentType: this.type, parentPath: this.path };
        this.get = this._makeGet(definition.get);
        this.set = this._makeSet(definition.set);
        this.getClient = definition.getClient;
      }
      static buildChildAttributes(type, definition, parent) {
        let items;
        let properties;
        if (type === AttributeTypes.list) {
          items = _Attribute.buildChildListItems(definition, parent);
        } else if (type === AttributeTypes.set) {
          items = _Attribute.buildChildSetItems(definition, parent);
        } else if (type === AttributeTypes.map) {
          properties = _Attribute.buildChildMapProperties(definition, parent);
        }
        return { items, properties };
      }
      static buildChildListItems(definition, parent) {
        const { items, getClient } = definition;
        const prop = { ...items, ...parent };
        return Schema.normalizeAttributes({ "*": prop }, {}, { getClient, traverser: parent.traverser, parent }).attributes["*"];
      }
      static buildChildSetItems(definition, parent) {
        const { items, getClient } = definition;
        const allowedTypes = [AttributeTypes.string, AttributeTypes.boolean, AttributeTypes.number, AttributeTypes.enum];
        if (!Array.isArray(items) && !allowedTypes.includes(items)) {
          throw new e.ElectroError(e.ErrorCodes.InvalidAttributeDefinition, `Invalid "items" definition for Set attribute: "${definition.path}". Acceptable item types include ${u.commaSeparatedString(allowedTypes)}`);
        }
        const prop = { type: items, ...parent };
        return Schema.normalizeAttributes({ prop }, {}, { getClient, traverser: parent.traverser, parent }).attributes.prop;
      }
      static buildChildMapProperties(definition, parent) {
        const { properties, getClient } = definition;
        if (!properties || typeof properties !== "object") {
          throw new e.ElectroError(e.ErrorCodes.InvalidAttributeDefinition, `Invalid "properties" definition for Map attribute: "${definition.path}". The "properties" definition must describe the attributes that the Map will accept`);
        }
        const attributes2 = {};
        for (let name of Object.keys(properties)) {
          attributes2[name] = { ...properties[name], ...parent };
        }
        return Schema.normalizeAttributes(attributes2, {}, { getClient, traverser: parent.traverser, parent });
      }
      static buildPath(name, type, parentPath) {
        if (!parentPath)
          return name;
        switch (type) {
          case AttributeTypes.string:
          case AttributeTypes.number:
          case AttributeTypes.boolean:
          case AttributeTypes.map:
          case AttributeTypes.set:
          case AttributeTypes.list:
          case AttributeTypes.enum:
            return `${parentPath}.${name}`;
          case PathTypes.item:
            return `${parentPath}[*]`;
          case AttributeTypes.any:
          default:
            return `${parentPath}.*`;
        }
      }
      static _destructureWatcher(definition) {
        let watchAll = !!definition.watchAll;
        let watchingArr = watchAll ? [] : [...definition.watching || []];
        let watchedByArr = [...definition.watchedBy || []];
        let isWatched = watchedByArr.length > 0;
        let isWatcher = watchingArr.length > 0;
        let watchedBy = {};
        let watching = {};
        for (let watched of watchedByArr) {
          watchedBy[watched] = watched;
        }
        for (let attribute of watchingArr) {
          watching[attribute] = attribute;
        }
        return {
          watchAll,
          watching,
          watchedBy,
          isWatched,
          isWatcher
        };
      }
      _makeGet(get) {
        this._checkGetSet(get, "get");
        const getter = get || ((attr) => attr);
        return (value, siblings) => {
          if (this.hidden) {
            return;
          }
          value = this.unformat(value);
          return getter(value, siblings);
        };
      }
      _makeSet(set) {
        this._checkGetSet(set, "set");
        return set || ((attr) => attr);
      }
      _makeApplyFixings({ prefix = "", postfix = "", casing = KeyCasing.none } = {}) {
        return (value) => {
          if (value === void 0) {
            return;
          }
          if ([AttributeTypes.string, AttributeTypes.enum].includes(this.type)) {
            value = `${prefix}${value}${postfix}`;
          }
          return u.formatAttributeCasing(value, casing);
        };
      }
      _makeStructureKey() {
        return (key) => {
          return this.applyPadding(key);
        };
      }
      _isPaddingEligible(padding = {}) {
        return !!padding && padding.length && v.isStringHasLength(padding.char);
      }
      _makePadding({ padding = {} }) {
        return (value) => {
          if (typeof value !== "string") {
            return value;
          } else if (this._isPaddingEligible(padding)) {
            return u.addPadding({ padding, value });
          } else {
            return value;
          }
        };
      }
      _makeRemoveFixings({ prefix = "", postfix = "", casing = KeyCasing.none } = {}) {
        return (key) => {
          let value = "";
          if (![AttributeTypes.string, AttributeTypes.enum].includes(this.type) || typeof key !== "string") {
            value = key;
          } else if (prefix.length > 0 && key.length > prefix.length) {
            for (let i = prefix.length; i < key.length - postfix.length; i++) {
              value += key[i];
            }
          } else {
            value = key;
          }
          return value;
        };
      }
      _makeDestructureKey({ prefix = "", postfix = "", casing = KeyCasing.none, padding = {} } = {}) {
        return (key) => {
          let value = "";
          if (![AttributeTypes.string, AttributeTypes.enum].includes(this.type) || typeof key !== "string") {
            return key;
          } else if (key.length > prefix.length) {
            value = u.removeFixings({ prefix, postfix, value: key });
          } else {
            value = key;
          }
          return value;
        };
      }
      acceptable(val2) {
        return val2 !== void 0;
      }
      getPathType(type, parentType) {
        if (parentType === AttributeTypes.list || parentType === AttributeTypes.set) {
          return PathTypes.item;
        }
        return type;
      }
      getAttribute(path) {
        return this.traverser.getPath(path);
      }
      getChild(path) {
        if (this.type === AttributeTypes.any) {
          return this;
        } else if (!isNaN(path) && (this.type === AttributeTypes.list || this.type === AttributeTypes.set)) {
          return this.traverser.getChild("*");
        } else {
          return this.traverser.getChild(path);
        }
      }
      _checkGetSet(val2, type) {
        if (typeof val2 !== "function" && val2 !== void 0) {
          throw new e.ElectroError(e.ErrorCodes.InvalidAttributeDefinition, `Invalid "${type}" property for attribute ${this.path}. Please ensure value is a function or undefined.`);
        }
      }
      _makeCast(name, cast) {
        if (cast !== void 0 && !CastTypes.includes(cast)) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidAttributeDefinition,
            `Invalid "cast" property for attribute: "${name}". Acceptable types include ${CastTypes.join(", ")}`
          );
        } else if (cast === AttributeTypes.string) {
          return (val2) => {
            if (val2 === void 0) {
              throw new Error(`Attribute ${name} is undefined and cannot be cast to type ${cast}`);
            } else if (typeof val2 === "string") {
              return val2;
            } else {
              return JSON.stringify(val2);
            }
          };
        } else if (cast === AttributeTypes.number) {
          return (val2) => {
            if (val2 === void 0) {
              throw new Error(`Attribute ${name} is undefined and cannot be cast to type ${cast}`);
            } else if (typeof val2 === "number") {
              return val2;
            } else {
              let results = Number(val2);
              if (isNaN(results)) {
                throw new Error(`Attribute ${name} cannot be cast to type ${cast}. Doing so results in NaN`);
              } else {
                return results;
              }
            }
          };
        } else {
          return (val2) => val2;
        }
      }
      _makeValidate(definition) {
        if (typeof definition === "function") {
          return (val2) => {
            try {
              let reason = definition(val2);
              const isValid = !reason;
              if (isValid) {
                return [isValid, []];
              } else if (typeof reason === "boolean") {
                return [isValid, [new e.ElectroUserValidationError(this.path, "Invalid value provided")]];
              } else {
                return [isValid, [new e.ElectroUserValidationError(this.path, reason)]];
              }
            } catch (err) {
              return [false, [new e.ElectroUserValidationError(this.path, err)]];
            }
          };
        } else if (definition instanceof RegExp) {
          return (val2) => {
            if (val2 === void 0) {
              return [true, []];
            }
            let isValid = definition.test(val2);
            let reason = [];
            if (!isValid) {
              reason.push(new e.ElectroUserValidationError(this.path, `Invalid value for attribute "${this.path}": Failed model defined regex`));
            }
            return [isValid, reason];
          };
        } else {
          return () => [true, []];
        }
      }
      _makeDefault(definition) {
        if (typeof definition === "function") {
          return () => definition();
        } else {
          return () => definition;
        }
      }
      _makeType(name, definition) {
        let type = "";
        let enumArray = [];
        if (Array.isArray(definition.type)) {
          type = AttributeTypes.enum;
          enumArray = [...definition.type];
        } else {
          type = definition.type || "string";
        }
        if (!AttributeTypeNames.includes(type)) {
          throw new e.ElectroError(e.ErrorCodes.InvalidAttributeDefinition, `Invalid "type" property for attribute: "${name}". Acceptable types include ${AttributeTypeNames.join(", ")}`);
        }
        return { type, enumArray };
      }
      isWatcher() {
        return this._isWatcher;
      }
      isWatched() {
        return this._isWatched;
      }
      isWatching(attribute) {
        return this.watching[attribute] !== void 0;
      }
      isWatchedBy(attribute) {
        return this.watchedBy[attribute] !== void 0;
      }
      _isType(value) {
        if (value === void 0) {
          let reason2 = [];
          if (this.required) {
            reason2.push(new e.ElectroAttributeValidationError(this.path, `Invalid value type at entity path: "${this.path}". Value is required.`));
          }
          return [!this.required, reason2];
        }
        let isTyped = false;
        let reason = [];
        switch (this.type) {
          case AttributeTypes.enum:
            isTyped = this.enumArray.includes(value);
            if (!isTyped) {
              reason.push(new e.ElectroAttributeValidationError(this.path, `Invalid value type at entity path: "${this.path}". Value not found in set of acceptable values: ${u.commaSeparatedString(this.enumArray)}`));
            }
            break;
          case AttributeTypes.any:
          case AttributeTypes.static:
          case AttributeTypes.custom:
            isTyped = true;
            break;
          case AttributeTypes.string:
          case AttributeTypes.number:
          case AttributeTypes.boolean:
          default:
            isTyped = typeof value === this.type;
            if (!isTyped) {
              reason.push(new e.ElectroAttributeValidationError(this.path, `Invalid value type at entity path: "${this.path}". Received value of type "${typeof value}", expected value of type "${this.type}"`));
            }
            break;
        }
        return [isTyped, reason];
      }
      isValid(value) {
        try {
          let [isTyped, typeErrorReason] = this._isType(value);
          let [isValid, validationError] = isTyped ? this.validate(value) : [false, []];
          let errors = [...typeErrorReason, ...validationError].filter((value2) => value2 !== void 0);
          return [isTyped && isValid, errors];
        } catch (err) {
          return [false, [err]];
        }
      }
      val(value) {
        value = this.cast(value);
        if (value === void 0) {
          value = this.default();
        }
        return value;
      }
      getValidate(value) {
        value = this.val(value);
        let [isValid, validationErrors] = this.isValid(value);
        if (!isValid) {
          throw new e.ElectroValidationError(validationErrors);
        }
        return value;
      }
    };
    var MapAttribute = class extends Attribute {
      constructor(definition) {
        super(definition);
        const properties = Attribute.buildChildMapProperties(definition, {
          parentType: this.type,
          parentPath: this.path,
          traverser: this.traverser
        });
        this.properties = properties;
        this.isRoot = !!definition.isRoot;
        this.get = this._makeGet(definition.get, properties);
        this.set = this._makeSet(definition.set, properties);
      }
      _makeGet(get, properties) {
        this._checkGetSet(get, "get");
        const getter = get || ((val2) => {
          const isEmpty = !val2 || Object.keys(val2).length === 0;
          const isNotRequired = !this.required;
          const doesNotHaveDefault = this.default === void 0;
          const isRoot = this.isRoot;
          if (isEmpty && isRoot && isNotRequired && doesNotHaveDefault) {
            return void 0;
          }
          return val2;
        });
        return (values, siblings) => {
          const data = {};
          if (this.hidden) {
            return;
          }
          if (values === void 0) {
            if (!get) {
              return void 0;
            }
            return getter(data, siblings);
          }
          for (const name of Object.keys(properties.attributes)) {
            const attribute = properties.attributes[name];
            if (values[attribute.field] !== void 0) {
              let results = attribute.get(values[attribute.field], { ...values });
              if (results !== void 0) {
                data[name] = results;
              }
            }
          }
          return getter(data, siblings);
        };
      }
      _makeSet(set, properties) {
        this._checkGetSet(set, "set");
        const setter = set || ((val2) => {
          const isEmpty = !val2 || Object.keys(val2).length === 0;
          const isNotRequired = !this.required;
          const doesNotHaveDefault = this.default === void 0;
          const defaultIsValue = this.default === val2;
          const isRoot = this.isRoot;
          if (defaultIsValue) {
            return val2;
          } else if (isEmpty && isRoot && isNotRequired && doesNotHaveDefault) {
            return void 0;
          } else {
            return val2;
          }
        });
        return (values, siblings) => {
          const data = {};
          if (values === void 0) {
            if (!set) {
              return void 0;
            }
            return setter(values, siblings);
          }
          for (const name of Object.keys(properties.attributes)) {
            const attribute = properties.attributes[name];
            if (values[name] !== void 0) {
              const results = attribute.set(values[name], { ...values });
              if (results !== void 0) {
                data[attribute.field] = results;
              }
            }
          }
          return setter(data, siblings);
        };
      }
      _isType(value) {
        if (value === void 0) {
          let reason2 = [];
          if (this.required) {
            reason2.push(new e.ElectroAttributeValidationError(this.path, `Invalid value type at entity path: "${this.path}". Value is required.`));
          }
          return [!this.required, reason2];
        }
        const valueType = getValueType(value);
        if (valueType !== ValueTypes.object) {
          return [false, [new e.ElectroAttributeValidationError(this.path, `Invalid value type at entity path "${this.path}. Received value of type "${valueType}", expected value of type "object"`)]];
        }
        let reason = [];
        const [childrenAreValid, childErrors] = this._validateChildren(value);
        if (!childrenAreValid) {
          reason = childErrors;
        }
        return [childrenAreValid, reason];
      }
      _validateChildren(value) {
        const valueType = getValueType(value);
        const attributes2 = this.properties.attributes;
        let errors = [];
        if (valueType === ValueTypes.object) {
          for (const child of Object.keys(attributes2)) {
            const [isValid, errorValues] = attributes2[child].isValid(value === void 0 ? value : value[child]);
            if (!isValid) {
              errors = [...errors, ...errorValues];
            }
          }
        } else if (valueType !== ValueTypes.object) {
          errors.push(
            new e.ElectroAttributeValidationError(this.path, `Invalid value type at entity path: "${this.path}". Expected value to be an object to fulfill attribute type "${this.type}"`)
          );
        } else if (this.properties.hasRequiredAttributes) {
          errors.push(
            new e.ElectroAttributeValidationError(this.path, `Invalid value type at entity path: "${this.path}". Map attribute requires at least the properties ${u.commaSeparatedString(Object.keys(attributes2))}`)
          );
        }
        return [errors.length === 0, errors];
      }
      val(value) {
        const incomingIsEmpty = value === void 0;
        let fromDefault = false;
        let data;
        if (value === void 0) {
          data = this.default();
          if (data !== void 0) {
            fromDefault = true;
          }
        } else {
          data = value;
        }
        const valueType = getValueType(data);
        if (data === void 0) {
          return data;
        } else if (valueType !== "object") {
          throw new e.ElectroAttributeValidationError(this.path, `Invalid value type at entity path: "${this.path}". Expected value to be an object to fulfill attribute type "${this.type}"`);
        }
        const response = {};
        for (const name of Object.keys(this.properties.attributes)) {
          const attribute = this.properties.attributes[name];
          const results = attribute.val(data[attribute.name]);
          if (results !== void 0) {
            response[name] = results;
          }
        }
        if (Object.keys(response).length === 0 && !fromDefault && this.isRoot && !this.required && incomingIsEmpty) {
          return void 0;
        }
        return response;
      }
    };
    var ListAttribute = class extends Attribute {
      constructor(definition) {
        super(definition);
        const items = Attribute.buildChildListItems(definition, {
          parentType: this.type,
          parentPath: this.path,
          traverser: this.traverser
        });
        this.items = items;
        this.get = this._makeGet(definition.get, items);
        this.set = this._makeSet(definition.set, items);
      }
      _makeGet(get, items) {
        this._checkGetSet(get, "get");
        const getter = get || ((attr) => attr);
        return (values, siblings) => {
          const data = [];
          if (this.hidden) {
            return;
          }
          if (values === void 0) {
            return getter(data, siblings);
          }
          for (let value of values) {
            const results = items.get(value, [...values]);
            if (results !== void 0) {
              data.push(results);
            }
          }
          return getter(data, siblings);
        };
      }
      _makeSet(set, items) {
        this._checkGetSet(set, "set");
        const setter = set || ((attr) => attr);
        return (values, siblings) => {
          const data = [];
          if (values === void 0) {
            return setter(values, siblings);
          }
          for (const value of values) {
            const results = items.set(value, [...values]);
            if (results !== void 0) {
              data.push(results);
            }
          }
          return setter(data, siblings);
        };
      }
      _validateArrayValue(value) {
        const reason = [];
        const valueType = getValueType(value);
        if (value !== void 0 && valueType !== ValueTypes.array) {
          return [false, [new e.ElectroAttributeValidationError(this.path, `Invalid value type at entity path "${this.path}. Received value of type "${valueType}", expected value of type "array"`)]];
        } else {
          return [true, []];
        }
      }
      _isType(value) {
        if (value === void 0) {
          let reason2 = [];
          if (this.required) {
            reason2.push(new e.ElectroAttributeValidationError(this.path, `Invalid value type at entity path: "${this.path}". Value is required.`));
          }
          return [!this.required, reason2];
        }
        const [isValidArray, errors] = this._validateArrayValue(value);
        if (!isValidArray) {
          return [isValidArray, errors];
        }
        let reason = [];
        const [childrenAreValid, childErrors] = this._validateChildren(value);
        if (!childrenAreValid) {
          reason = childErrors;
        }
        return [childrenAreValid, reason];
      }
      _validateChildren(value) {
        const valueType = getValueType(value);
        const errors = [];
        if (valueType === ValueTypes.array) {
          for (const i in value) {
            const [isValid, errorValues] = this.items.isValid(value[i]);
            if (!isValid) {
              for (const err of errorValues) {
                if (err instanceof e.ElectroAttributeValidationError || err instanceof e.ElectroUserValidationError) {
                  err.index = parseInt(i);
                }
                errors.push(err);
              }
            }
          }
        } else {
          errors.push(
            new e.ElectroAttributeValidationError(this.path, `Invalid value type at entity path: "${this.path}". Expected value to be an Array to fulfill attribute type "${this.type}"`)
          );
        }
        return [errors.length === 0, errors];
      }
      val(value) {
        const getValue = (v2) => {
          v2 = this.cast(v2);
          if (v2 === void 0) {
            v2 = this.default();
          }
          return v2;
        };
        const data = value === void 0 ? getValue(value) : value;
        if (data === void 0) {
          return data;
        } else if (!Array.isArray(data)) {
          throw new e.ElectroAttributeValidationError(this.path, `Invalid value type at entity path "${this.path}. Received value of type "${getValueType(value)}", expected value of type "array"`);
        }
        const response = [];
        for (const d of data) {
          const results = this.items.val(d);
          if (results !== void 0) {
            response.push(results);
          }
        }
        return response;
      }
    };
    var SetAttribute = class extends Attribute {
      constructor(definition) {
        super(definition);
        const items = Attribute.buildChildSetItems(definition, {
          parentType: this.type,
          parentPath: this.path,
          traverser: this.traverser
        });
        this.items = items;
        this.get = this._makeGet(definition.get, items);
        this.set = this._makeSet(definition.set, items);
        this.validate = this._makeSetValidate(definition);
      }
      _makeSetValidate(definition) {
        const validate2 = this._makeValidate(definition.validate);
        return (value) => {
          switch (getValueType(value)) {
            case ValueTypes.array:
              return validate2([...value]);
            case ValueTypes.aws_set:
              return validate2([...value.values]);
            case ValueTypes.set:
              return validate2(Array.from(value));
            default:
              return validate2(value);
          }
        };
      }
      fromDDBSet(value) {
        switch (getValueType(value)) {
          case ValueTypes.aws_set:
            return [...value.values];
          case ValueTypes.set:
            return Array.from(value);
          default:
            return value;
        }
      }
      _createDDBSet(value) {
        const client = this.getClient();
        if (client && typeof client.createSet === "function") {
          value = Array.isArray(value) ? Array.from(new Set(value)) : value;
          return client.createSet(value, { validate: true });
        } else {
          return new DynamoDBSet(value, this.items.type);
        }
      }
      acceptable(val2) {
        return Array.isArray(val2) ? val2.length > 0 : this.items.acceptable(val2);
      }
      toDDBSet(value) {
        const valueType = getValueType(value);
        let array;
        switch (valueType) {
          case ValueTypes.set:
            array = Array.from(value);
            return this._createDDBSet(array);
          case ValueTypes.aws_set:
            return value;
          case ValueTypes.array:
            return this._createDDBSet(value);
          case ValueTypes.string:
          case ValueTypes.number: {
            this.items.getValidate(value);
            return this._createDDBSet(value);
          }
          default:
            throw new e.ElectroAttributeValidationError(this.path, `Invalid attribute value supplied to "set" attribute "${this.path}". Received value of type "${valueType}". Set values must be supplied as either Arrays, native JavaScript Set objects, DocumentClient Set objects, strings, or numbers.`);
        }
      }
      _makeGet(get, items) {
        this._checkGetSet(get, "get");
        const getter = get || ((attr) => attr);
        return (values, siblings) => {
          if (values !== void 0) {
            const data2 = this.fromDDBSet(values);
            return getter(data2, siblings);
          }
          const data = this.fromDDBSet(values);
          const results = getter(data, siblings);
          if (results !== void 0) {
            return this.fromDDBSet(results);
          }
        };
      }
      _makeSet(set, items) {
        this._checkGetSet(set, "set");
        const setter = set || ((attr) => attr);
        return (values, siblings) => {
          const results = setter(this.fromDDBSet(values), siblings);
          if (results !== void 0) {
            return this.toDDBSet(results);
          }
        };
      }
      _isType(value) {
        if (value === void 0) {
          const reason2 = [];
          if (this.required) {
            reason2.push(new e.ElectroAttributeValidationError(this.path, `Invalid value type at entity path: "${this.path}". Value is required.`));
          }
          return [!this.required, reason2];
        }
        let reason = [];
        const [childrenAreValid, childErrors] = this._validateChildren(value);
        if (!childrenAreValid) {
          reason = childErrors;
        }
        return [childrenAreValid, reason];
      }
      _validateChildren(value) {
        const valueType = getValueType(value);
        let errors = [];
        let arr = [];
        if (valueType === ValueTypes.array) {
          arr = value;
        } else if (valueType === ValueTypes.set) {
          arr = Array.from(value);
        } else if (valueType === ValueTypes.aws_set) {
          arr = value.values;
        } else {
          errors.push(
            new e.ElectroAttributeValidationError(this.path, `Invalid value type at attribute path: "${this.path}". Expected value to be an Expected value to be an Array, native JavaScript Set objects, or DocumentClient Set objects to fulfill attribute type "${this.type}"`)
          );
        }
        for (const item of arr) {
          const [isValid, errorValues] = this.items.isValid(item);
          if (!isValid) {
            errors = [...errors, ...errorValues];
          }
        }
        return [errors.length === 0, errors];
      }
      val(value) {
        if (value === void 0) {
          value = this.default();
        }
        if (value !== void 0) {
          return this.toDDBSet(value);
        }
      }
    };
    var Schema = class _Schema {
      constructor(properties = {}, facets = {}, { traverser = new AttributeTraverser(), getClient, parent, isRoot } = {}) {
        this._validateProperties(properties, parent);
        let schema = _Schema.normalizeAttributes(properties, facets, { traverser, getClient, parent, isRoot });
        this.getClient = getClient;
        this.attributes = schema.attributes;
        this.enums = schema.enums;
        this.translationForTable = schema.translationForTable;
        this.translationForRetrieval = schema.translationForRetrieval;
        this.hiddenAttributes = schema.hiddenAttributes;
        this.readOnlyAttributes = schema.readOnlyAttributes;
        this.requiredAttributes = schema.requiredAttributes;
        this.translationForWatching = this._formatWatchTranslations(this.attributes);
        this.traverser = traverser;
        this.isRoot = !!isRoot;
      }
      static normalizeAttributes(attributes2 = {}, facets = {}, { traverser, getClient, parent, isRoot } = {}) {
        const attributeHasParent = !!parent;
        let invalidProperties = [];
        let normalized = {};
        let usedAttrs = {};
        let enums = {};
        let translationForTable = {};
        let translationForRetrieval = {};
        let watchedAttributes = {};
        let requiredAttributes = /* @__PURE__ */ new Set();
        let hiddenAttributes = /* @__PURE__ */ new Set();
        let readOnlyAttributes = /* @__PURE__ */ new Set();
        let definitions = {};
        for (let name in attributes2) {
          let attribute = attributes2[name];
          if (typeof attribute === AttributeTypes.string || Array.isArray(attribute)) {
            attribute = {
              type: attribute
            };
          }
          const field = attribute.field || name;
          let isKeyField = false;
          let prefix = "";
          let postfix = "";
          let casing = KeyCasing.none;
          if (facets.byField && facets.byField[field] !== void 0) {
            for (const indexName of Object.keys(facets.byField[field])) {
              let definition2 = facets.byField[field][indexName];
              if (definition2.facets.length > 1) {
                throw new e.ElectroError(
                  e.ErrorCodes.InvalidIndexWithAttributeName,
                  `Invalid definition for "${definition2.type}" field on index "${u.formatIndexNameForDisplay(indexName)}". The ${definition2.type} field "${definition2.field}" shares a field name with an attribute defined on the Entity, and therefore is not allowed to contain composite references to other attributes. Please either change the field name of the attribute, or redefine the index to use only the single attribute "${definition2.field}".`
                );
              }
              if (definition2.isCustom) {
                const keyFieldLabels = facets.labels[indexName][definition2.type].labels;
                if (keyFieldLabels.length > 2) {
                  throw new e.ElectroError(
                    e.ErrorCodes.InvalidIndexWithAttributeName,
                    `Unexpected definition for "${definition2.type}" field on index "${u.formatIndexNameForDisplay(indexName)}". The ${definition2.type} field "${definition2.field}" shares a field name with an attribute defined on the Entity, and therefore is not possible to have more than two labels as part of it's template. Please either change the field name of the attribute, or reformat the key template to reduce all pre-fixing or post-fixing text around the attribute reference to two.`
                  );
                }
                isKeyField = true;
                casing = definition2.casing;
                for (const value of keyFieldLabels) {
                  if (value.name === field) {
                    prefix = value.label || "";
                  } else {
                    postfix = value.label || "";
                  }
                }
                if (attribute.type !== AttributeTypes.string && !Array.isArray(attribute.type)) {
                  if (prefix.length > 0 || postfix.length > 0) {
                    throw new e.ElectroError(e.ErrorCodes.InvalidIndexWithAttributeName, `definition for "${definition2.type}" field on index "${u.formatIndexNameForDisplay(indexName)}". Index templates may only have prefix or postfix values on "string" or "enum" type attributes. The ${definition2.type} field "${field}" is type "${attribute.type}", and therefore cannot be used with prefixes or postfixes. Please either remove the prefixed or postfixed values from the template or change the field name of the attribute.`);
                  }
                }
              } else {
                throw new e.ElectroError(
                  e.ErrorCodes.InvalidIndexCompositeWithAttributeName,
                  `Unexpected definition for "${definition2.type}" field on index "${u.formatIndexNameForDisplay(indexName)}". The ${definition2.type} field "${definition2.field}" shares a field name with an attribute defined on the Entity, and therefore must be defined with a template. Please either change the field name of the attribute, or add a key template to the "${definition2.type}" field on index "${u.formatIndexNameForDisplay(indexName)}" with the value: "\${${definition2.field}}"`
                );
              }
              if (definition2.inCollection) {
                throw new e.ElectroError(
                  e.ErrorCodes.InvalidCollectionOnIndexWithAttributeFieldNames,
                  `Invalid use of a collection on index "${u.formatIndexNameForDisplay(indexName)}". The ${definition2.type} field "${definition2.field}" shares a field name with an attribute defined on the Entity, and therefore the index is not allowed to participate in a Collection. Please either change the field name of the attribute, or remove all collection(s) from the index.`
                );
              }
              if (definition2.field === field) {
                if (attribute.padding !== void 0) {
                  throw new e.ElectroError(
                    e.ErrorCodes.InvalidAttributeDefinition,
                    `Invalid padding definition for the attribute "${name}". Padding is not currently supported for attributes that are also defined as table indexes.`
                  );
                }
              }
            }
          }
          let isKey = !!facets.byIndex && facets.byIndex[TableIndex].all.find((facet) => facet.name === name);
          let definition = {
            name,
            field,
            getClient,
            casing,
            prefix,
            postfix,
            traverser,
            isKeyField: isKeyField || isKey,
            isRoot: !!isRoot,
            label: attribute.label,
            required: !!attribute.required,
            default: attribute.default,
            validate: attribute.validate,
            readOnly: !!attribute.readOnly || isKey,
            hidden: !!attribute.hidden,
            indexes: facets.byAttr && facets.byAttr[name] || [],
            type: attribute.type,
            get: attribute.get,
            set: attribute.set,
            watching: Array.isArray(attribute.watch) ? attribute.watch : [],
            items: attribute.items,
            properties: attribute.properties,
            parentPath: attribute.parentPath,
            parentType: attribute.parentType,
            padding: attribute.padding
          };
          if (definition.type === AttributeTypes.custom) {
            definition.type = AttributeTypes.any;
          }
          if (attribute.watch !== void 0) {
            if (attribute.watch === AttributeWildCard) {
              definition.watchAll = true;
              definition.watching = [];
            } else if (Array.isArray(attribute.watch)) {
              definition.watching = attribute.watch;
            } else {
              throw new e.ElectroError(e.ErrorCodes.InvalidAttributeWatchDefinition, `Attribute Validation Error. The attribute '${name}' is defined to "watch" an invalid value of: '${attribute.watch}'. The watch property must either be a an array of attribute names, or the single string value of "${WatchAll}".`);
            }
          } else {
            definition.watching = [];
          }
          if (definition.readOnly) {
            readOnlyAttributes.add(name);
          }
          if (definition.hidden) {
            hiddenAttributes.add(name);
          }
          if (definition.required) {
            requiredAttributes.add(name);
          }
          if (facets.byAttr && facets.byAttr[definition.name] !== void 0 && (!ValidFacetTypes.includes(definition.type) && !Array.isArray(definition.type))) {
            let assignedIndexes = facets.byAttr[name].map((assigned) => assigned.index === "" ? "Table Index" : assigned.index);
            throw new e.ElectroError(e.ErrorCodes.InvalidAttributeDefinition, `Invalid composite attribute definition: Composite attributes must be one of the following: ${ValidFacetTypes.join(", ")}. The attribute "${name}" is defined as being type "${attribute.type}" but is a composite attribute of the following indexes: ${assignedIndexes.join(", ")}`);
          }
          if (usedAttrs[definition.field] || usedAttrs[name]) {
            invalidProperties.push({
              name,
              property: "field",
              value: definition.field,
              expected: `Unique field property, already used by attribute ${usedAttrs[definition.field]}`
            });
          } else {
            usedAttrs[definition.field] = definition.name;
          }
          translationForTable[definition.name] = definition.field;
          translationForRetrieval[definition.field] = definition.name;
          for (let watched of definition.watching) {
            watchedAttributes[watched] = watchedAttributes[watched] || [];
            watchedAttributes[watched].push(name);
          }
          definitions[name] = definition;
        }
        for (let name of Object.keys(definitions)) {
          const definition = definitions[name];
          definition.watchedBy = Array.isArray(watchedAttributes[name]) ? watchedAttributes[name] : [];
          switch (definition.type) {
            case AttributeTypes.map:
              normalized[name] = new MapAttribute(definition);
              break;
            case AttributeTypes.list:
              normalized[name] = new ListAttribute(definition);
              break;
            case AttributeTypes.set:
              normalized[name] = new SetAttribute(definition);
              break;
            case AttributeTypes.any:
              if (attributeHasParent) {
                throw new e.ElectroError(e.ErrorCodes.InvalidAttributeDefinition, `Invalid attribute "${definition.name}" defined within "${parent.parentPath}". Attributes with type ${u.commaSeparatedString([AttributeTypes.any, AttributeTypes.custom])} are only supported as root level attributes.`);
              }
            default:
              normalized[name] = new Attribute(definition);
          }
        }
        let watchedWatchers = [];
        let watchingUnknownAttributes = [];
        for (let watched of Object.keys(watchedAttributes)) {
          if (normalized[watched] === void 0) {
            for (let attribute of watchedAttributes[watched]) {
              watchingUnknownAttributes.push({ attribute, watched });
            }
          } else if (normalized[watched].isWatcher()) {
            for (let attribute of watchedAttributes[watched]) {
              watchedWatchers.push({ attribute, watched });
            }
          }
        }
        if (watchingUnknownAttributes.length > 0) {
          throw new e.ElectroError(e.ErrorCodes.InvalidAttributeWatchDefinition, `Attribute Validation Error. The following attributes are defined to "watch" invalid/unknown attributes: ${watchingUnknownAttributes.map(({ watched, attribute }) => `"${attribute}"->"${watched}"`).join(", ")}.`);
        }
        if (watchedWatchers.length > 0) {
          throw new e.ElectroError(e.ErrorCodes.InvalidAttributeWatchDefinition, `Attribute Validation Error. Attributes may only "watch" other attributes also watch attributes. The following attributes are defined with ineligible attributes to watch: ${watchedWatchers.map(({ attribute, watched }) => `"${attribute}"->"${watched}"`).join(", ")}.`);
        }
        let missingFacetAttributes = Array.isArray(facets.attributes) ? facets.attributes.filter(({ name }) => !normalized[name]).map((facet) => `"${facet.type}: ${facet.name}"`) : [];
        if (missingFacetAttributes.length > 0) {
          throw new e.ElectroError(e.ErrorCodes.InvalidKeyCompositeAttributeTemplate, `Invalid key composite attribute template. The following composite attribute attributes were described in the key composite attribute template but were not included model's attributes: ${missingFacetAttributes.join(", ")}`);
        }
        if (invalidProperties.length > 0) {
          let message = invalidProperties.map((prop) => `Schema Validation Error. Attribute "${prop.name}" property "${prop.property}". Received: "${prop.value}", Expected: "${prop.expected}"`);
          throw new e.ElectroError(e.ErrorCodes.InvalidAttributeDefinition, message);
        } else {
          return {
            enums,
            hiddenAttributes,
            readOnlyAttributes,
            requiredAttributes,
            translationForTable,
            translationForRetrieval,
            attributes: normalized
          };
        }
      }
      _validateProperties() {
      }
      _formatWatchTranslations(attributes2) {
        let watchersToAttributes = {};
        let attributesToWatchers = {};
        let watchAllAttributes = {};
        let hasWatchers = false;
        for (let name of Object.keys(attributes2)) {
          if (attributes2[name].isWatcher()) {
            hasWatchers = true;
            watchersToAttributes[name] = attributes2[name].watching;
          } else if (attributes2[name].watchAll) {
            hasWatchers = true;
            watchAllAttributes[name] = name;
          } else {
            attributesToWatchers[name] = attributesToWatchers[name] || {};
            attributesToWatchers[name] = attributes2[name].watchedBy;
          }
        }
        return {
          hasWatchers,
          watchAllAttributes,
          watchersToAttributes,
          attributesToWatchers
        };
      }
      getAttribute(path) {
        return this.traverser.getPath(path);
      }
      getLabels() {
        let labels = {};
        for (let name of Object.keys(this.attributes)) {
          let label = this.attributes[name].label;
          if (label !== void 0) {
            labels[name] = label;
          }
        }
        return labels;
      }
      getLabels() {
        let labels = {};
        for (let name of Object.keys(this.attributes)) {
          let label = this.attributes[name].label;
          if (label !== void 0) {
            labels[name] = label;
          }
        }
        return labels;
      }
      _applyAttributeMutation(method, include, avoid, payload) {
        let data = { ...payload };
        for (let path of Object.keys(include)) {
          const attribute = this.getAttribute(path);
          if (attribute !== void 0 && avoid[path] === void 0) {
            data[path] = attribute[method](payload[path], { ...payload });
          }
        }
        return data;
      }
      _fulfillAttributeMutationMethod(method, payload) {
        let watchersToTrigger = {};
        let avoid = { ...this.translationForWatching.watchersToAttributes, ...this.translationForWatching.watchAllAttributes };
        let data = this._applyAttributeMutation(method, payload, avoid, payload);
        if (!this.translationForWatching.hasWatchers) {
          return data;
        }
        for (let attribute of Object.keys(data)) {
          let watchers = this.translationForWatching.attributesToWatchers[attribute];
          if (watchers !== void 0) {
            watchersToTrigger = { ...watchersToTrigger, ...watchers };
          }
        }
        let include = { ...data, ...watchersToTrigger, ...this.translationForWatching.watchAllAttributes };
        return this._applyAttributeMutation(method, include, this.translationForWatching.attributesToWatchers, data);
      }
      applyAttributeGetters(payload = {}) {
        return this._fulfillAttributeMutationMethod(AttributeMutationMethods.get, payload);
      }
      applyAttributeSetters(payload = {}) {
        return this._fulfillAttributeMutationMethod(AttributeMutationMethods.set, payload);
      }
      translateFromFields(item = {}, options = {}) {
        let { includeKeys } = options;
        let data = {};
        let names = this.translationForRetrieval;
        for (let [attr, value] of Object.entries(item)) {
          let name = names[attr];
          if (name) {
            data[name] = value;
          } else if (includeKeys) {
            data[attr] = value;
          }
        }
        return data;
      }
      translateToFields(payload = {}) {
        let record = {};
        for (let [name, value] of Object.entries(payload)) {
          let field = this.getFieldName(name);
          if (value !== void 0) {
            record[field] = value;
          }
        }
        return record;
      }
      getFieldName(name) {
        if (typeof name === "string") {
          return this.translationForTable[name];
        }
      }
      checkCreate(payload = {}) {
        let record = {};
        for (let attribute of Object.values(this.attributes)) {
          let value = payload[attribute.name];
          record[attribute.name] = attribute.getValidate(value);
        }
        return record;
      }
      checkRemove(paths = []) {
        for (const path of paths) {
          const attribute = this.traverser.getPath(path);
          if (!attribute) {
            throw new e.ElectroAttributeValidationError(path, `Attribute "${path}" does not exist on model.`);
          } else if (attribute.readOnly) {
            throw new e.ElectroAttributeValidationError(attribute.path, `Attribute "${attribute.path}" is Read-Only and cannot be removed`);
          } else if (attribute.required) {
            throw new e.ElectroAttributeValidationError(attribute.path, `Attribute "${attribute.path}" is Required and cannot be removed`);
          }
        }
        return paths;
      }
      checkOperation(attribute, operation, value) {
        if (attribute.required && operation === ItemOperations.remove) {
          throw new e.ElectroAttributeValidationError(attribute.path, `Attribute "${attribute.path}" is Required and cannot be removed`);
        } else if (attribute.readOnly) {
          throw new e.ElectroAttributeValidationError(attribute.path, `Attribute "${attribute.path}" is Read-Only and cannot be updated`);
        }
        return value === void 0 ? void 0 : attribute.getValidate(value);
      }
      checkUpdate(payload = {}, { allowReadOnly } = {}) {
        let record = {};
        for (let [path, value] of Object.entries(payload)) {
          let attribute = this.traverser.paths.get(path);
          if (attribute === void 0) {
            continue;
          }
          if (attribute.readOnly && !allowReadOnly) {
            throw new e.ElectroAttributeValidationError(attribute.path, `Attribute "${attribute.path}" is Read-Only and cannot be updated`);
          } else {
            record[path] = attribute.getValidate(value);
          }
        }
        return record;
      }
      getReadOnly() {
        return Array.from(this.readOnlyAttributes);
      }
      getRequired() {
        return Array.from(this.requiredAttributes);
      }
      formatItemForRetrieval(item, config) {
        let returnAttributes = new Set(config.attributes || []);
        let hasUserSpecifiedReturnAttributes = returnAttributes.size > 0;
        let remapped = this.translateFromFields(item, config);
        let data = this._fulfillAttributeMutationMethod("get", remapped);
        if (this.hiddenAttributes.size > 0 || hasUserSpecifiedReturnAttributes) {
          for (let attribute of Object.keys(data)) {
            if (this.hiddenAttributes.has(attribute)) {
              delete data[attribute];
            }
            if (hasUserSpecifiedReturnAttributes && !returnAttributes.has(attribute)) {
              delete data[attribute];
            }
          }
        }
        return data;
      }
    };
    function createCustomAttribute(definition = {}) {
      return {
        ...definition,
        type: "custom"
      };
    }
    function CustomAttributeType(base) {
      const supported = ["string", "number", "boolean", "any"];
      if (!supported.includes(base)) {
        throw new Error(`OpaquePrimitiveType only supports base types: ${u.commaSeparatedString(supported)}`);
      }
      return base;
    }
    function createSchema(schema) {
      v.model(schema);
      return schema;
    }
    module2.exports = {
      Schema,
      Attribute,
      CastTypes,
      SetAttribute,
      createSchema,
      CustomAttributeType,
      createCustomAttribute
    };
  }
});

// node_modules/electrodb/src/filters.js
var require_filters = __commonJS({
  "node_modules/electrodb/src/filters.js"(exports, module2) {
    var e = require_errors();
    var { MethodTypes, ExpressionTypes } = require_types8();
    var FilterFactory = class {
      constructor(attributes2 = {}, filterTypes = {}) {
        this.attributes = { ...attributes2 };
        this.filters = {
          ...filterTypes
        };
      }
      getExpressionType(methodType) {
        switch (methodType) {
          case MethodTypes.put:
          case MethodTypes.create:
          case MethodTypes.update:
          case MethodTypes.patch:
          case MethodTypes.delete:
          case MethodTypes.get:
          case MethodTypes.upsert:
            return ExpressionTypes.ConditionExpression;
          default:
            return ExpressionTypes.FilterExpression;
        }
      }
      _buildFilterAttributes(setName, setValue) {
        let attributes2 = {};
        for (let [name, attribute] of Object.entries(this.attributes)) {
          let filterAttribute = {};
          for (let [type, { template }] of Object.entries(this.filters)) {
            Object.defineProperty(filterAttribute, type, {
              get: () => {
                return (...values) => {
                  let { prop } = setName({}, name, attribute.field);
                  let attrValues = [];
                  for (let value of values) {
                    if (template.length > 1) {
                      attrValues.push(
                        setValue(name, value, name)
                      );
                    }
                  }
                  let expression = template({}, attribute, prop, ...attrValues);
                  return expression.trim();
                };
              }
            });
          }
          attributes2[name] = filterAttribute;
        }
        return attributes2;
      }
      buildClause(filterFn) {
        return (entity, state, ...params) => {
          const type = this.getExpressionType(state.query.method);
          const builder = state.query.filter[type];
          let setName = (paths, name, value) => builder.setName(paths, name, value);
          let setValue = (name, value, path) => builder.setValue(name, value, path);
          let attributes2 = this._buildFilterAttributes(
            setName,
            setValue
          );
          const expression = filterFn(attributes2, ...params);
          if (typeof expression !== "string") {
            throw new e.ElectroError(e.ErrorCodes.InvalidFilter, "Invalid filter response. Expected result to be of type string");
          }
          builder.add(expression);
          return state;
        };
      }
      injectFilterClauses(clauses = {}, filters = {}) {
        let injected = { ...clauses };
        let filterParents = Object.entries(injected).filter((clause) => {
          let [name, { children }] = clause;
          return children.find((child) => ["go", "commit"].includes(child));
        }).map(([name]) => name);
        let modelFilters = Object.keys(filters);
        let filterChildren = [];
        for (let [name, filter] of Object.entries(filters)) {
          filterChildren.push(name);
          injected[name] = {
            name,
            action: this.buildClause(filter),
            children: ["params", "go", "commit", "filter", ...modelFilters]
          };
        }
        filterChildren.push("filter");
        injected["filter"] = {
          name: "filter",
          action: (entity, state, fn) => {
            return this.buildClause(fn)(entity, state);
          },
          children: ["params", "go", "commit", "filter", ...modelFilters]
        };
        for (let parent of filterParents) {
          injected[parent] = { ...injected[parent] };
          injected[parent].children = [
            ...filterChildren,
            ...injected[parent].children
          ];
        }
        return injected;
      }
    };
    module2.exports = { FilterFactory };
  }
});

// node_modules/electrodb/src/updateOperations.js
var require_updateOperations = __commonJS({
  "node_modules/electrodb/src/updateOperations.js"(exports, module2) {
    var { AttributeTypes, ItemOperations } = require_types8();
    var deleteOperations = {
      canNest: false,
      template: function del(options, attr, path, value) {
        let operation = "";
        let expression = "";
        switch (attr.type) {
          case AttributeTypes.any:
          case AttributeTypes.set:
            operation = ItemOperations.delete;
            expression = `${path} ${value}`;
            break;
          default:
            throw new Error(`Invalid Update Attribute Operation: "DELETE" Operation can only be performed on attributes with type "set" or "any".`);
        }
        return { operation, expression };
      }
    };
    var UpdateOperations = {
      ifNotExists: {
        template: function if_not_exists(options, attr, path, value) {
          const operation = ItemOperations.set;
          const expression = `${path} = if_not_exists(${path}, ${value})`;
          return { operation, expression };
        }
      },
      name: {
        canNest: true,
        template: function name(options, attr, path) {
          return path;
        }
      },
      value: {
        canNest: true,
        template: function value(options, attr, path, value) {
          return value;
        }
      },
      append: {
        canNest: false,
        template: function append(options, attr, path, value) {
          let operation = "";
          let expression = "";
          switch (attr.type) {
            case AttributeTypes.any:
            case AttributeTypes.list:
              const defaultValue = options.createValue("default_value", []);
              expression = `${path} = list_append(if_not_exists(${path}, ${defaultValue}), ${value})`;
              operation = ItemOperations.set;
              break;
            default:
              throw new Error(`Invalid Update Attribute Operation: "APPEND" Operation can only be performed on attributes with type "list" or "any".`);
          }
          return { operation, expression };
        }
      },
      add: {
        canNest: false,
        template: function add(options, attr, path, value, defaultValue) {
          let operation = "";
          let expression = "";
          let type = attr.type;
          if (type === AttributeTypes.any) {
            type = typeof value === "number" ? AttributeTypes.number : AttributeTypes.any;
          }
          switch (type) {
            case AttributeTypes.any:
            case AttributeTypes.set: {
              operation = ItemOperations.add;
              expression = `${path} ${value}`;
              break;
            }
            case AttributeTypes.number: {
              if (options.nestedValue) {
                operation = ItemOperations.set;
                expression = `${path} = ${path} + ${value}`;
              } else if (defaultValue !== void 0) {
                operation = ItemOperations.set;
                expression = `${path} = (if_not_exists(${path}, ${defaultValue}) + ${value})`;
              } else {
                operation = ItemOperations.add;
                expression = `${path} ${value}`;
              }
              break;
            }
            default:
              throw new Error(`Invalid Update Attribute Operation: "ADD" Operation can only be performed on attributes with type "number", "set", or "any".`);
          }
          return { operation, expression };
        }
      },
      subtract: {
        canNest: false,
        template: function subtract(options, attr, path, value, defaultValue = 0) {
          let operation = "";
          let expression = "";
          switch (attr.type) {
            case AttributeTypes.any:
            case AttributeTypes.number: {
              let resolvedDefaultValue;
              if (typeof defaultValue === "string" && defaultValue.startsWith(":")) {
                resolvedDefaultValue = defaultValue;
              } else if (defaultValue !== void 0) {
                resolvedDefaultValue = options.createValue("default_value", defaultValue);
              } else {
                resolvedDefaultValue = options.createValue("default_value", 0);
              }
              operation = ItemOperations.set;
              expression = `${path} = (if_not_exists(${path}, ${resolvedDefaultValue}) - ${value})`;
              break;
            }
            default:
              throw new Error(`Invalid Update Attribute Operation: "SUBTRACT" Operation can only be performed on attributes with type "number" or "any".`);
          }
          return { operation, expression };
        }
      },
      set: {
        canNest: false,
        template: function set(options, attr, path, value) {
          let operation = "";
          let expression = "";
          switch (attr.type) {
            case AttributeTypes.set:
            case AttributeTypes.list:
            case AttributeTypes.map:
            case AttributeTypes.enum:
            case AttributeTypes.string:
            case AttributeTypes.number:
            case AttributeTypes.boolean:
            case AttributeTypes.any:
              operation = ItemOperations.set;
              expression = `${path} = ${value}`;
              break;
            default:
              throw new Error(`Invalid Update Attribute Operation: "SET" Operation can only be performed on attributes with type "list", "map", "string", "number", "boolean", or "any".`);
          }
          return { operation, expression };
        }
      },
      remove: {
        canNest: false,
        template: function remove(options, attr, ...paths) {
          let operation = "";
          let expression = "";
          switch (attr.type) {
            case AttributeTypes.set:
            case AttributeTypes.any:
            case AttributeTypes.list:
            case AttributeTypes.map:
            case AttributeTypes.string:
            case AttributeTypes.number:
            case AttributeTypes.boolean:
            case AttributeTypes.enum:
              operation = ItemOperations.remove;
              expression = paths.join(", ");
              break;
            default: {
              throw new Error(`Invalid Update Attribute Operation: "REMOVE" Operation can only be performed on attributes with type "map", "list", "string", "number", "boolean", or "any".`);
            }
          }
          return { operation, expression };
        }
      },
      del: deleteOperations,
      delete: deleteOperations
    };
    module2.exports = {
      UpdateOperations
    };
  }
});

// node_modules/electrodb/src/filterOperations.js
var require_filterOperations = __commonJS({
  "node_modules/electrodb/src/filterOperations.js"(exports, module2) {
    var FilterOperations = {
      escape: {
        template: function escape(options, attr) {
          return `${attr}`;
        },
        rawValue: true
      },
      size: {
        template: function size(options, attr, name) {
          return `size(${name})`;
        },
        strict: false
      },
      type: {
        template: function attributeType(options, attr, name, value) {
          return `attribute_type(${name}, ${value})`;
        },
        strict: false
      },
      ne: {
        template: function ne(options, attr, name, value) {
          return `${name} <> ${value}`;
        },
        strict: false
      },
      eq: {
        template: function eq(options, attr, name, value) {
          return `${name} = ${value}`;
        },
        strict: false
      },
      gt: {
        template: function gt(options, attr, name, value) {
          return `${name} > ${value}`;
        },
        strict: false
      },
      lt: {
        template: function lt(options, attr, name, value) {
          return `${name} < ${value}`;
        },
        strict: false
      },
      gte: {
        template: function gte(options, attr, name, value) {
          return `${name} >= ${value}`;
        },
        strict: false
      },
      lte: {
        template: function lte(options, attr, name, value) {
          return `${name} <= ${value}`;
        },
        strict: false
      },
      between: {
        template: function between(options, attr, name, value1, value2) {
          return `(${name} between ${value1} and ${value2})`;
        },
        strict: false
      },
      begins: {
        template: function begins(options, attr, name, value) {
          return `begins_with(${name}, ${value})`;
        },
        strict: false
      },
      exists: {
        template: function exists(options, attr, name) {
          return `attribute_exists(${name})`;
        },
        strict: false
      },
      notExists: {
        template: function notExists(options, attr, name) {
          return `attribute_not_exists(${name})`;
        },
        strict: false
      },
      contains: {
        template: function contains(options, attr, name, value) {
          return `contains(${name}, ${value})`;
        },
        strict: false
      },
      notContains: {
        template: function notContains(options, attr, name, value) {
          return `not contains(${name}, ${value})`;
        },
        strict: false
      },
      value: {
        template: function(options, attr, name, value) {
          return value;
        },
        strict: false,
        canNest: true
      },
      name: {
        template: function(options, attr, name) {
          return name;
        },
        strict: false,
        canNest: true
      },
      eqOrNotExists: {
        template: function eq(options, attr, name, value) {
          return `(${name} = ${value} OR attribute_not_exists(${name}))`;
        },
        strict: false
      },
      field: {
        template: function(options, _, fieldName) {
          return fieldName !== void 0 ? `${fieldName}` : "";
        },
        strict: false,
        canNest: true,
        rawField: true
      }
    };
    module2.exports = {
      FilterOperations
    };
  }
});

// node_modules/electrodb/src/operations.js
var require_operations = __commonJS({
  "node_modules/electrodb/src/operations.js"(exports, module2) {
    var { AttributeTypes, ItemOperations, AttributeProxySymbol, BuilderTypes } = require_types8();
    var { UpdateOperations } = require_updateOperations();
    var { FilterOperations } = require_filterOperations();
    var e = require_errors();
    var u = require_util5();
    var ExpressionState = class {
      constructor({ prefix } = {}) {
        this.names = {};
        this.values = {};
        this.paths = {};
        this.counts = {};
        this.impacted = {};
        this.expression = "";
        this.prefix = prefix || "";
        this.refs = {};
      }
      incrementName(name) {
        if (this.counts[name] === void 0) {
          this.counts[name] = 0;
        }
        return `${this.prefix}${this.counts[name]++}`;
      }
      // todo: make the structure: name, value, paths
      setName(paths, name, value) {
        let json = "";
        let expression = "";
        const prop = `#${name}`;
        if (Object.keys(paths).length === 0) {
          json = `${name}`;
          expression = `${prop}`;
          this.names[prop] = value;
        } else if (isNaN(name)) {
          json = `${paths.json}.${name}`;
          expression = `${paths.expression}.${prop}`;
          this.names[prop] = value;
        } else {
          json = `${paths.json}[${name}]`;
          expression = `${paths.expression}[${name}]`;
        }
        return { json, expression, prop };
      }
      getNames() {
        return this.names;
      }
      setValue(name, value) {
        let valueCount = this.incrementName(name);
        let expression = `:${name}${valueCount}`;
        this.values[expression] = value;
        return expression;
      }
      updateValue(name, value) {
        this.values[name] = value;
      }
      getValues() {
        return this.values;
      }
      setPath(path, value) {
        this.paths[path] = value;
      }
      setExpression(expression) {
        this.expression = expression;
      }
      getExpression() {
        return this.expression;
      }
      setImpacted(operation, path, ref) {
        this.impacted[path] = operation;
        this.refs[path] = ref;
      }
    };
    var AttributeOperationProxy = class _AttributeOperationProxy {
      constructor({ builder, attributes: attributes2 = {}, operations = {} }) {
        this.ref = {
          attributes: attributes2,
          operations
        };
        this.attributes = _AttributeOperationProxy.buildAttributes(builder, attributes2);
        this.operations = _AttributeOperationProxy.buildOperations(builder, operations);
      }
      invokeCallback(op, ...params) {
        return op(this.attributes, this.operations, ...params);
      }
      performOperation({ operation, path, value, force = false }) {
        if (value === void 0) {
          return;
        }
        const parts = u.parseJSONPath(path);
        let attribute = this.attributes;
        for (let part of parts) {
          attribute = attribute[part];
        }
        if (attribute) {
          this.operations[operation](attribute, value);
          const { target } = attribute();
          if (target.readOnly && !force) {
            throw new Error(`Attribute "${target.path}" is Read-Only and cannot be updated`);
          }
        }
      }
      fromObject(operation, record) {
        for (let path of Object.keys(record)) {
          this.performOperation({
            operation,
            path,
            value: record[path]
          });
        }
      }
      fromArray(operation, paths) {
        for (let path of paths) {
          const parts = u.parseJSONPath(path);
          let attribute = this.attributes;
          for (let part of parts) {
            attribute = attribute[part];
          }
          if (attribute) {
            this.operations[operation](attribute);
            const { target } = attribute();
            if (target.readOnly) {
              throw new Error(`Attribute "${target.path}" is Read-Only and cannot be updated`);
            } else if (operation === ItemOperations.remove && target.required) {
              throw new Error(`Attribute "${target.path}" is Required and cannot be removed`);
            }
          }
        }
      }
      static buildOperations(builder, operations) {
        let ops = {};
        let seen = /* @__PURE__ */ new Map();
        for (let operation of Object.keys(operations)) {
          let { template, canNest, rawValue, rawField } = operations[operation];
          Object.defineProperty(ops, operation, {
            get: () => {
              return (property, ...values) => {
                if (property === void 0) {
                  throw new e.ElectroError(e.ErrorCodes.InvalidWhere, `Invalid/Unknown property passed in where clause passed to operation: '${operation}'`);
                }
                if (property[AttributeProxySymbol]) {
                  const { commit, target } = property();
                  const fixedValues = values.map((value) => target.applyFixings(value)).filter((value) => value !== void 0);
                  const isFilterBuilder = builder.type === BuilderTypes.filter;
                  const takesValueArgument = template.length > 3;
                  const isAcceptableValue = fixedValues.every((value) => {
                    const seenAttributes = seen.get(value);
                    if (seenAttributes) {
                      return seenAttributes.every((v) => target.acceptable(v));
                    }
                    return target.acceptable(value);
                  });
                  const shouldCommit = (
                    // if it is a filterBuilder than we don't care what they pass because the user needs more freedom here
                    isFilterBuilder || // if the operation does not take a value argument then not committing here could cause problems.
                    // this should be revisited to make more robust, we could hypothetically store the commit in the
                    // "seen" map for when the value is used, but that's a lot of new complexity
                    !takesValueArgument || // if the operation takes a value, we should determine if that value is acceptable. For
                    // example, in the cases of a "set" we check to see if it is empty, or if the value is
                    // undefined, we should not commit. The "fixedValues" length check is because the
                    // "fixedValues" array has been filtered for undefined, so no length there indicates an
                    // undefined value was passed.
                    takesValueArgument && isAcceptableValue && fixedValues.length > 0
                  );
                  if (!shouldCommit) {
                    return "";
                  }
                  const paths = commit();
                  const attributeValues = [];
                  let hasNestedValue = false;
                  for (let fixedValue of fixedValues) {
                    if (seen.has(fixedValue)) {
                      attributeValues.push(fixedValue);
                      hasNestedValue = true;
                    } else {
                      let attributeValueName = builder.setValue(target.name, fixedValue);
                      builder.setPath(paths.json, {
                        value: fixedValue,
                        name: attributeValueName
                      });
                      attributeValues.push(attributeValueName);
                    }
                  }
                  const options = {
                    nestedValue: hasNestedValue,
                    createValue: (name, value) => builder.setValue(`${target.name}_${name}`, value)
                  };
                  const formatted = template(options, target, paths.expression, ...attributeValues);
                  builder.setImpacted(operation, paths.json, target);
                  if (canNest) {
                    seen.set(paths.expression, attributeValues);
                    seen.set(formatted, attributeValues);
                  }
                  if (builder.type === BuilderTypes.update && formatted && typeof formatted.operation === "string" && typeof formatted.expression === "string") {
                    builder.add(formatted.operation, formatted.expression);
                    return formatted.expression;
                  }
                  return formatted;
                } else if (rawValue) {
                  let attributeValueName = builder.setValue(property, property);
                  builder.setPath(property, {
                    value: property,
                    name: attributeValueName
                  });
                  const formatted = template({}, attributeValueName);
                  seen.set(attributeValueName, [property]);
                  seen.set(formatted, [property]);
                  return formatted;
                } else if (rawField) {
                  const { prop, expression } = builder.setName({}, property, property);
                  const formatted = template({}, null, prop);
                  seen.set(expression, [property]);
                  seen.set(formatted, [property]);
                  return formatted;
                } else {
                  throw new e.ElectroError(e.ErrorCodes.InvalidWhere, `Invalid Attribute in where clause passed to operation '${operation}'. Use injected attributes only.`);
                }
              };
            }
          });
        }
        return ops;
      }
      static pathProxy(build) {
        return new Proxy(() => build(), {
          get: (_, prop, o) => {
            if (prop === AttributeProxySymbol) {
              return true;
            } else {
              return _AttributeOperationProxy.pathProxy(() => {
                const { commit, root, target, builder } = build();
                const attribute = target.getChild(prop);
                let field;
                if (attribute === void 0) {
                  throw new Error(`Invalid attribute "${prop}" at path "${target.path}.${prop}"`);
                } else if (attribute === root && attribute.type === AttributeTypes.any) {
                  field = prop;
                } else {
                  field = attribute.field;
                }
                return {
                  root,
                  builder,
                  target: attribute,
                  commit: () => {
                    const paths = commit();
                    return builder.setName(paths, prop, field);
                  }
                };
              });
            }
          }
        });
      }
      static buildAttributes(builder, attributes2) {
        let attr = {};
        for (let [name, attribute] of Object.entries(attributes2)) {
          Object.defineProperty(attr, name, {
            get: () => {
              return _AttributeOperationProxy.pathProxy(() => {
                return {
                  root: attribute,
                  target: attribute,
                  builder,
                  commit: () => builder.setName({}, attribute.name, attribute.field)
                };
              });
            }
          });
        }
        return attr;
      }
    };
    var FilterOperationNames = Object.keys(FilterOperations).reduce((ops, name) => {
      ops[name] = name;
      return ops;
    }, {});
    var UpdateOperationNames = Object.keys(UpdateOperations).reduce((ops, name) => {
      ops[name] = name;
      return ops;
    }, {});
    module2.exports = { UpdateOperations, UpdateOperationNames, FilterOperations, FilterOperationNames, ExpressionState, AttributeOperationProxy };
  }
});

// node_modules/electrodb/src/where.js
var require_where = __commonJS({
  "node_modules/electrodb/src/where.js"(exports, module2) {
    var { MethodTypes, ExpressionTypes, BuilderTypes } = require_types8();
    var { AttributeOperationProxy, ExpressionState, FilterOperations } = require_operations();
    var e = require_errors();
    var FilterExpression = class extends ExpressionState {
      constructor(props) {
        super(props);
        this.expression = "";
        this.type = BuilderTypes.filter;
      }
      _trim(expression) {
        if (typeof expression === "string" && expression.length > 0) {
          return expression.replace(/\n|\r/g, "").trim();
        }
        return "";
      }
      _isEmpty(expression) {
        if (typeof expression !== "string") {
          throw new Error("Invalid expression value type. Expected type string.");
        }
        return !expression.replace(/\n|\r|\w/g, "").trim();
      }
      add(newExpression) {
        let expression = "";
        let existingExpression = this.expression;
        if (typeof existingExpression === "string" && existingExpression.length > 0) {
          newExpression = this._trim(newExpression);
          let isEmpty = this._isEmpty(newExpression);
          if (isEmpty) {
            return existingExpression;
          }
          let existingNeedsParens = !existingExpression.startsWith("(") && !existingExpression.endsWith(")");
          if (existingNeedsParens) {
            existingExpression = `(${existingExpression})`;
          }
          expression = `${existingExpression} AND ${newExpression}`;
        } else {
          expression = this._trim(newExpression);
        }
        this.expression = expression;
      }
      // applies operations without verifying them against known attributes. Used internally for key conditions.
      unsafeSet(operation, name, ...values) {
        const { template } = FilterOperations[operation] || {};
        if (template === void 0) {
          throw new Error(`Invalid operation: "${operation}". Please report this issue via a bug ticket.`);
        }
        const names = this.setName({}, name, name);
        const valueExpressions = values.map((value) => this.setValue(name, value));
        const condition = template({}, names.expression, names.prop, ...valueExpressions);
        this.add(condition);
      }
      build() {
        return this.expression;
      }
    };
    var WhereFactory = class {
      constructor(attributes2 = {}, operations = {}) {
        this.attributes = { ...attributes2 };
        this.operations = { ...operations };
      }
      getExpressionType(methodType) {
        switch (methodType) {
          case MethodTypes.put:
          case MethodTypes.create:
          case MethodTypes.update:
          case MethodTypes.patch:
          case MethodTypes.delete:
          case MethodTypes.remove:
          case MethodTypes.upsert:
          case MethodTypes.get:
          case MethodTypes.check:
            return ExpressionTypes.ConditionExpression;
          default:
            return ExpressionTypes.FilterExpression;
        }
      }
      buildClause(cb) {
        if (typeof cb !== "function") {
          throw new e.ElectroError(e.ErrorCodes.InvalidWhere, 'Where callback must be of type "function"');
        }
        return (entity, state, ...params) => {
          const type = this.getExpressionType(state.query.method);
          const builder = state.query.filter[type];
          const proxy = new AttributeOperationProxy({
            builder,
            attributes: this.attributes,
            operations: this.operations
          });
          const expression = proxy.invokeCallback(cb, ...params);
          if (typeof expression !== "string") {
            throw new e.ElectroError(e.ErrorCodes.InvalidWhere, "Invalid response from where clause callback. Expected return result to be of type string");
          }
          builder.add(expression);
          return state;
        };
      }
      injectWhereClauses(clauses = {}, filters = {}) {
        let injected = { ...clauses };
        let filterParents = Object.entries(injected).filter((clause) => {
          let [name, { children }] = clause;
          return children.find((child) => ["go", "commit"].includes(child));
        }).map(([name]) => name);
        let modelFilters = Object.keys(filters);
        let filterChildren = [];
        for (let [name, filter] of Object.entries(filters)) {
          filterChildren.push(name);
          injected[name] = {
            name,
            action: this.buildClause(filter),
            children: ["params", "go", "commit", "where", ...modelFilters]
          };
        }
        filterChildren.push("where");
        injected["where"] = {
          name: "where",
          action: (entity, state, fn) => {
            return this.buildClause(fn)(entity, state);
          },
          children: ["params", "go", "commit", "where", ...modelFilters]
        };
        for (let parent of filterParents) {
          injected[parent] = { ...injected[parent] };
          injected[parent].children = [
            ...filterChildren,
            ...injected[parent].children
          ];
        }
        return injected;
      }
    };
    module2.exports = {
      WhereFactory,
      FilterExpression
    };
  }
});

// node_modules/electrodb/src/update.js
var require_update = __commonJS({
  "node_modules/electrodb/src/update.js"(exports, module2) {
    var { UpdateOperations } = require_updateOperations();
    var { AttributeOperationProxy, ExpressionState } = require_operations();
    var { ItemOperations, BuilderTypes } = require_types8();
    var UpdateExpression = class extends ExpressionState {
      constructor(props = {}) {
        super({ ...props });
        this.operations = {
          set: /* @__PURE__ */ new Set(),
          remove: /* @__PURE__ */ new Set(),
          add: /* @__PURE__ */ new Set(),
          subtract: /* @__PURE__ */ new Set(),
          delete: /* @__PURE__ */ new Set()
        };
        this.composites = {};
        this.seen = /* @__PURE__ */ new Map();
        this.type = BuilderTypes.update;
      }
      addComposite(attrName, value) {
        if (value !== void 0) {
          if (this.composites[attrName] === void 0 || this.composites[attrName] === value) {
            this.composites[attrName] = value;
            return true;
          }
        }
        return false;
      }
      add(type, expression) {
        this.operations[type].add(expression);
      }
      unadd(type, expression) {
        this.operations[type].delete(expression);
      }
      set(name, value, operation = ItemOperations.set, attribute) {
        let operationToApply = operation;
        if (operation === ItemOperations.ifNotExists) {
          operationToApply = ItemOperations.set;
        }
        const seen = this.seen.get(name);
        let n;
        let v;
        if (seen) {
          n = seen.name;
          v = seen.value;
          this.unadd(operationToApply, seen.expression);
        } else {
          n = this.setName({}, name, name);
          v = this.setValue(name, value);
        }
        let expression = `${n.prop} = ${v}`;
        if (operation === ItemOperations.ifNotExists) {
          expression = `${n.prop} = if_not_exists(${n.prop}, ${v})`;
        }
        this.seen.set(name, {
          name: n,
          value: v,
          expression
        });
        this.add(operationToApply, expression);
      }
      remove(name) {
        const n = this.setName({}, name, name);
        this.add(ItemOperations.remove, `${n.prop}`);
      }
      build() {
        let expressions = [];
        for (const type of Object.keys(this.operations)) {
          const operations = this.operations[type];
          if (operations.size > 0) {
            expressions.push(`${type.toUpperCase()} ${Array.from(operations).join(", ")}`);
          }
        }
        return expressions.join(" ");
      }
    };
    var UpdateEntity = class {
      constructor(attributes2 = {}, operations = {}) {
        this.attributes = { ...attributes2 };
        this.operations = { ...operations };
      }
      buildCallbackHandler(entity, state) {
        const proxy = new AttributeOperationProxy({
          builder: state.query.update,
          attributes: this.attributes,
          operations: this.operations
        });
        return (cb, ...params) => {
          if (typeof cb !== "function") {
            throw new Error('Update Callback must be of type "function"');
          }
          proxy.invokeCallback(cb, ...params);
        };
      }
    };
    module2.exports = {
      UpdateEntity,
      UpdateExpression
    };
  }
});

// node_modules/electrodb/src/clauses.js
var require_clauses = __commonJS({
  "node_modules/electrodb/src/clauses.js"(exports, module2) {
    var {
      QueryTypes,
      MethodTypes,
      ItemOperations,
      ExpressionTypes,
      TransactionCommitSymbol,
      TransactionOperations,
      TerminalOperation,
      KeyTypes,
      IndexTypes,
      UpsertOperations
    } = require_types8();
    var { AttributeOperationProxy, UpdateOperations, FilterOperationNames, UpdateOperationNames } = require_operations();
    var { UpdateExpression } = require_update();
    var { FilterExpression } = require_where();
    var v = require_validations();
    var e = require_errors();
    var u = require_util5();
    var methodChildren = {
      upsert: ["upsertSet", "upsertAppend", "upsertAdd", "go", "params", "upsertSubtract", "commit", "upsertIfNotExists", "where"],
      update: ["data", "set", "append", "add", "updateRemove", "updateDelete", "go", "params", "subtract", "commit", "composite", "ifNotExists", "where"],
      put: ["where", "params", "go", "commit"],
      del: ["where", "params", "go", "commit"]
    };
    function batchAction(action, type, entity, state, payload) {
      if (state.getError() !== null) {
        return state;
      }
      try {
        state.setMethod(type);
        for (let facets of payload) {
          let batchState = action(entity, state.createSubState(), facets);
          if (batchState.getError() !== null) {
            throw batchState.getError();
          }
        }
        return state;
      } catch (err) {
        state.setError(err);
        return state;
      }
    }
    var clauses = {
      index: {
        name: "index",
        children: ["check", "get", "delete", "update", "query", "upsert", "put", "scan", "collection", "clusteredCollection", "create", "remove", "patch", "batchPut", "batchDelete", "batchGet"]
      },
      clusteredCollection: {
        name: "clusteredCollection",
        action(entity, state, collection = "", facets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            const { pk, sk } = state.getCompositeAttributes();
            return state.setType(QueryTypes.clustered_collection).setMethod(MethodTypes.query).setCollection(collection).setPK(entity._expectFacets(facets, pk)).ifSK(() => {
              const { composites, unused } = state.identifyCompositeAttributes(facets, sk, pk);
              state.setSK(composites);
              if (sk.length > 1) {
                state.filterProperties(FilterOperationNames.eq, { ...unused, ...composites });
              }
            }).whenOptions(({ options, state: state2 }) => {
              if (!options.ignoreOwnership && !state2.getParams()) {
                state2.query.options.expressions.names = {
                  ...state2.query.options.expressions.names,
                  ...state2.query.options.identifiers.names
                };
                state2.query.options.expressions.values = {
                  ...state2.query.options.expressions.values,
                  ...state2.query.options.identifiers.values
                };
                state2.query.options.expressions.expression = state2.query.options.expressions.expression.length > 1 ? `(${state2.query.options.expressions.expression}) AND ${state2.query.options.identifiers.expression}` : `${state2.query.options.identifiers.expression}`;
              }
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["between", "gte", "gt", "lte", "lt", "begins", "params", "go"]
      },
      collection: {
        name: "collection",
        /* istanbul ignore next */
        action(entity, state, collection = "", facets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            const { pk, sk } = state.getCompositeAttributes();
            return state.setType(QueryTypes.collection).setMethod(MethodTypes.query).setCollection(collection).setPK(entity._expectFacets(facets, pk)).whenOptions(({ options, state: state2 }) => {
              if (!options.ignoreOwnership && !state2.getParams()) {
                state2.query.options.expressions.names = {
                  ...state2.query.options.expressions.names,
                  ...state2.query.options.identifiers.names
                };
                state2.query.options.expressions.values = {
                  ...state2.query.options.expressions.values,
                  ...state2.query.options.identifiers.values
                };
                state2.query.options.expressions.expression = state2.query.options.expressions.expression.length > 1 ? `(${state2.query.options.expressions.expression}) AND ${state2.query.options.identifiers.expression}` : `${state2.query.options.identifiers.expression}`;
              }
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["params", "go"]
      },
      scan: {
        name: "scan",
        action(entity, state, config) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            return state.setMethod(MethodTypes.scan).whenOptions(({ state: state2, options }) => {
              if (!options.ignoreOwnership && !state2.getParams()) {
                state2.unsafeApplyFilter(FilterOperationNames.eq, entity.identifiers.entity, entity.getName());
                state2.unsafeApplyFilter(FilterOperationNames.eq, entity.identifiers.version, entity.getVersion());
              }
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["params", "go"]
      },
      get: {
        name: "get",
        /* istanbul ignore next */
        action(entity, state, facets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            const { pk, sk } = state.getCompositeAttributes();
            const { composites } = state.identifyCompositeAttributes(facets, sk, pk);
            return state.setMethod(MethodTypes.get).setType(QueryTypes.eq).setPK(entity._expectFacets(facets, pk)).ifSK(() => {
              entity._expectFacets(facets, sk);
              state.setSK(composites);
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["params", "go", "commit"]
      },
      check: {
        name: "check",
        action(...params) {
          return clauses.get.action(...params).setMethod(MethodTypes.check);
        },
        children: ["commit"]
      },
      batchGet: {
        name: "batchGet",
        action: (entity, state, payload) => batchAction(clauses.get.action, MethodTypes.batchGet, entity, state, payload),
        children: ["params", "go"]
      },
      batchDelete: {
        name: "batchDelete",
        action: (entity, state, payload) => batchAction(clauses.delete.action, MethodTypes.batchWrite, entity, state, payload),
        children: ["params", "go"]
      },
      delete: {
        name: "delete",
        /* istanbul ignore next */
        action(entity, state, facets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            const { pk, sk } = state.getCompositeAttributes();
            const pkComposite = entity._expectFacets(facets, pk);
            state.addOption("_includeOnResponseItem", pkComposite);
            return state.setMethod(MethodTypes.delete).setType(QueryTypes.eq).setPK(pkComposite).ifSK(() => {
              entity._expectFacets(facets, sk);
              const skComposite = state.buildQueryComposites(facets, sk);
              state.setSK(skComposite);
              state.addOption("_includeOnResponseItem", { ...skComposite, ...pkComposite });
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["where", "params", "go", "commit"]
      },
      remove: {
        name: "remove",
        /* istanbul ignore next */
        action(entity, state, facets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            const attributes2 = state.getCompositeAttributes();
            const filter = state.query.filter[ExpressionTypes.ConditionExpression];
            const { pk, sk } = entity._getPrimaryIndexFieldNames();
            filter.unsafeSet(FilterOperationNames.exists, pk);
            if (sk) {
              filter.unsafeSet(FilterOperationNames.exists, sk);
            }
            const pkComposite = entity._expectFacets(facets, attributes2.pk);
            state.addOption("_includeOnResponseItem", pkComposite);
            return state.setMethod(MethodTypes.delete).setType(QueryTypes.eq).setPK(pkComposite).ifSK(() => {
              entity._expectFacets(facets, attributes2.sk);
              const skComposite = state.buildQueryComposites(facets, attributes2.sk);
              state.setSK(skComposite);
              state.addOption("_includeOnResponseItem", { ...skComposite, ...pkComposite });
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.del
      },
      upsert: {
        name: "upsert",
        action(entity, state, payload = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            return state.setMethod(MethodTypes.upsert).setType(QueryTypes.eq).applyUpsert(UpsertOperations.set, payload).beforeBuildParams(({ state: state2 }) => {
              const { upsert, update, updateProxy } = state2.query;
              state2.query.update.set(entity.identifiers.entity, entity.getName());
              state2.query.update.set(entity.identifiers.version, entity.getVersion());
              const setData = {};
              const nonSetData = {};
              let allData = {};
              for (const name in upsert.data) {
                const { operation, value } = upsert.data[name];
                allData[name] = value;
                if (operation === UpsertOperations.set) {
                  setData[name] = value;
                } else {
                  nonSetData[name] = value;
                }
              }
              const upsertData = entity.model.schema.checkCreate({ ...allData });
              const attributes2 = state2.getCompositeAttributes();
              const pkComposite = entity._expectFacets(upsertData, attributes2.pk);
              state2.addOption("_includeOnResponseItem", pkComposite).setPK(pkComposite).ifSK(() => {
                entity._expectFacets(upsertData, attributes2.sk);
                const skComposite = entity._buildQueryFacets(upsertData, attributes2.sk);
                state2.setSK(skComposite);
                state2.addOption("_includeOnResponseItem", { ...skComposite, ...pkComposite });
              });
              const appliedData = entity.model.schema.applyAttributeSetters({ ...upsertData });
              const onlySetAppliedData = {};
              const nonSetAppliedData = {};
              for (const name in appliedData) {
                const value = appliedData[name];
                const isSetOperation = setData[name] !== void 0;
                const cameFromApplyingSetters = allData[name] === void 0;
                const isNotUndefined = appliedData[name] !== void 0;
                const applyAsSet = isSetOperation || cameFromApplyingSetters;
                if (applyAsSet && isNotUndefined) {
                  onlySetAppliedData[name] = value;
                } else {
                  nonSetAppliedData[name] = value;
                }
              }
              const { pk } = state2.query.keys;
              const sk = state2.query.keys.sk[0];
              const { updatedKeys, setAttributes, indexKey } = entity._getPutKeys(pk, sk && sk.facets, onlySetAppliedData);
              upsert.indexKey = indexKey;
              const setFields = Object.entries(entity.model.schema.translateToFields(setAttributes));
              for (const key in updatedKeys) {
                const value = updatedKeys[key];
                if (indexKey[key] === void 0) {
                  setFields.push([key, value]);
                }
              }
              entity._maybeApplyUpsertUpdate({
                fields: setFields,
                operation: UpsertOperations.set,
                updateProxy,
                update
              });
              for (const name in nonSetData) {
                const value = appliedData[name];
                if (value === void 0 || upsert.data[name] === void 0) {
                  continue;
                }
                const { operation } = upsert.data[name];
                const fields = entity.model.schema.translateToFields({ [name]: value });
                entity._maybeApplyUpsertUpdate({
                  fields: Object.entries(fields),
                  updateProxy,
                  operation,
                  update
                });
              }
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.upsert
      },
      put: {
        name: "put",
        /* istanbul ignore next */
        action(entity, state, payload = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            let record = entity.model.schema.checkCreate({ ...payload });
            const attributes2 = state.getCompositeAttributes();
            return state.setMethod(MethodTypes.put).setType(QueryTypes.eq).applyPut(record).setPK(entity._expectFacets(record, attributes2.pk)).ifSK(() => {
              entity._expectFacets(record, attributes2.sk);
              state.setSK(state.buildQueryComposites(record, attributes2.sk));
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.put
      },
      batchPut: {
        name: "batchPut",
        action: (entity, state, payload) => batchAction(clauses.put.action, MethodTypes.batchWrite, entity, state, payload),
        children: ["params", "go"]
      },
      create: {
        name: "create",
        action(entity, state, payload) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            let record = entity.model.schema.checkCreate({ ...payload });
            const attributes2 = state.getCompositeAttributes();
            const filter = state.query.filter[ExpressionTypes.ConditionExpression];
            const { pk, sk } = entity._getPrimaryIndexFieldNames();
            filter.unsafeSet(FilterOperationNames.notExists, pk);
            if (sk) {
              filter.unsafeSet(FilterOperationNames.notExists, sk);
            }
            return state.setMethod(MethodTypes.put).setType(QueryTypes.eq).applyPut(record).setPK(entity._expectFacets(record, attributes2.pk)).ifSK(() => {
              entity._expectFacets(record, attributes2.sk);
              state.setSK(state.buildQueryComposites(record, attributes2.sk));
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.put
      },
      patch: {
        name: "patch",
        action(entity, state, facets) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            const attributes2 = state.getCompositeAttributes();
            const filter = state.query.filter[ExpressionTypes.ConditionExpression];
            const { pk, sk } = entity._getPrimaryIndexFieldNames();
            filter.unsafeSet(FilterOperationNames.exists, pk);
            if (sk) {
              filter.unsafeSet(FilterOperationNames.exists, sk);
            }
            const pkComposite = entity._expectFacets(facets, attributes2.pk);
            state.addOption("_includeOnResponseItem", pkComposite);
            return state.setMethod(MethodTypes.update).setType(QueryTypes.eq).setPK(pkComposite).ifSK(() => {
              entity._expectFacets(facets, attributes2.sk);
              const skComposite = state.buildQueryComposites(facets, attributes2.sk);
              state.setSK(skComposite);
              state.addOption("_includeOnResponseItem", { ...skComposite, ...pkComposite });
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.update
      },
      update: {
        name: "update",
        action(entity, state, facets) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            const attributes2 = state.getCompositeAttributes();
            const pkComposite = entity._expectFacets(facets, attributes2.pk);
            state.addOption("_includeOnResponseItem", pkComposite);
            return state.setMethod(MethodTypes.update).setType(QueryTypes.eq).setPK(pkComposite).ifSK(() => {
              entity._expectFacets(facets, attributes2.sk);
              const skComposite = state.buildQueryComposites(facets, attributes2.sk);
              state.setSK(skComposite);
              state.addOption("_includeOnResponseItem", { ...pkComposite, ...skComposite });
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.update
      },
      data: {
        name: "data",
        action(entity, state, cb) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            state.query.updateProxy.invokeCallback(cb);
            for (const path of Object.keys(state.query.update.refs)) {
              const operation = state.query.update.impacted[path];
              const attribute = state.query.update.refs[path];
              const keyValue = state.query.update.paths[path] || {};
              if (!attribute) {
                throw new e.ElectroAttributeValidationError(path, `Attribute "${path}" does not exist on model.`);
              }
              entity.model.schema.checkOperation(attribute, operation, keyValue.value);
            }
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.update
      },
      set: {
        name: "set",
        action(entity, state, data) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            entity.model.schema.checkUpdate(data);
            state.query.updateProxy.fromObject(ItemOperations.set, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.update
      },
      upsertSet: {
        name: "set",
        action(entity, state, data) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            entity.model.schema.checkUpdate(data, { allowReadOnly: true });
            state.query.upsert.addData(UpsertOperations.set, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.upsert
      },
      composite: {
        name: "composite",
        action(entity, state, composites = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            for (const attrName in composites) {
              if (entity.model.facets.byAttr[attrName]) {
                const wasSet = state.query.update.addComposite(attrName, composites[attrName]);
                if (!wasSet) {
                  throw new e.ElectroError(e.ErrorCodes.DuplicateUpdateCompositesProvided, `The composite attribute ${attrName} has been provided more than once with different values. Remove the duplication before running again`);
                }
                state.applyCondition(FilterOperationNames.eq, attrName, composites[attrName]);
              }
            }
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.update
      },
      append: {
        name: "append",
        action(entity, state, data = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            entity.model.schema.checkUpdate(data);
            state.query.updateProxy.fromObject(ItemOperations.append, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.update
      },
      ifNotExists: {
        name: "ifNotExists",
        action(entity, state, data = {}) {
          entity.model.schema.checkUpdate(data);
          state.query.updateProxy.fromObject(ItemOperations.ifNotExists, data);
          return state;
        },
        children: methodChildren.update
      },
      upsertIfNotExists: {
        name: "ifNotExists",
        action(entity, state, data = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            entity.model.schema.checkUpdate(data, { allowReadOnly: true });
            state.query.upsert.addData(UpsertOperations.ifNotExists, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.upsert
      },
      upsertAppend: {
        name: "append",
        action(entity, state, data = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            entity.model.schema.checkUpdate(data, { allowReadOnly: true });
            state.query.upsert.addData(UpsertOperations.append, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.upsert
      },
      updateRemove: {
        name: "remove",
        action(entity, state, data) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            if (!Array.isArray(data)) {
              throw new Error("Update method 'remove' expects type Array");
            }
            entity.model.schema.checkRemove(data);
            state.query.updateProxy.fromArray(ItemOperations.remove, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.update
      },
      updateDelete: {
        name: "delete",
        action(entity, state, data) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            entity.model.schema.checkUpdate(data);
            state.query.updateProxy.fromObject(ItemOperations.delete, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.update
      },
      add: {
        name: "add",
        action(entity, state, data) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            entity.model.schema.checkUpdate(data);
            state.query.updateProxy.fromObject(ItemOperations.add, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.update
      },
      upsertAdd: {
        name: "add",
        action(entity, state, data) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            entity.model.schema.checkUpdate(data, { allowReadOnly: true });
            state.query.upsert.addData(UpsertOperations.add, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.upsert
      },
      upsertSubtract: {
        name: "subtract",
        action(entity, state, data) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            entity.model.schema.checkUpdate(data, { allowReadOnly: true });
            state.query.upsert.addData(UpsertOperations.subtract, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.upsert
      },
      subtract: {
        name: "subtract",
        action(entity, state, data) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            entity.model.schema.checkUpdate(data);
            state.query.updateProxy.fromObject(ItemOperations.subtract, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.update
      },
      query: {
        name: "query",
        action(entity, state, facets, options = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            state.addOption("_isPagination", true);
            const { pk, sk } = state.getCompositeAttributes();
            return state.setMethod(MethodTypes.query).setType(QueryTypes.is).setPK(entity._expectFacets(facets, pk)).ifSK(() => {
              const { composites, unused } = state.identifyCompositeAttributes(facets, sk, pk);
              state.setSK(state.buildQueryComposites(facets, sk));
              if (sk.length > 1) {
                state.filterProperties(FilterOperationNames.eq, { ...unused, ...composites });
              }
              state.whenOptions(({ options: options2, state: state2 }) => {
                if (state2.query.options.indexType === IndexTypes.clustered && Object.keys(composites).length < sk.length && !options2.ignoreOwnership && !state2.getParams()) {
                  state2.unsafeApplyFilter(FilterOperationNames.eq, entity.identifiers.entity, entity.getName()).unsafeApplyFilter(FilterOperationNames.eq, entity.identifiers.version, entity.getVersion());
                }
              });
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["between", "gte", "gt", "lte", "lt", "begins", "params", "go"]
      },
      between: {
        name: "between",
        action(entity, state, startingFacets = {}, endingFacets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            const { pk, sk } = state.getCompositeAttributes();
            const endingSk = state.identifyCompositeAttributes(endingFacets, sk, pk);
            const startingSk = state.identifyCompositeAttributes(startingFacets, sk, pk);
            return state.setType(QueryTypes.and).setSK(endingSk.composites).setType(QueryTypes.between).setSK(startingSk.composites).filterProperties(FilterOperationNames.lte, endingSk.composites);
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["go", "params"]
      },
      begins: {
        name: "begins",
        action(entity, state, facets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            return state.setType(QueryTypes.begins).ifSK((state2) => {
              const attributes2 = state2.getCompositeAttributes();
              state2.setSK(state2.buildQueryComposites(facets, attributes2.sk));
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["go", "params"]
      },
      gt: {
        name: "gt",
        action(entity, state, facets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            return state.setType(QueryTypes.gt).ifSK((state2) => {
              const { pk, sk } = state2.getCompositeAttributes();
              const { composites } = state2.identifyCompositeAttributes(facets, sk, pk);
              state2.setSK(composites);
              state2.filterProperties(FilterOperationNames.gt, {
                ...composites
              });
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["go", "params"]
      },
      gte: {
        name: "gte",
        action(entity, state, facets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            return state.setType(QueryTypes.gte).ifSK((state2) => {
              const attributes2 = state2.getCompositeAttributes();
              state2.setSK(state2.buildQueryComposites(facets, attributes2.sk));
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["go", "params"]
      },
      lt: {
        name: "lt",
        action(entity, state, facets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            return state.setType(QueryTypes.lt).ifSK((state2) => {
              const { pk, sk } = state2.getCompositeAttributes();
              const { composites } = state2.identifyCompositeAttributes(facets, sk, pk);
              state2.setSK(composites);
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["go", "params"]
      },
      lte: {
        name: "lte",
        action(entity, state, facets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            return state.setType(QueryTypes.lte).ifSK((state2) => {
              const { pk, sk } = state2.getCompositeAttributes();
              const { composites } = state2.identifyCompositeAttributes(facets, sk, pk);
              state2.setSK(composites);
              state2.filterProperties(FilterOperationNames.lte, {
                ...composites
              });
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["go", "params"]
      },
      commit: {
        name: "commit",
        action(entity, state, options) {
          if (state.getError() !== null) {
            throw state.error;
          }
          const results = clauses.params.action(entity, state, {
            ...options,
            _returnOptions: true,
            _isTransaction: true
          });
          const method = TransactionOperations[state.query.method];
          if (!method) {
            throw new Error("Invalid commit method");
          }
          return {
            [method]: results.params,
            [TransactionCommitSymbol]: () => {
              return {
                entity
              };
            }
          };
        },
        children: []
      },
      params: {
        name: "params",
        action(entity, state, options = {}) {
          if (state.getError() !== null) {
            throw state.error;
          }
          try {
            if (!v.isStringHasLength(options.table) && !v.isStringHasLength(entity.getTableName())) {
              throw new e.ElectroError(e.ErrorCodes.MissingTable, `Table name not defined. Table names must be either defined on the model, instance configuration, or as a query option.`);
            }
            const method = state.getMethod();
            const normalizedOptions = entity._normalizeExecutionOptions({
              provided: [state.getOptions(), state.query.options, options],
              context: { operation: options._isTransaction ? MethodTypes.transactWrite : void 0 }
            });
            state.applyWithOptions(normalizedOptions);
            state.applyBeforeBuildParams(normalizedOptions);
            let results;
            switch (method) {
              case MethodTypes.query: {
                results = entity._queryParams(state, normalizedOptions);
                break;
              }
              case MethodTypes.batchWrite: {
                results = entity._batchWriteParams(state, normalizedOptions);
                break;
              }
              case MethodTypes.batchGet: {
                results = entity._batchGetParams(state, normalizedOptions);
                break;
              }
              default: {
                results = entity._params(state, normalizedOptions);
                break;
              }
            }
            if (method === MethodTypes.update && results.ExpressionAttributeValues && Object.keys(results.ExpressionAttributeValues).length === 0) {
              delete results.ExpressionAttributeValues;
            }
            if (options._returnOptions) {
              results = {
                params: results,
                options: normalizedOptions
              };
            }
            state.setParams(results);
            return results;
          } catch (err) {
            throw err;
          }
        },
        children: []
      },
      go: {
        name: "go",
        action(entity, state, options = {}) {
          if (state.getError() !== null) {
            return Promise.reject(state.error);
          }
          try {
            if (entity.client === void 0) {
              throw new e.ElectroError(e.ErrorCodes.NoClientDefined, "No client defined on model");
            }
            options.terminalOperation = TerminalOperation.go;
            const paramResults = clauses.params.action(entity, state, { ...options, _returnOptions: true });
            return entity.go(state.getMethod(), paramResults.params, paramResults.options);
          } catch (err) {
            return Promise.reject(err);
          }
        },
        children: []
      }
    };
    var ChainState = class _ChainState {
      constructor({ index = "", compositeAttributes = {}, attributes: attributes2 = {}, hasSortKey = false, options = {}, parentState = null } = {}) {
        const update = new UpdateExpression({ prefix: "_u" });
        this.parentState = parentState;
        this.error = null;
        this.attributes = attributes2;
        this.query = {
          collection: "",
          index,
          type: "",
          method: "",
          facets: { ...compositeAttributes },
          update,
          updateProxy: new AttributeOperationProxy({
            builder: update,
            attributes: attributes2,
            operations: UpdateOperations
          }),
          put: {
            data: {}
          },
          upsert: {
            data: {},
            indexKey: null,
            addData(operation = UpsertOperations.set, data = {}) {
              for (const name of Object.keys(data)) {
                const value = data[name];
                this.data[name] = {
                  operation,
                  value
                };
              }
            },
            getData(operationFilter) {
              const results = {};
              for (const name in this.data) {
                const { operation, value } = this.data[name];
                if (!operationFilter || operationFilter === operation) {
                  results[name] = value;
                }
              }
              return results;
            }
          },
          keys: {
            provided: [],
            pk: {},
            sk: []
          },
          filter: {
            [ExpressionTypes.ConditionExpression]: new FilterExpression(),
            [ExpressionTypes.FilterExpression]: new FilterExpression()
          },
          options
        };
        this.subStates = [];
        this.hasSortKey = hasSortKey;
        this.prev = null;
        this.self = null;
        this.params = null;
        this.applyAfterOptions = [];
        this.beforeBuildParamsOperations = [];
        this.beforeBuildParamsHasRan = false;
      }
      getParams() {
        return this.params;
      }
      setParams(params) {
        if (params) {
          this.params = params;
        }
      }
      init(entity, allClauses, currentClause) {
        let current = {};
        for (let child of currentClause.children) {
          const name = allClauses[child].name;
          current[name] = (...args) => {
            this.prev = this.self;
            this.self = child;
            let results = allClauses[child].action(entity, this, ...args);
            if (allClauses[child].children.length) {
              return this.init(entity, allClauses, allClauses[child]);
            } else {
              return results;
            }
          };
        }
        return current;
      }
      getMethod() {
        return this.query.method;
      }
      getOptions() {
        return this.query.options;
      }
      addOption(key, value) {
        this.query.options[key] = value;
        return this;
      }
      _appendProvided(type, attributes2) {
        const newAttributes = Object.keys(attributes2).map((attribute) => {
          return {
            type,
            attribute
          };
        });
        return u.getUnique(this.query.keys.provided, newAttributes);
      }
      setPK(attributes2) {
        this.query.keys.pk = attributes2;
        this.query.keys.provided = this._appendProvided(KeyTypes.pk, attributes2);
        return this;
      }
      ifSK(cb) {
        if (this.hasSortKey) {
          cb(this);
        }
        return this;
      }
      getCompositeAttributes() {
        return this.query.facets;
      }
      buildQueryComposites(provided, definition) {
        return definition.map((name) => [name, provided[name]]).reduce(
          (result, [name, value]) => {
            if (value !== void 0) {
              result[name] = value;
            }
            return result;
          },
          {}
        );
      }
      identifyCompositeAttributes(provided, defined, skip) {
        const composites = {};
        const unused = {};
        const definedSet = new Set(defined || []);
        const skipSet = new Set(skip || []);
        for (const key of Object.keys(provided)) {
          const value = provided[key];
          if (definedSet.has(key)) {
            composites[key] = value;
          } else if (skipSet.has(key)) {
            continue;
          } else {
            unused[key] = value;
          }
        }
        return {
          composites,
          unused
        };
      }
      applyFilter(operation, name, ...values) {
        if (FilterOperationNames[operation] !== void 0 & name !== void 0 && values.length > 0) {
          const attribute = this.attributes[name];
          if (attribute !== void 0) {
            this.unsafeApplyFilter(operation, attribute.field, ...values);
          }
        }
        return this;
      }
      applyCondition(operation, name, ...values) {
        if (FilterOperationNames[operation] !== void 0 && name !== void 0 && values.length > 0) {
          const attribute = this.attributes[name];
          if (attribute !== void 0) {
            const filter = this.query.filter[ExpressionTypes.ConditionExpression];
            filter.unsafeSet(operation, attribute.field, ...values);
          }
        }
        return this;
      }
      unsafeApplyFilter(operation, name, ...values) {
        if (FilterOperationNames[operation] !== void 0 & name !== void 0 && values.length > 0) {
          const filter = this.query.filter[ExpressionTypes.FilterExpression];
          filter.unsafeSet(operation, name, ...values);
        }
        return this;
      }
      filterProperties(operation, obj = {}) {
        for (const property in obj) {
          const value = obj[property];
          if (value !== void 0) {
            this.applyFilter(operation, property, value);
          }
        }
        return this;
      }
      setSK(attributes2, type = this.query.type) {
        if (this.hasSortKey) {
          this.query.keys.sk.push({
            type,
            facets: attributes2
          });
          this.query.keys.provided = this._appendProvided(KeyTypes.sk, attributes2);
        }
        return this;
      }
      setType(type) {
        if (!QueryTypes[type]) {
          throw new Error(`Invalid query type: "${type}"`);
        }
        this.query.type = QueryTypes[type];
        return this;
      }
      setMethod(method) {
        if (!MethodTypes[method]) {
          throw new Error(`Invalid method type: "${method}"`);
        }
        this.query.method = MethodTypes[method];
        return this;
      }
      setCollection(collection) {
        this.query.collection = collection;
        return this;
      }
      createSubState() {
        let subState = new _ChainState({
          parentState: this,
          index: this.query.index,
          attributes: this.attributes,
          hasSortKey: this.hasSortKey,
          options: this.query.options,
          compositeAttributes: this.query.facets
        });
        this.subStates.push(subState);
        return subState;
      }
      getError() {
        return this.error;
      }
      setError(err) {
        this.error = err;
        if (this.parentState) {
          this.parentState.setError(err);
        }
      }
      applyUpsert(operation = UpsertOperations.set, data = {}) {
        this.query.upsert.addData(operation, data);
        return this;
      }
      applyPut(data = {}) {
        this.query.put.data = { ...this.query.put.data, ...data };
        return this;
      }
      whenOptions(fn) {
        if (v.isFunction(fn)) {
          this.applyAfterOptions.push((options) => {
            fn({ options, state: this });
          });
        }
      }
      applyWithOptions(options = {}) {
        this.applyAfterOptions.forEach((fn) => fn(options));
      }
      beforeBuildParams(fn) {
        if (v.isFunction(fn)) {
          this.beforeBuildParamsOperations.push((options) => {
            fn({ options, state: this });
          });
        }
      }
      applyBeforeBuildParams(options = {}) {
        if (!this.beforeBuildParamsHasRan) {
          this.beforeBuildParamsHasRan = true;
          this.beforeBuildParamsOperations.forEach((fn) => fn(options));
        }
      }
    };
    module2.exports = {
      clauses,
      ChainState
    };
  }
});

// node_modules/electrodb/src/events.js
var require_events = __commonJS({
  "node_modules/electrodb/src/events.js"(exports, module2) {
    var e = require_errors();
    var v = require_validations();
    var EventManager = class _EventManager {
      static createSafeListener(listener) {
        if (listener === void 0) {
          return void 0;
        }
        if (!v.isFunction(listener)) {
          throw new e.ElectroError(e.ErrorCodes.InvalidListenerProvided, `Provided listener is not of type 'function'`);
        } else {
          return (...params) => {
            try {
              listener(...params);
            } catch (err) {
              console.error(`Error invoking user supplied listener`, err);
            }
          };
        }
      }
      static normalizeListeners(listeners = []) {
        if (!Array.isArray(listeners)) {
          throw new e.ElectroError(e.ErrorCodes.InvalidListenerProvided, `Listeners must be provided as an array of functions`);
        }
        return listeners.map((listener) => _EventManager.createSafeListener(listener)).filter((listener) => {
          switch (typeof listener) {
            case "function":
              return true;
            case "undefined":
              return false;
            default:
              throw new e.ElectroError(e.ErrorCodes.InvalidListenerProvided, `Provided listener is not of type 'function`);
          }
        });
      }
      constructor({ listeners = [] } = {}) {
        this.listeners = _EventManager.normalizeListeners(listeners);
      }
      add(listeners = []) {
        if (!Array.isArray(listeners)) {
          listeners = [listeners];
        }
        this.listeners = this.listeners.concat(
          _EventManager.normalizeListeners(listeners)
        );
      }
      trigger(event, adHocListeners = []) {
        const allListeners = [
          ...this.listeners,
          ..._EventManager.normalizeListeners(adHocListeners)
        ];
        for (const listener of allListeners) {
          listener(event);
        }
      }
    };
    module2.exports = {
      EventManager
    };
  }
});

// node_modules/electrodb/src/client.js
var require_client4 = __commonJS({
  "node_modules/electrodb/src/client.js"(exports, module2) {
    var lib = require_dist_cjs59();
    var util = require_utils3();
    var { isFunction } = require_validations();
    var { ElectroError, ErrorCodes } = require_errors();
    var DocumentClientVersions = {
      v2: "v2",
      v3: "v3",
      electro: "electro"
    };
    var unmarshallOutput = util.unmarshallOutput || ((val2) => val2);
    var v3Methods = ["send"];
    var v2Methods = ["get", "put", "update", "delete", "batchWrite", "batchGet", "scan", "query", "createSet", "transactWrite", "transactGet"];
    var supportedClientVersions = {
      [DocumentClientVersions.v2]: v2Methods,
      [DocumentClientVersions.v3]: v3Methods
    };
    var DocumentClientV2Wrapper = class _DocumentClientV2Wrapper {
      static init(client) {
        return new _DocumentClientV2Wrapper(client, lib);
      }
      constructor(client, lib2) {
        this.client = client;
        this.lib = lib2;
        this.__v = "v2";
      }
      get(params) {
        return this.client.get(params);
      }
      put(params) {
        return this.client.put(params);
      }
      update(params) {
        return this.client.update(params);
      }
      delete(params) {
        return this.client.delete(params);
      }
      batchWrite(params) {
        return this.client.batchWrite(params);
      }
      batchGet(params) {
        return this.client.batchGet(params);
      }
      scan(params) {
        return this.client.scan(params);
      }
      query(params) {
        return this.client.query(params);
      }
      _transact(transactionRequest) {
        let cancellationReasons;
        transactionRequest.on("extractError", (response) => {
          try {
            cancellationReasons = JSON.parse(response.httpResponse.body.toString()).CancellationReasons;
          } catch (err) {
          }
        });
        return {
          async promise() {
            return transactionRequest.promise().catch((err) => {
              if (err) {
                if (Array.isArray(cancellationReasons)) {
                  return {
                    canceled: cancellationReasons.map((reason) => {
                      if (reason.Item) {
                        return unmarshallOutput(reason, [{ key: "Item" }]);
                      }
                      return reason;
                    })
                  };
                }
                throw err;
              }
            });
          }
        };
      }
      transactWrite(params) {
        const transactionRequest = this.client.transactWrite(params);
        return this._transact(transactionRequest);
      }
      transactGet(params) {
        const transactionRequest = this.client.transactGet(params);
        return this._transact(transactionRequest);
      }
      createSet(value, ...rest) {
        if (Array.isArray(value)) {
          return this.client.createSet(value, ...rest);
        } else {
          return this.client.createSet([value], ...rest);
        }
      }
    };
    var DocumentClientV3Wrapper = class _DocumentClientV3Wrapper {
      static init(client) {
        return new _DocumentClientV3Wrapper(client, lib);
      }
      constructor(client, lib2) {
        this.client = client;
        this.lib = lib2;
        this.__v = "v3";
      }
      promiseWrap(fn) {
        return {
          promise: async () => {
            return fn();
          }
        };
      }
      get(params) {
        return this.promiseWrap(() => {
          const command = new this.lib.GetCommand(params);
          return this.client.send(command);
        });
      }
      put(params) {
        return this.promiseWrap(() => {
          const command = new this.lib.PutCommand(params);
          return this.client.send(command);
        });
      }
      update(params) {
        return this.promiseWrap(() => {
          const command = new this.lib.UpdateCommand(params);
          return this.client.send(command);
        });
      }
      delete(params) {
        return this.promiseWrap(async () => {
          const command = new this.lib.DeleteCommand(params);
          return this.client.send(command);
        });
      }
      batchWrite(params) {
        return this.promiseWrap(async () => {
          const command = new this.lib.BatchWriteCommand(params);
          return this.client.send(command);
        });
      }
      batchGet(params) {
        return this.promiseWrap(async () => {
          const command = new this.lib.BatchGetCommand(params);
          return this.client.send(command);
        });
      }
      scan(params) {
        return this.promiseWrap(async () => {
          const command = new this.lib.ScanCommand(params);
          return this.client.send(command);
        });
      }
      query(params) {
        return this.promiseWrap(async () => {
          const command = new this.lib.QueryCommand(params);
          return this.client.send(command);
        });
      }
      transactWrite(params) {
        return this.promiseWrap(async () => {
          const command = new this.lib.TransactWriteCommand(params);
          return this.client.send(command).then((result) => {
            return result;
          }).catch((err) => {
            if (err.CancellationReasons) {
              return {
                canceled: err.CancellationReasons.map((reason) => {
                  if (reason.Item) {
                    return unmarshallOutput(reason, [{ key: "Item" }]);
                  }
                  return reason;
                })
              };
            }
            throw err;
          });
        });
      }
      transactGet(params) {
        return this.promiseWrap(async () => {
          const command = new this.lib.TransactGetCommand(params);
          return this.client.send(command).then((result) => {
            return result;
          }).catch((err) => {
            if (err.CancellationReasons) {
              return {
                canceled: err.CancellationReasons.map((reason) => {
                  if (reason.Item) {
                    return unmarshallOutput(reason, [{ key: "Item" }]);
                  }
                  return reason;
                })
              };
            }
            throw err;
          });
        });
      }
      createSet(value) {
        if (Array.isArray(value)) {
          return new Set(value);
        } else {
          return /* @__PURE__ */ new Set([value]);
        }
      }
    };
    function identifyClientVersion(client = {}) {
      if (client instanceof DocumentClientV3Wrapper || client instanceof DocumentClientV2Wrapper) {
        return DocumentClientVersions.electro;
      }
      for (const [version2, methods] of Object.entries(supportedClientVersions)) {
        const hasMethods = methods.every((method) => {
          return method in client && isFunction(client[method]);
        });
        if (hasMethods) {
          return version2;
        }
      }
    }
    function normalizeClient(client) {
      if (client === void 0)
        return client;
      const version2 = identifyClientVersion(client);
      switch (version2) {
        case DocumentClientVersions.v3:
          return DocumentClientV3Wrapper.init(client);
        case DocumentClientVersions.v2:
          return DocumentClientV2Wrapper.init(client);
        case DocumentClientVersions.electro:
          return client;
        default:
          throw new ElectroError(ErrorCodes.InvalidClientProvided, "Invalid DynamoDB Document Client provided. ElectroDB supports the v2 and v3 DynamoDB Document Clients from the aws-sdk");
      }
    }
    function normalizeConfig(config = {}) {
      return {
        ...config,
        client: normalizeClient(config.client)
      };
    }
    module2.exports = {
      util,
      v2Methods,
      v3Methods,
      normalizeClient,
      normalizeConfig,
      identifyClientVersion,
      DocumentClientVersions,
      supportedClientVersions,
      DocumentClientV3Wrapper,
      DocumentClientV2Wrapper
    };
  }
});

// node_modules/electrodb/src/entity.js
var require_entity = __commonJS({
  "node_modules/electrodb/src/entity.js"(exports, module2) {
    "use strict";
    var { Schema } = require_schema();
    var {
      AllPages,
      KeyCasing,
      TableIndex,
      FormatToReturnValues,
      ReturnValues,
      EntityVersions,
      ItemOperations,
      UnprocessedTypes,
      Pager,
      ElectroInstance,
      KeyTypes,
      QueryTypes,
      MethodTypes,
      Comparisons,
      ExpressionTypes,
      ModelVersions,
      ElectroInstanceTypes,
      MaxBatchItems,
      TerminalOperation,
      ResultOrderOption,
      ResultOrderParam,
      IndexTypes,
      PartialComparisons,
      MethodTypeTranslation,
      TransactionCommitSymbol,
      CastKeyOptions,
      UpsertOperations
    } = require_types8();
    var { FilterFactory } = require_filters();
    var { FilterOperations } = require_operations();
    var { WhereFactory } = require_where();
    var { clauses, ChainState } = require_clauses();
    var { EventManager } = require_events();
    var validations = require_validations();
    var c = require_client4();
    var u = require_util5();
    var e = require_errors();
    var v = require_validations();
    var Entity2 = class {
      constructor(model, config = {}) {
        config = c.normalizeConfig(config);
        this.eventManager = new EventManager({
          listeners: config.listeners
        });
        this.eventManager.add(config.logger);
        this._validateModel(model);
        this.version = EntityVersions.v1;
        this.config = config;
        this.client = config.client;
        this.model = this._parseModel(model, config);
        this.config.table = config.table || model.table;
        this._filterBuilder = new FilterFactory(this.model.schema.attributes, FilterOperations);
        this._whereBuilder = new WhereFactory(this.model.schema.attributes, FilterOperations);
        this._clausesWithFilters = this._filterBuilder.injectFilterClauses(clauses, this.model.filters);
        this._clausesWithFilters = this._whereBuilder.injectWhereClauses(this._clausesWithFilters);
        this.query = {};
        this.conversions = {
          fromComposite: {
            toKeys: (composite, options = {}) => this._fromCompositeToKeys({ provided: composite }, options),
            toCursor: (composite) => this._fromCompositeToCursor({ provided: composite }, { strict: "all" })
          },
          fromKeys: {
            toCursor: (keys) => this._fromKeysToCursor({ provided: keys }, {}),
            toComposite: (keys) => this._fromKeysToComposite({ provided: keys })
          },
          fromCursor: {
            toKeys: (cursor) => this._fromCursorToKeys({ provided: cursor }),
            toComposite: (cursor) => this._fromCursorToComposite({ provided: cursor })
          },
          byAccessPattern: {}
        };
        for (let accessPattern in this.model.indexes) {
          let index = this.model.indexes[accessPattern].index;
          this.query[accessPattern] = (...values) => {
            const options = {
              indexType: this.model.indexes[accessPattern].type || IndexTypes.isolated
            };
            return this._makeChain(index, this._clausesWithFilters, clauses.index, options).query(...values);
          };
          this.conversions.byAccessPattern[accessPattern] = {
            fromKeys: {
              toCursor: (keys) => this._fromKeysToCursorByIndex({ indexName: index, provided: keys }),
              toComposite: (keys) => this._fromKeysToCompositeByIndex({ indexName: index, provided: keys })
            },
            fromCursor: {
              toKeys: (cursor) => this._fromCursorToKeysByIndex({ indexName: index, provided: cursor }),
              toComposite: (cursor) => this._fromCursorToCompositeByIndex({ indexName: index, provided: cursor })
            },
            fromComposite: {
              toCursor: (composite) => this._fromCompositeToCursorByIndex({ indexName: index, provided: composite }, { strict: "all" }),
              toKeys: (composite, options = {}) => this._fromCompositeToKeysByIndex({ indexName: index, provided: composite }, options)
            }
          };
        }
        this.config.identifiers = config.identifiers || {};
        this.identifiers = {
          entity: this.config.identifiers.entity || "__edb_e__",
          version: this.config.identifiers.version || "__edb_v__"
        };
        this._instance = ElectroInstance.entity;
        this._instanceType = ElectroInstanceTypes.entity;
        this.schema = model;
      }
      get scan() {
        return this._makeChain(TableIndex, this._clausesWithFilters, clauses.index, { _isPagination: true }).scan();
      }
      setIdentifier(type = "", identifier = "") {
        if (!this.identifiers[type]) {
          throw new e.ElectroError(e.ErrorCodes.InvalidIdentifier, `Invalid identifier type: "${type}". Valid identifiers include: ${u.commaSeparatedString(Object.keys(this.identifiers))}`);
        } else {
          this.identifiers[type] = identifier;
        }
      }
      getName() {
        return this.model.entity;
      }
      getVersion() {
        return this.model.version;
      }
      // ownsItem(item) {
      // 	return (
      // 		item &&
      // 		this.getName() === item[this.identifiers.entity] &&
      // 		this.getVersion() === item[this.identifiers.version] &&
      // 		validations.isStringHasLength(item[this.identifiers.entity]) &&
      // 		validations.isStringHasLength(item[this.identifiers.version])
      // 	) || !!this.ownsKeys(item)
      // }
      // ownsKeys({keys = {}}) {
      // 	let {pk, sk} = this.model.prefixes[TableIndex];
      // 	let hasSK = this.model.lookup.indexHasSortKeys[TableIndex];
      // 	let pkMatch = typeof keys[pk.field] === "string" && keys[pk.field].startsWith(pk.prefix);
      // 	let skMatch = pkMatch && !hasSK;
      // 	if (pkMatch && hasSK) {
      // 		skMatch = typeof keys[sk.field] === "string" && keys[sk.field].startsWith(sk.prefix);
      // 	}
      //
      // 	return (pkMatch && skMatch &&
      // 		this._formatKeysToItem(TableIndex, key) !== null);
      // }
      // ownsCursor({ cursor }) {
      // 	if (typeof cursor === 'string') {
      // 		cursor = u.cursorFormatter.deserialize(cursor);
      // 	}
      // 	return this.ownsKeys({ keys: cursor });
      // }
      ownsItem(item) {
        return item && this.getName() === item[this.identifiers.entity] && this.getVersion() === item[this.identifiers.version] && validations.isStringHasLength(item[this.identifiers.entity]) && validations.isStringHasLength(item[this.identifiers.version]);
      }
      _attributesIncludeKeys(attributes2 = []) {
        let { pk, sk } = this.model.prefixes[TableIndex];
        let pkFound = false;
        let skFound = false;
        for (let i = 0; i < attributes2.length; i++) {
          const attribute = attributes2[i];
          if (attribute === sk.field) {
            skFound = true;
          }
          if (attribute === pk.field) {
            skFound = true;
          }
          if (pkFound && skFound) {
            return true;
          }
        }
        return false;
      }
      ownsKeys(key = {}) {
        let { pk, sk } = this.model.prefixes[TableIndex];
        let hasSK = this.model.lookup.indexHasSortKeys[TableIndex];
        let pkMatch = typeof key[pk.field] === "string" && key[pk.field].startsWith(pk.prefix);
        let skMatch = pkMatch && !hasSK;
        if (pkMatch && hasSK) {
          skMatch = typeof key[sk.field] === "string" && key[sk.field].startsWith(sk.prefix);
        }
        return pkMatch && skMatch && this._formatKeysToItem(TableIndex, key) !== null;
      }
      ownsCursor(cursor) {
        if (typeof cursor === "string") {
          cursor = u.cursorFormatter.deserialize(cursor);
        }
        return this.ownsKeys(cursor);
      }
      serializeCursor(key) {
        return u.cursorFormatter.serialize(key);
      }
      deserializeCursor(cursor) {
        return u.cursorFormatter.deserialize(cursor);
      }
      /** @depricated pagers no longer exist, use the new cursor api */
      ownsPager(pager, index = TableIndex) {
        if (pager === null) {
          return false;
        }
        let tableIndexFacets = this.model.facets.byIndex[index];
        let indexFacets = this.model.facets.byIndex[index];
        if (tableIndexFacets === void 0 || indexFacets === void 0) {
          return false;
        }
        let matchesTableIndex = tableIndexFacets.all.every((facet) => {
          return pager[facet.name] !== void 0;
        });
        if (!matchesTableIndex) {
          return false;
        }
        return indexFacets.all.every((facet) => {
          return pager[facet.name] !== void 0;
        });
      }
      match(facets = {}) {
        const options = { _isPagination: true };
        const match = this._findBestIndexKeyMatch(facets);
        if (match.shouldScan) {
          return this._makeChain(TableIndex, this._clausesWithFilters, clauses.index, options).scan().filter((attr) => {
            let eqFilters = [];
            for (let facet of Object.keys(facets)) {
              if (attr[facet] !== void 0 && facets[facet] !== void 0) {
                eqFilters.push(attr[facet].eq(facets[facet]));
              }
            }
            return eqFilters.join(" AND ");
          });
        } else {
          return this._makeChain(match.index, this._clausesWithFilters, clauses.index, options).query(facets).filter((attr) => {
            let eqFilters = [];
            for (let facet of Object.keys(facets)) {
              if (attr[facet] !== void 0 && facets[facet] !== void 0) {
                eqFilters.push(attr[facet].eq(facets[facet]));
              }
            }
            return eqFilters.join(" AND ");
          });
        }
      }
      find(facets = {}) {
        const options = { _isPagination: true };
        const match = this._findBestIndexKeyMatch(facets);
        if (match.shouldScan) {
          return this._makeChain(TableIndex, this._clausesWithFilters, clauses.index, options).scan();
        } else {
          return this._makeChain(match.index, this._clausesWithFilters, clauses.index, options).query(facets);
        }
      }
      collection(collection = "", clauses2 = {}, facets = {}, options = {}) {
        const chainOptions = {
          ...options,
          _isCollectionQuery: true
        };
        let index = this.model.translations.collections.fromCollectionToIndex[collection];
        if (index === void 0) {
          throw new Error(`Invalid collection: ${collection}`);
        }
        const chain = this._makeChain(index, clauses2, clauses2.index, chainOptions);
        if (options.indexType === IndexTypes.clustered) {
          return chain.clusteredCollection(
            collection,
            facets
          );
        } else {
          return chain.collection(
            collection,
            facets
          );
        }
      }
      _validateModel(model) {
        return validations.model(model);
      }
      check(compositeAttributes = {}) {
        return this._makeChain(TableIndex, this._clausesWithFilters, clauses.index).check(compositeAttributes);
      }
      get(facets = {}) {
        let index = TableIndex;
        if (Array.isArray(facets)) {
          return this._makeChain(index, this._clausesWithFilters, clauses.index).batchGet(facets);
        } else {
          return this._makeChain(index, this._clausesWithFilters, clauses.index).get(facets);
        }
      }
      delete(facets = {}) {
        let index = TableIndex;
        if (Array.isArray(facets)) {
          return this._makeChain(index, this._clausesWithFilters, clauses.index).batchDelete(facets);
        } else {
          return this._makeChain(index, this._clausesWithFilters, clauses.index).delete(facets);
        }
      }
      put(attributes2 = {}) {
        let index = TableIndex;
        if (Array.isArray(attributes2)) {
          return this._makeChain(index, this._clausesWithFilters, clauses.index).batchPut(attributes2);
        } else {
          return this._makeChain(index, this._clausesWithFilters, clauses.index).put(attributes2);
        }
      }
      upsert(attributes2 = {}) {
        let index = TableIndex;
        return this._makeChain(index, this._clausesWithFilters, clauses.index).upsert(attributes2);
      }
      create(attributes2 = {}) {
        let index = TableIndex;
        let options = {};
        return this._makeChain(index, this._clausesWithFilters, clauses.index, options).create(attributes2);
      }
      update(facets = {}) {
        let index = TableIndex;
        return this._makeChain(index, this._clausesWithFilters, clauses.index).update(facets);
      }
      patch(facets = {}) {
        let index = TableIndex;
        let options = {};
        return this._makeChain(index, this._clausesWithFilters, clauses.index, options).patch(facets);
      }
      remove(facets = {}) {
        let index = TableIndex;
        let options = {};
        return this._makeChain(index, this._clausesWithFilters, clauses.index, options).remove(facets);
      }
      async transactWrite(parameters, config) {
        let response = await this._exec(MethodTypes.transactWrite, parameters, config);
        return response;
      }
      async transactGet(parameters, config) {
        let response = await this._exec(MethodTypes.transactGet, parameters, config);
        return response;
      }
      async go(method, parameters = {}, config = {}) {
        let stackTrace;
        if (!config.originalErr) {
          stackTrace = new e.ElectroError(e.ErrorCodes.AWSError);
        }
        try {
          switch (method) {
            case MethodTypes.batchWrite:
              return await this.executeBulkWrite(parameters, config);
            case MethodTypes.batchGet:
              return await this.executeBulkGet(parameters, config);
            case MethodTypes.query:
            case MethodTypes.scan:
              return await this.executeQuery(method, parameters, config);
            default:
              return await this.executeOperation(method, parameters, config);
          }
        } catch (err) {
          if (config.originalErr || stackTrace === void 0) {
            return Promise.reject(err);
          } else {
            if (err.__isAWSError) {
              stackTrace.message = new e.ElectroError(e.ErrorCodes.AWSError, `Error thrown by DynamoDB client: "${err.message}"`).message;
              return Promise.reject(stackTrace);
            } else if (err.isElectroError) {
              return Promise.reject(err);
            } else {
              stackTrace.message = new e.ElectroError(e.ErrorCodes.UnknownError, err.message).message;
              return Promise.reject(stackTrace);
            }
          }
        }
      }
      async _exec(method, params, config = {}) {
        const notifyQuery = () => {
          this.eventManager.trigger({
            type: "query",
            method,
            params,
            config
          }, config.listeners);
        };
        const notifyResults = (results, success) => {
          this.eventManager.trigger({
            type: "results",
            method,
            config,
            success,
            results
          }, config.listeners);
        };
        const dynamoDBMethod = MethodTypeTranslation[method];
        return this.client[dynamoDBMethod](params).promise().then((results) => {
          notifyQuery();
          notifyResults(results, true);
          return results;
        }).catch((err) => {
          notifyQuery();
          notifyResults(err, false);
          err.__isAWSError = true;
          throw err;
        });
      }
      async executeBulkWrite(parameters, config) {
        if (!Array.isArray(parameters)) {
          parameters = [parameters];
        }
        let results = [];
        let concurrent = this._normalizeConcurrencyValue(config.concurrent);
        let concurrentOperations = u.batchItems(parameters, concurrent);
        for (let operation of concurrentOperations) {
          await Promise.all(operation.map(async (params) => {
            let response = await this._exec(MethodTypes.batchWrite, params, config);
            if (validations.isFunction(config.parse)) {
              let parsed = config.parse(config, response);
              if (parsed) {
                results.push(parsed);
              }
            } else {
              let { unprocessed } = this.formatBulkWriteResponse(response, config);
              for (let u2 of unprocessed) {
                results.push(u2);
              }
            }
          }));
        }
        return { unprocessed: results };
      }
      _createNewBatchGetOrderMaintainer(config = {}) {
        const pkName = this.model.translations.keys[TableIndex].pk;
        const skName = this.model.translations.keys[TableIndex].sk;
        const enabled = !!config.preserveBatchOrder;
        const table = this.config.table;
        const keyFormatter = (record = {}) => {
          const pk = record[pkName];
          const sk = record[skName];
          return `${pk}${sk}`;
        };
        return new u.BatchGetOrderMaintainer({
          table,
          enabled,
          keyFormatter
        });
      }
      async executeBulkGet(parameters, config) {
        if (!Array.isArray(parameters)) {
          parameters = [parameters];
        }
        const orderMaintainer = this._createNewBatchGetOrderMaintainer(config);
        orderMaintainer.defineOrder(parameters);
        let concurrent = this._normalizeConcurrencyValue(config.concurrent);
        let concurrentOperations = u.batchItems(parameters, concurrent);
        let resultsAll = config.preserveBatchOrder ? new Array(orderMaintainer.getSize()).fill(null) : [];
        let unprocessedAll = [];
        for (let operation of concurrentOperations) {
          await Promise.all(operation.map(async (params) => {
            let response = await this._exec(MethodTypes.batchGet, params, config);
            if (validations.isFunction(config.parse)) {
              resultsAll.push(config.parse(config, response));
            } else {
              this.applyBulkGetResponseFormatting({
                orderMaintainer,
                resultsAll,
                unprocessedAll,
                response,
                config
              });
            }
          }));
        }
        return { data: resultsAll, unprocessed: unprocessedAll };
      }
      async hydrate(index, keys = [], config) {
        const items = [];
        const validKeys = [];
        for (let i = 0; i < keys.length; i++) {
          const key = keys[i];
          const item = this._formatKeysToItem(index, key);
          if (item !== null) {
            items.push(item);
            validKeys.push(key);
          }
        }
        const results = await this.get(items).go({
          ...config,
          hydrate: false,
          parse: void 0,
          hydrator: void 0,
          _isCollectionQuery: false,
          preserveBatchOrder: true,
          ignoreOwnership: config._providedIgnoreOwnership
        });
        const unprocessed = [];
        const data = [];
        for (let i = 0; i < results.data.length; i++) {
          const key = validKeys[i];
          const item = results.data[i];
          if (!item) {
            if (key) {
              unprocessed.push(key);
            }
          } else {
            data.push(item);
          }
        }
        return {
          unprocessed,
          data
        };
      }
      async executeQuery(method, parameters, config = {}) {
        let results = config._isCollectionQuery ? {} : [];
        let ExclusiveStartKey = this._formatExclusiveStartKey({ config, indexName: parameters.IndexName });
        if (ExclusiveStartKey === null) {
          ExclusiveStartKey = void 0;
        }
        let pages = this._normalizePagesValue(config.pages);
        let max = this._normalizeLimitValue(config.limit);
        let iterations = 0;
        let count = 0;
        let hydratedUnprocessed = [];
        const shouldHydrate = config.hydrate && method === MethodTypes.query;
        do {
          let limit = max === void 0 ? parameters.Limit : max - count;
          let response = await this._exec(method, { ExclusiveStartKey, ...parameters, Limit: limit }, config);
          ExclusiveStartKey = response.LastEvaluatedKey;
          response = this.formatResponse(response, parameters.IndexName, {
            ...config,
            includeKeys: shouldHydrate || config.includeKeys,
            ignoreOwnership: shouldHydrate || config.ignoreOwnership
          });
          if (config.raw) {
            return response;
          } else if (config._isCollectionQuery) {
            for (const entity in response.data) {
              if (max) {
                count += response.data[entity].length;
              }
              let items = response.data[entity];
              if (shouldHydrate && items.length) {
                const hydrated = await config.hydrator(entity, parameters.IndexName, items, config);
                items = hydrated.data;
                hydratedUnprocessed = hydratedUnprocessed.concat(hydrated.unprocessed);
              }
              results[entity] = results[entity] || [];
              results[entity] = [...results[entity], ...items];
            }
          } else if (Array.isArray(response.data)) {
            if (max) {
              count += response.data.length;
            }
            let items = response.data;
            if (shouldHydrate) {
              const hydrated = await this.hydrate(parameters.IndexName, items, config);
              items = hydrated.data;
              hydratedUnprocessed = hydratedUnprocessed.concat(hydrated.unprocessed);
            }
            results = [...results, ...items];
          } else {
            return response;
          }
          iterations++;
        } while (ExclusiveStartKey && (pages === AllPages || iterations < pages) && (max === void 0 || count < max));
        const cursor = this._formatReturnPager(config, ExclusiveStartKey);
        if (shouldHydrate) {
          return {
            cursor,
            data: results,
            unprocessed: hydratedUnprocessed
          };
        }
        return { data: results, cursor };
      }
      async executeOperation(method, parameters, config) {
        let response = await this._exec(method, parameters, config);
        switch (parameters.ReturnValues) {
          case FormatToReturnValues.none:
            return { data: null };
          case FormatToReturnValues.all_new:
          case FormatToReturnValues.all_old:
          case FormatToReturnValues.updated_new:
          case FormatToReturnValues.updated_old:
            return this.formatResponse(response, TableIndex, config);
          case FormatToReturnValues.default:
          default:
            return this._formatDefaultResponse(method, parameters.IndexName, parameters, config, response);
        }
      }
      _formatDefaultResponse(method, index, parameters, config = {}, response) {
        switch (method) {
          case MethodTypes.put:
          case MethodTypes.create:
            return this.formatResponse(parameters, index, config);
          case MethodTypes.update:
          case MethodTypes.patch:
          case MethodTypes.delete:
          case MethodTypes.remove:
          case MethodTypes.upsert:
            return this.formatResponse(response, index, { ...config, _objectOnEmpty: true });
          default:
            return this.formatResponse(response, index, config);
        }
      }
      cleanseRetrievedData(item = {}, options = {}) {
        let { includeKeys } = options;
        let data = {};
        let names = this.model.schema.translationForRetrieval;
        for (let [attr, value] of Object.entries(item)) {
          let name = names[attr];
          if (name) {
            data[name] = value;
          } else if (includeKeys) {
            data[attr] = value;
          }
        }
        return data;
      }
      formatBulkWriteResponse(response = {}, config = {}) {
        if (!response || !response.UnprocessedItems) {
          return response;
        }
        const table = config.table || this.getTableName();
        const index = TableIndex;
        let unprocessed = response.UnprocessedItems[table];
        if (Array.isArray(unprocessed) && unprocessed.length) {
          unprocessed = unprocessed.map((request) => {
            if (request.PutRequest) {
              return this.formatResponse(request.PutRequest, index, config).data;
            } else if (request.DeleteRequest) {
              if (config.unprocessed === UnprocessedTypes.raw) {
                return request.DeleteRequest.Key;
              } else {
                return this._formatKeysToItem(index, request.DeleteRequest.Key);
              }
            } else {
              throw new Error("Unknown response format");
            }
          });
        } else {
          unprocessed = [];
        }
        return { unprocessed };
      }
      applyBulkGetResponseFormatting({
        resultsAll,
        unprocessedAll,
        orderMaintainer,
        response = {},
        config = {}
      }) {
        const table = config.table || this.getTableName();
        const index = TableIndex;
        if (!response.UnprocessedKeys || !response.Responses) {
          throw new Error("Unknown response format");
        }
        if (response.UnprocessedKeys[table] && response.UnprocessedKeys[table].Keys && Array.isArray(response.UnprocessedKeys[table].Keys)) {
          for (let value of response.UnprocessedKeys[table].Keys) {
            if (config && config.unprocessed === UnprocessedTypes.raw) {
              unprocessedAll.push(value);
            } else {
              unprocessedAll.push(
                this._formatKeysToItem(index, value)
              );
            }
          }
        }
        if (response.Responses[table] && Array.isArray(response.Responses[table])) {
          const responses = response.Responses[table];
          for (let i = 0; i < responses.length; i++) {
            const item = responses[i];
            const slot = orderMaintainer.getOrder(item);
            const formatted = this.formatResponse({ Item: item }, index, config);
            if (slot !== -1) {
              resultsAll[slot] = formatted.data;
            } else {
              resultsAll.push(formatted.data);
            }
          }
        }
      }
      formatResponse(response, index, config = {}) {
        let stackTrace;
        if (!config.originalErr) {
          stackTrace = new e.ElectroError(e.ErrorCodes.AWSError);
        }
        try {
          let results = {};
          if (validations.isFunction(config.parse)) {
            results = config.parse(config, response);
          } else if (config.raw && !config._isPagination) {
            if (response.TableName) {
              results = {};
            } else {
              results = response;
            }
          } else if (config.raw && (config._isPagination || config.lastEvaluatedKeyRaw)) {
            results = response;
          } else {
            if (response.Item) {
              if (config.ignoreOwnership && config.attributes && config.attributes.length > 0 && !this._attributesIncludeKeys(config.attributes) || (config.ignoreOwnership || config.hydrate) && this.ownsKeys(response.Item) || this.ownsItem(response.Item)) {
                results = this.model.schema.formatItemForRetrieval(response.Item, config);
                if (Object.keys(results).length === 0) {
                  results = null;
                }
              } else if (!config._objectOnEmpty) {
                results = null;
              }
            } else if (response.Items) {
              results = [];
              for (let item of response.Items) {
                if (config.ignoreOwnership && config.attributes && config.attributes.length > 0 && !this._attributesIncludeKeys(config.attributes) || (config.ignoreOwnership || config.hydrate) && this.ownsKeys(item) || this.ownsItem(item)) {
                  let record = this.model.schema.formatItemForRetrieval(item, config);
                  if (Object.keys(record).length > 0) {
                    results.push(record);
                  }
                }
              }
            } else if (response.Attributes) {
              results = this.model.schema.formatItemForRetrieval(response.Attributes, config);
              if (Object.keys(results).length === 0) {
                results = null;
              }
            } else if (config._objectOnEmpty) {
              return {
                data: {
                  ...config._includeOnResponseItem
                }
              };
            } else {
              results = null;
            }
          }
          if (config._isPagination || response.LastEvaluatedKey) {
            const nextPage = this._formatReturnPager(config, response.LastEvaluatedKey);
            return { cursor: nextPage || null, data: results };
          }
          return { data: results };
        } catch (err) {
          if (config.originalErr || stackTrace === void 0) {
            throw err;
          } else {
            stackTrace.message = err.message;
            throw stackTrace;
          }
        }
      }
      parse(item, options = {}) {
        if (item === void 0 || item === null) {
          return null;
        }
        const config = {
          ...options || {},
          ignoreOwnership: true
        };
        return this.formatResponse(item, TableIndex, config);
      }
      _fromCompositeToKeys({ provided }, options = {}) {
        if (!provided || Object.keys(provided).length === 0) {
          throw new e.ElectroError(e.ErrorCodes.InvalidConversionCompositeProvided, "Invalid conversion composite provided");
        }
        let keys = {};
        const secondaryIndexStrictMode = options.strict === "all" || options.strict === "pk" ? "pk" : "none";
        for (const { index } of Object.values(this.model.indexes)) {
          const indexKeys = this._fromCompositeToKeysByIndex({ indexName: index, provided }, {
            strict: index === TableIndex ? options.strict : secondaryIndexStrictMode
          });
          if (indexKeys) {
            keys = {
              ...keys,
              ...indexKeys
            };
          }
        }
        if (Object.keys(keys).length === 0) {
          throw new e.ElectroError(e.ErrorCodes.InvalidConversionCompositeProvided, "Invalid conversion composite provided");
        }
        return keys;
      }
      _fromCompositeToCursor({ provided }, options = {}) {
        const keys = this._fromCompositeToKeys({ provided }, options);
        if (!keys || Object.keys(keys).length === 0) {
          throw new e.ElectroError(e.ErrorCodes.InvalidConversionCompositeProvided, "Invalid conversion composite provided");
        }
        return u.cursorFormatter.serialize(keys);
      }
      _fromKeysToCursor({ provided }, options = {}) {
        if (!provided || Object.keys(provided).length === 0) {
          throw new e.ElectroError(e.ErrorCodes.InvalidConversionKeysProvided, "Invalid keys provided");
        }
        return u.cursorFormatter.serialize(provided);
      }
      _fromKeysToComposite({ provided }, options = {}) {
        if (!provided || Object.keys(provided).length === 0) {
          throw new e.ElectroError(e.ErrorCodes.InvalidConversionKeysProvided, "Provided keys could not be used to form composite attributes");
        }
        let keys = {};
        for (const { index } of Object.values(this.model.indexes)) {
          const composite = this._fromKeysToCompositeByIndex({ indexName: index, provided }, options);
          if (composite) {
            for (const attribute in composite) {
              if (keys[attribute] === void 0) {
                keys[attribute] = composite[attribute];
              }
            }
          }
        }
        if (Object.keys(keys).length === 0) {
          throw new e.ElectroError(e.ErrorCodes.InvalidConversionKeysProvided, "Provided keys could not be used to form composite attributes");
        }
        return keys;
      }
      _fromCursorToKeys({ provided }, options = {}) {
        if (typeof provided !== "string") {
          throw new e.ElectroError(e.ErrorCodes.InvalidConversionCursorProvided, "Invalid conversion cursor provided");
        }
        return u.cursorFormatter.deserialize(provided);
      }
      _fromCursorToComposite({ provided }, options = {}) {
        if (typeof provided !== "string") {
          throw new e.ElectroError(e.ErrorCodes.InvalidConversionCursorProvided, "Invalid conversion cursor provided");
        }
        const keys = this._fromCursorToKeys({ provided }, options);
        if (!keys) {
          throw new e.ElectroError(e.ErrorCodes.InvalidConversionCursorProvided, "Invalid conversion cursor provided");
        }
        return this._fromKeysToComposite({ provided: keys }, options);
      }
      _fromCompositeToCursorByIndex({ indexName = TableIndex, provided }, options = {}) {
        if (!provided || Object.keys(provided).length === 0) {
          throw new e.ElectroError(e.ErrorCodes.InvalidConversionCompositeProvided, "Invalid conversion composite provided");
        }
        const keys = this._formatSuppliedPager(indexName, provided, {
          relaxedPk: false,
          relaxedSk: false
        });
        return this._fromKeysToCursorByIndex({ indexName, provided: keys }, options);
      }
      _fromCompositeToKeysByIndex({ indexName = TableIndex, provided }, options = {}) {
        return this._formatSuppliedPager(indexName, provided, {
          relaxedPk: options.strict !== "pk" && options.strict !== "all",
          relaxedSk: options.strict !== "all"
        });
      }
      _fromCursorToKeysByIndex({ provided }, options = {}) {
        if (typeof provided !== "string" || provided.length < 1) {
          throw new e.ElectroError(e.ErrorCodes.InvalidConversionCursorProvided, "Invalid conversion cursor provided");
        }
        return u.cursorFormatter.deserialize(provided);
      }
      _fromKeysToCursorByIndex({ indexName = TableIndex, provided }, options = {}) {
        const isValidTableIndex = this._verifyKeys({ indexName: TableIndex, provided });
        const isValidIndex = this._verifyKeys({ indexName, provided });
        if (!isValidTableIndex) {
          throw new e.ElectroError(e.ErrorCodes.InvalidConversionKeysProvided, "Provided keys did not include valid properties for the primary index");
        } else if (!isValidIndex) {
          throw new e.ElectroError(e.ErrorCodes.InvalidConversionKeysProvided, `Provided keys did not include valid properties for the index "${indexName}"`);
        }
        const keys = this._trimKeysToIndex({ indexName, provided });
        if (!keys || Object.keys(keys).length === 0) {
          throw new e.ElectroError(e.ErrorCodes.InvalidConversionKeysProvided, `Provided keys not defined`);
        }
        return u.cursorFormatter.serialize(provided);
      }
      _fromKeysToCompositeByIndex({ indexName = TableIndex, provided }, options = {}) {
        let allKeys = {};
        const indexKeys = this._deconstructIndex({ index: indexName, keys: provided });
        if (!indexKeys) {
          throw new e.ElectroError(e.ErrorCodes.InvalidConversionKeysProvided, `Provided keys did not include valid properties for the index "${indexName}"`);
        }
        allKeys = {
          ...indexKeys
        };
        let tableKeys;
        if (indexName !== TableIndex) {
          tableKeys = this._deconstructIndex({ index: TableIndex, keys: provided });
        }
        if (tableKeys === null) {
          return allKeys;
        }
        allKeys = {
          ...allKeys,
          ...tableKeys
        };
        if (Object.keys(allKeys).length === 0) {
          throw new e.ElectroError(e.ErrorCodes.InvalidConversionKeysProvided, "Provided keys could not be used to form composite attributes");
        }
        return allKeys;
      }
      _fromCursorToCompositeByIndex({ indexName = TableIndex, provided }, options = {}) {
        const keys = this._fromCursorToKeysByIndex({ indexName, provided }, options);
        if (!keys || Object.keys(keys).length === 0) {
          throw new e.ElectroError(e.ErrorCodes.InvalidConversionCursorProvided, "Invalid conversion cursor provided");
        }
        return this._fromKeysToCompositeByIndex({ indexName, provided: keys }, options);
      }
      _trimKeysToIndex({ indexName = TableIndex, provided }) {
        if (!provided) {
          return null;
        }
        const pkName = this.model.translations.keys[indexName].pk;
        const skName = this.model.translations.keys[indexName].sk;
        const tablePKName = this.model.translations.keys[TableIndex].pk;
        const tableSKName = this.model.translations.keys[TableIndex].sk;
        const keys = {
          [pkName]: provided[pkName],
          [skName]: provided[skName],
          [tablePKName]: provided[tablePKName],
          [tableSKName]: provided[tableSKName]
        };
        if (!keys || Object.keys(keys).length === 0) {
          return null;
        }
        return keys;
      }
      _verifyKeys({ indexName, provided }) {
        if (!provided) {
          throw new e.ElectroError(e.ErrorCodes.InvalidConversionKeysProvided, `Provided keys not defined`);
        }
        const pkName = this.model.translations.keys[indexName].pk;
        const skName = this.model.translations.keys[indexName].sk;
        return provided[pkName] !== void 0 && (!skName || provided[skName] !== void 0);
      }
      _formatReturnPager(config, lastEvaluatedKey) {
        let page = lastEvaluatedKey || null;
        if (config.raw || config.pager === Pager.raw) {
          return page;
        }
        return config.formatCursor.serialize(page) || null;
      }
      _formatExclusiveStartKey({ config, indexName = TableIndex }) {
        let exclusiveStartKey = config.cursor;
        if (config.raw || config.pager === Pager.raw) {
          return this._trimKeysToIndex({ provided: exclusiveStartKey, indexName }) || null;
        }
        let keys;
        if (config.pager === Pager.item) {
          keys = this._fromCompositeToKeysByIndex({ indexName, provided: exclusiveStartKey });
        } else {
          keys = config.formatCursor.deserialize(exclusiveStartKey);
        }
        if (!keys) {
          return null;
        }
        return this._trimKeysToIndex({ provided: keys, indexName }) || null;
      }
      setClient(client) {
        if (client) {
          this.client = c.normalizeClient(client);
        }
      }
      setTableName(tableName) {
        this.config.table = tableName;
      }
      getTableName() {
        return this.config.table;
      }
      getTableName() {
        return this.config.table;
      }
      _chain(state, clauses2, clause) {
        let current = {};
        for (let child of clause.children) {
          current[child] = (...args) => {
            state.prev = state.self;
            state.self = child;
            let results = clauses2[child].action(this, state, ...args);
            if (clauses2[child].children.length) {
              return this._chain(results, clauses2, clauses2[child]);
            } else {
              return results;
            }
          };
        }
        return current;
      }
      /* istanbul ignore next */
      _makeChain(index = TableIndex, clauses2, rootClause, options = {}) {
        let state = new ChainState({
          index,
          options,
          attributes: options.attributes || this.model.schema.attributes,
          hasSortKey: options.hasSortKey || this.model.lookup.indexHasSortKeys[index],
          compositeAttributes: options.compositeAttributes || this.model.facets.byIndex[index]
        });
        return state.init(this, clauses2, rootClause);
      }
      _regexpEscape(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      }
      _normalizeConcurrencyValue(value = 1) {
        value = parseInt(value);
        if (isNaN(value) || value < 1) {
          throw new e.ElectroError(e.ErrorCodes.InvalidConcurrencyOption, "Query option 'concurrency' must be of type 'number' and greater than zero.");
        }
        return value;
      }
      _normalizePagesValue(value) {
        if (value === AllPages) {
          return value;
        }
        value = parseInt(value);
        if (isNaN(value) || value < 1) {
          throw new e.ElectroError(e.ErrorCodes.InvalidPagesOption, `Query option 'pages' must be of type 'number' and greater than zero or the string value '${AllPages}'`);
        }
        return value;
      }
      _normalizeLimitValue(value) {
        if (value !== void 0) {
          value = parseInt(value);
          if (isNaN(value) || value < 1) {
            throw new e.ElectroError(e.ErrorCodes.InvalidLimitOption, "Query option 'limit' must be of type 'number' and greater than zero.");
          }
        }
        return value;
      }
      _createKeyDeconstructor(prefixes = {}, labels = [], attributes2 = {}) {
        let { prefix, isCustom, postfix } = prefixes;
        let names = [];
        let types = [];
        let pattern = `^${this._regexpEscape(prefix || "")}`;
        for (let { name, label } of labels) {
          let attr = attributes2[name];
          if (isCustom && !name && label) {
            pattern += `${this._regexpEscape(label)}`;
          } else if (isCustom) {
            pattern += `${this._regexpEscape(label === void 0 ? "" : label)}(.+)`;
          } else {
            pattern += `#${this._regexpEscape(label === void 0 ? name : label)}_(.+)`;
          }
          names.push(name);
          if (attr) {
            types.push(attr.type);
          }
        }
        if (typeof postfix === "string") {
          pattern += this._regexpEscape(postfix);
        }
        pattern += "$";
        let regex = new RegExp(pattern, "i");
        return ({ key } = {}) => {
          if (!["string", "number"].includes(typeof key)) {
            return null;
          }
          key = `${key}`;
          let match = key.match(regex);
          let results = {};
          if (match) {
            for (let i = 0; i < names.length; i++) {
              let key2 = names[i];
              let value = match[i + 1];
              let type = types[i];
              switch (type) {
                case "number": {
                  value = parseFloat(value);
                  break;
                }
                case "boolean": {
                  value = value === "true";
                  break;
                }
              }
              if (key2 && value !== void 0) {
                results[key2] = value;
              }
            }
          } else {
            results = null;
          }
          return results;
        };
      }
      _deconstructIndex({ index = TableIndex, keys = {} } = {}) {
        const hasIndex = !!this.model.translations.keys[index];
        if (!hasIndex) {
          return null;
        }
        let pkName = this.model.translations.keys[index].pk;
        let skName = this.model.translations.keys[index].sk;
        const indexHasSortKey = this.model.lookup.indexHasSortKeys[index];
        const deconstructors = this.model.keys.deconstructors[index];
        const pk = keys[pkName];
        if (pk === void 0) {
          return null;
        }
        const pkComposites = deconstructors.pk({ key: pk });
        if (pkComposites === null) {
          return null;
        }
        let skComposites = {};
        if (indexHasSortKey) {
          const sk = keys[skName];
          if (!sk) {
            return null;
          }
          skComposites = deconstructors.sk({ key: sk });
          if (skComposites === null) {
            return null;
          }
        }
        return {
          ...pkComposites,
          ...skComposites
        };
      }
      _formatKeysToItem(index = TableIndex, keys) {
        if (keys === null || typeof keys !== "object" || Object.keys(keys).length === 0) {
          return keys;
        }
        let tableIndex = TableIndex;
        let indexParts = this._deconstructIndex({ index, keys });
        if (indexParts === null) {
          return null;
        }
        if (index !== tableIndex) {
          const tableIndexParts = this._deconstructIndex({ index: tableIndex, keys });
          if (tableIndexParts === null) {
            return null;
          }
          indexParts = { ...indexParts, ...tableIndexParts };
        }
        let noPartsFound = Object.keys(indexParts).length === 0 && this.model.facets.byIndex[tableIndex].all.length > 0;
        let partsAreIncomplete = this.model.facets.byIndex[tableIndex].all.find((facet) => indexParts[facet.name] === void 0);
        if (noPartsFound || partsAreIncomplete) {
          return null;
        }
        return indexParts;
      }
      _constructPagerIndex(index = TableIndex, item, options = {}) {
        let pkAttributes = options.relaxedPk ? item : this._expectFacets(item, this.model.facets.byIndex[index].pk);
        let skAttributes = options.relaxedSk ? item : this._expectFacets(item, this.model.facets.byIndex[index].sk);
        let keys = this._makeIndexKeys({
          index,
          pkAttributes,
          skAttributes: [skAttributes]
        });
        return this._makeParameterKey(index, keys.pk, ...keys.sk);
      }
      _formatSuppliedPager(index = TableIndex, item, options = {}) {
        if (typeof item !== "object" || Object.keys(item).length === 0) {
          return item;
        }
        let tableIndex = TableIndex;
        let pager = this._constructPagerIndex(index, item, options);
        if (index !== tableIndex) {
          pager = { ...pager, ...this._constructPagerIndex(tableIndex, item, options) };
        }
        return pager;
      }
      _normalizeExecutionOptions({ provided = [], context = {} } = {}) {
        let config = {
          includeKeys: false,
          originalErr: false,
          raw: false,
          params: {},
          page: {},
          lastEvaluatedKeyRaw: false,
          table: void 0,
          concurrent: void 0,
          parse: void 0,
          pager: Pager.named,
          unprocessed: UnprocessedTypes.item,
          response: "default",
          cursor: null,
          data: "attributes",
          ignoreOwnership: false,
          _providedIgnoreOwnership: false,
          _isPagination: false,
          _isCollectionQuery: false,
          pages: 1,
          listeners: [],
          preserveBatchOrder: false,
          attributes: [],
          terminalOperation: void 0,
          formatCursor: u.cursorFormatter,
          order: void 0,
          hydrate: false,
          hydrator: (_entity, _indexName, items) => items,
          _includeOnResponseItem: {}
        };
        return provided.filter(Boolean).reduce((config2, option) => {
          if (typeof option.order === "string") {
            switch (option.order.toLowerCase()) {
              case "asc":
                config2.params[ResultOrderParam] = ResultOrderOption.asc;
                break;
              case "desc":
                config2.params[ResultOrderParam] = ResultOrderOption.desc;
                break;
              default:
                throw new e.ElectroError(e.ErrorCodes.InvalidOptions, `Invalid value for query option "order" provided. Valid options include 'asc' and 'desc, received: "${option.order}"`);
            }
          }
          if (typeof option.response === "string" && option.response.length) {
            const format = ReturnValues[option.response];
            if (format === void 0) {
              throw new e.ElectroError(e.ErrorCodes.InvalidOptions, `Invalid value for query option "format" provided: "${option.format}". Allowed values include ${u.commaSeparatedString(Object.keys(ReturnValues))}.`);
            }
            config2.response = format;
            if (context.operation === MethodTypes.transactWrite) {
              config2.params.ReturnValuesOnConditionCheckFailure = FormatToReturnValues[format];
            } else {
              config2.params.ReturnValues = FormatToReturnValues[format];
            }
          }
          if (option.formatCursor) {
            const isValid = ["serialize", "deserialize"].every(
              (method) => method in option.formatCursor && validations.isFunction(option.formatCursor[method])
            );
            if (isValid) {
              config2.formatCursor = option.formatCursor;
            } else {
              throw new e.ElectroError(e.ErrorCodes.InvalidOptions, `Invalid value for query option "formatCursor" provided. Formatter interface must have serialize and deserialize functions`);
            }
          }
          if (option.terminalOperation in TerminalOperation) {
            config2.terminalOperation = TerminalOperation[option.terminalOperation];
          }
          if (Array.isArray(option.attributes)) {
            config2.attributes = config2.attributes.concat(option.attributes);
          }
          if (option.preserveBatchOrder === true) {
            config2.preserveBatchOrder = true;
          }
          if (option.pages !== void 0) {
            config2.pages = option.pages;
          }
          if (option._isCollectionQuery === true) {
            config2._isCollectionQuery = true;
          }
          if (option.includeKeys === true) {
            config2.includeKeys = true;
          }
          if (option.originalErr === true) {
            config2.originalErr = true;
          }
          if (option.raw === true) {
            config2.raw = true;
          }
          if (option._isPagination) {
            config2._isPagination = true;
          }
          if (option.lastEvaluatedKeyRaw === true) {
            config2.lastEvaluatedKeyRaw = true;
            config2.pager = Pager.raw;
            config2.unprocessed = UnprocessedTypes.raw;
          }
          if (option.cursor) {
            config2.cursor = option.cursor;
          }
          if (option.data) {
            config2.data = option.data;
            switch (option.data) {
              case "raw":
                config2.raw = true;
                break;
              case "includeKeys":
                config2.includeKeys = true;
                break;
            }
          }
          if (option.limit !== void 0) {
            config2.limit = option.limit;
            config2.params.Limit = option.limit;
          }
          if (validations.isStringHasLength(option.table)) {
            config2.params.TableName = option.table;
            config2.table = option.table;
          }
          if (option.concurrent !== void 0) {
            config2.concurrent = option.concurrent;
          }
          if (validations.isFunction(option.parse)) {
            config2.parse = option.parse;
          }
          if (typeof option.pager === "string") {
            if (typeof Pager[option.pager] === "string") {
              config2.pager = option.pager;
            } else {
              throw new e.ElectroError(e.ErrorCodes.InvalidOptions, `Invalid value for option "pager" provided: "${option.pager}". Allowed values include ${u.commaSeparatedString(Object.keys(Pager))}.`);
            }
          }
          if (typeof option.unprocessed === "string") {
            if (typeof UnprocessedTypes[option.unprocessed] === "string") {
              config2.unproessed = UnprocessedTypes[option.unprocessed];
            } else {
              throw new e.ElectroError(e.ErrorCodes.InvalidOptions, `Invalid value for option "unprocessed" provided: "${option.unprocessed}". Allowed values include ${u.commaSeparatedString(Object.keys(UnprocessedTypes))}.`);
            }
          }
          if (option.ignoreOwnership) {
            config2.ignoreOwnership = option.ignoreOwnership;
            config2._providedIgnoreOwnership = option.ignoreOwnership;
          }
          if (option.listeners) {
            if (Array.isArray(option.listeners)) {
              config2.listeners = config2.listeners.concat(option.listeners);
            }
          }
          if (option.logger) {
            if (validations.isFunction(option.logger)) {
              config2.listeners.push(option.logger);
            } else {
              throw new e.ElectroError(e.ErrorCodes.InvalidLoggerProvided, `Loggers must be of type function`);
            }
          }
          if (option.hydrate) {
            config2.hydrate = true;
            config2.ignoreOwnership = true;
          }
          if (validations.isFunction(option.hydrator)) {
            config2.hydrator = option.hydrator;
          }
          if (option._includeOnResponseItem) {
            config2._includeOnResponseItem = {
              ...config2._includeOnResponseItem,
              ...option._includeOnResponseItem
            };
          }
          config2.page = Object.assign({}, config2.page, option.page);
          config2.params = Object.assign({}, config2.params, option.params);
          return config2;
        }, config);
      }
      _applyParameterOptions({ params = {}, options = {} } = {}) {
        let parameters = Object.assign({}, params);
        for (let customParameter of Object.keys(options.params || {})) {
          if (options.params[customParameter] !== void 0) {
            parameters[customParameter] = options.params[customParameter];
          }
        }
        return parameters;
      }
      addListeners(logger2) {
        this.eventManager.add(logger2);
      }
      _addLogger(logger2) {
        if (validations.isFunction(logger2)) {
          this.addListeners(logger2);
        } else {
          throw new e.ElectroError(e.ErrorCodes.InvalidLoggerProvided, `Logger must be of type function`);
        }
      }
      _getPrimaryIndexFieldNames() {
        let hasSortKey = this.model.lookup.indexHasSortKeys[TableIndex];
        let accessPattern = this.model.translations.indexes.fromIndexToAccessPattern[TableIndex];
        let pkField = this.model.indexes[accessPattern].pk.field;
        let skField;
        if (hasSortKey) {
          skField = this.model.indexes[accessPattern].sk.field;
        }
        return {
          pk: pkField,
          sk: skField
        };
      }
      _applyParameterExpressionTypes(params, filter) {
        const conditions = filter[ExpressionTypes.ConditionExpression];
        if (conditions.build().length > 0) {
          if (typeof params[ExpressionTypes.ConditionExpression] === "string" && params[ExpressionTypes.ConditionExpression].length > 0) {
            params[ExpressionTypes.ConditionExpression] = `${params[ExpressionTypes.ConditionExpression]} AND ${conditions.build()}`;
          } else {
            params[ExpressionTypes.ConditionExpression] = conditions.build();
          }
          if (Object.keys(conditions.getNames()).length > 0) {
            params.ExpressionAttributeNames = params.ExpressionAttributeNames || {};
            params.ExpressionAttributeNames = Object.assign({}, conditions.getNames(), params.ExpressionAttributeNames);
          }
          if (Object.keys(conditions.getValues()).length > 0) {
            params.ExpressionAttributeValues = params.ExpressionAttributeValues || {};
            params.ExpressionAttributeValues = Object.assign({}, conditions.getValues(), params.ExpressionAttributeValues);
          }
        }
        return params;
      }
      /* istanbul ignore next */
      _params(state, config = {}) {
        const { keys = {}, method = "", put = {}, update = {}, filter = {}, upsert, updateProxy } = state.query;
        let consolidatedQueryFacets = this._consolidateQueryFacets(keys.sk);
        let params = {};
        switch (method) {
          case MethodTypes.check:
          case MethodTypes.get:
          case MethodTypes.delete:
          case MethodTypes.remove:
            params = this._makeSimpleIndexParams(keys.pk, ...consolidatedQueryFacets);
            break;
          case MethodTypes.upsert:
            params = this._makeUpsertParams({ update, upsert, updateProxy }, keys.pk, ...keys.sk);
            break;
          case MethodTypes.put:
          case MethodTypes.create:
            params = this._makePutParams(put, keys.pk, ...keys.sk);
            break;
          case MethodTypes.update:
          case MethodTypes.patch:
            params = this._makeUpdateParams(
              update,
              keys.pk,
              ...consolidatedQueryFacets
            );
            break;
          case MethodTypes.scan:
            params = this._makeScanParam(filter[ExpressionTypes.FilterExpression]);
            break;
          default:
            throw new Error(`Invalid method: ${method}`);
        }
        let appliedParameters = this._applyParameterOptions({
          params,
          options: config
        });
        return this._applyParameterExpressions(method, appliedParameters, config, filter);
      }
      _applyParameterExpressions(method, parameters, config, filter) {
        if (method !== MethodTypes.get) {
          return this._applyParameterExpressionTypes(parameters, filter);
        } else {
          parameters = this._applyProjectionExpressions({ parameters, config });
          return this._applyParameterExpressionTypes(parameters, filter);
        }
      }
      _applyProjectionExpressions({ parameters = {}, config = {} } = {}) {
        const attributes2 = config.attributes || [];
        if (attributes2.length === 0) {
          return parameters;
        }
        const requiresRawResponse = !!config.raw;
        const enforcesOwnership = !config.ignoreOwnership;
        const requiresUserInvolvedPagination = TerminalOperation[config.terminalOperation] === TerminalOperation.page;
        const isServerBound = TerminalOperation[config.terminalOperation] === TerminalOperation.go || TerminalOperation[config.terminalOperation] === TerminalOperation.page;
        const unknownAttributes = [];
        let attributeFields = /* @__PURE__ */ new Set();
        for (const attributeName of attributes2) {
          const fieldName = this.model.schema.getFieldName(attributeName);
          if (typeof fieldName !== "string") {
            unknownAttributes.push(attributeName);
          } else {
            attributeFields.add(fieldName);
          }
        }
        if (attributeFields.size === 0 || unknownAttributes.length > 0) {
          let message = "Unknown attributes provided in query options";
          if (unknownAttributes.length) {
            message += `: ${u.commaSeparatedString(unknownAttributes)}`;
          }
          throw new e.ElectroError(e.ErrorCodes.InvalidOptions, message);
        }
        parameters.ExpressionAttributeNames = parameters.ExpressionAttributeNames || {};
        if (
          // The response you're returning:
          // 1. is not expected to be raw
          !requiresRawResponse && isServerBound && enforcesOwnership
        ) {
          attributeFields.add(this.identifiers.entity);
          attributeFields.add(this.identifiers.version);
          if (requiresUserInvolvedPagination && config.pager !== Pager.raw) {
            let tableIndexFacets = this.model.facets.byIndex[TableIndex];
            let indexFacets = this.model.facets.byIndex[parameters.IndexName] || { all: [] };
            for (const attribute of [...tableIndexFacets.all, ...indexFacets.all]) {
              const fieldName = this.model.schema.getFieldName(attribute.name);
              attributeFields.add(fieldName);
            }
          }
        }
        for (const attributeField of attributeFields) {
          parameters.ExpressionAttributeNames["#" + attributeField] = attributeField;
        }
        if (typeof parameters.ProjectionExpression === "string") {
          parameters.ProjectionExpression = [parameters.ProjectionExpression, ...Object.keys([parameters.ExpressionAttributeNames])].join(", ");
        } else {
          parameters.ProjectionExpression = Object.keys(parameters.ExpressionAttributeNames).join(", ");
        }
        return parameters;
      }
      _batchGetParams(state, config = {}) {
        let table = config.table || this.getTableName();
        let userDefinedParams = config.params || {};
        delete userDefinedParams.TableName;
        let records = [];
        for (let itemState of state.subStates) {
          let method = itemState.query.method;
          let params = this._params(itemState, config);
          if (method === MethodTypes.get) {
            let { Key } = params;
            records.push(Key);
          }
        }
        let batches = u.batchItems(records, MaxBatchItems.batchGet);
        return batches.map((batch) => {
          return {
            RequestItems: {
              [table]: {
                ...userDefinedParams,
                Keys: batch
              }
            }
          };
        });
      }
      _batchWriteParams(state, config = {}) {
        let table = config.table || this.getTableName();
        let records = [];
        for (let itemState of state.subStates) {
          let method = itemState.query.method;
          let params = this._params(itemState, config);
          switch (method) {
            case MethodTypes.put:
              let { Item } = params;
              records.push({ PutRequest: { Item } });
              break;
            case MethodTypes.delete:
              let { Key } = params;
              records.push({ DeleteRequest: { Key } });
              break;
            default:
              throw new Error("Invalid method type");
          }
        }
        let batches = u.batchItems(records, MaxBatchItems.batchWrite);
        return batches.map((batch) => {
          return {
            RequestItems: {
              [table]: batch
            }
          };
        });
      }
      _makeParameterKey(index, pk, sk) {
        let hasSortKey = this.model.lookup.indexHasSortKeys[index];
        let accessPattern = this.model.translations.indexes.fromIndexToAccessPattern[index];
        let pkField = this.model.indexes[accessPattern].pk.field;
        let key = {
          [pkField]: pk
        };
        if (hasSortKey && sk !== void 0) {
          let skField = this.model.indexes[accessPattern].sk.field;
          key[skField] = sk;
        }
        return key;
      }
      getIdentifierExpressions(alias = this.getName()) {
        let name = this.getName();
        let version2 = this.getVersion();
        return {
          names: {
            [`#${this.identifiers.entity}`]: this.identifiers.entity,
            [`#${this.identifiers.version}`]: this.identifiers.version
          },
          values: {
            [`:${this.identifiers.entity}_${alias}`]: name,
            [`:${this.identifiers.version}_${alias}`]: version2
          },
          expression: `(#${this.identifiers.entity} = :${this.identifiers.entity}_${alias} AND #${this.identifiers.version} = :${this.identifiers.version}_${alias})`
        };
      }
      /* istanbul ignore next */
      _makeScanParam(filter = {}) {
        let indexBase = TableIndex;
        let hasSortKey = this.model.lookup.indexHasSortKeys[indexBase];
        let accessPattern = this.model.translations.indexes.fromIndexToAccessPattern[indexBase];
        let pkField = this.model.indexes[accessPattern].pk.field;
        let { pk, sk } = this._makeIndexKeys({
          index: indexBase
        });
        let keys = this._makeParameterKey(indexBase, pk, ...sk);
        let keyExpressions = this._expressionAttributeBuilder(keys);
        let params = {
          TableName: this.getTableName(),
          ExpressionAttributeNames: this._mergeExpressionsAttributes(
            filter.getNames(),
            keyExpressions.ExpressionAttributeNames
          ),
          ExpressionAttributeValues: this._mergeExpressionsAttributes(
            filter.getValues(),
            keyExpressions.ExpressionAttributeValues
          ),
          FilterExpression: `begins_with(#${pkField}, :${pkField})`
        };
        if (hasSortKey) {
          let skField = this.model.indexes[accessPattern].sk.field;
          params.FilterExpression = `${params.FilterExpression} AND begins_with(#${skField}, :${skField})`;
        }
        if (filter.build()) {
          params.FilterExpression = `${params.FilterExpression} AND ${filter.build()}`;
        }
        return params;
      }
      _makeSimpleIndexParams(partition, sort) {
        let index = TableIndex;
        let keys = this._makeIndexKeys({
          index,
          pkAttributes: partition,
          skAttributes: [sort]
        });
        let Key = this._makeParameterKey(index, keys.pk, ...keys.sk);
        let TableName = this.getTableName();
        return { Key, TableName };
      }
      _removeAttributes(item, keys) {
        let copy = { ...item };
        for (let key of Object.keys(keys)) {
          delete copy[key];
        }
        return copy;
      }
      _makeUpdateParams(update = {}, pk = {}, sk = {}) {
        let primaryIndexAttributes = { ...pk, ...sk };
        let modifiedAttributeValues = {};
        let modifiedAttributeNames = {};
        for (const path of Object.keys(update.paths)) {
          const { value, name } = update.paths[path];
          modifiedAttributeValues[path] = value;
          modifiedAttributeNames[path] = name;
        }
        const removed = {};
        for (const name in update.impacted) {
          if (update.impacted[name] === ItemOperations.remove) {
            removed[name] = name;
          }
        }
        modifiedAttributeValues = this._removeAttributes(modifiedAttributeValues, { ...pk, ...sk, ...this.model.schema.getReadOnly() });
        const preparedUpdateValues = this.model.schema.applyAttributeSetters(modifiedAttributeValues);
        const attributesAndComposites = {
          ...update.composites,
          ...preparedUpdateValues
        };
        const { indexKey, updatedKeys, deletedKeys = [] } = this._getUpdatedKeys(pk, sk, attributesAndComposites, removed);
        const accessPattern = this.model.translations.indexes.fromIndexToAccessPattern[TableIndex];
        for (const path of Object.keys(preparedUpdateValues)) {
          if (modifiedAttributeNames[path] !== void 0 && preparedUpdateValues[path] !== void 0) {
            update.updateValue(modifiedAttributeNames[path], preparedUpdateValues[path]);
          } else if (preparedUpdateValues[path] !== void 0) {
            const attr = this.model.schema.getAttribute(path);
            if (attr) {
              update.set(attr.field, preparedUpdateValues[path]);
            } else {
              update.set(path, preparedUpdateValues[path]);
            }
          }
        }
        for (const indexKey2 of Object.keys(updatedKeys)) {
          const isNotTablePK = indexKey2 !== this.model.indexes[accessPattern].pk.field;
          const isNotTableSK = indexKey2 !== this.model.indexes[accessPattern].sk.field;
          const wasNotAlreadyModified = modifiedAttributeNames[indexKey2] === void 0;
          if (isNotTablePK && isNotTableSK && wasNotAlreadyModified) {
            update.set(indexKey2, updatedKeys[indexKey2]);
          }
        }
        for (const indexKey2 of deletedKeys) {
          const isNotTablePK = indexKey2 !== this.model.indexes[accessPattern].pk.field;
          const isNotTableSK = indexKey2 !== this.model.indexes[accessPattern].sk.field;
          const wasNotAlreadyModified = modifiedAttributeNames[indexKey2] === void 0;
          if (isNotTablePK && isNotTableSK && wasNotAlreadyModified) {
            update.remove(indexKey2);
          }
        }
        for (const primaryIndexAttribute of Object.keys(primaryIndexAttributes)) {
          const attribute = this.model.schema.attributes[primaryIndexAttribute];
          const isNotTablePK = !!(attribute && attribute.field !== this.model.indexes[accessPattern].pk.field);
          const isNotTableSK = !!(attribute && attribute.field !== this.model.indexes[accessPattern].sk.field);
          const wasNotAlreadyModified = modifiedAttributeNames[primaryIndexAttribute] === void 0;
          if (isNotTablePK && isNotTableSK && wasNotAlreadyModified) {
            update.set(primaryIndexAttribute, primaryIndexAttributes[primaryIndexAttribute]);
          }
        }
        update.set(this.identifiers.entity, this.getName());
        update.set(this.identifiers.version, this.getVersion());
        return {
          UpdateExpression: update.build(),
          ExpressionAttributeNames: update.getNames(),
          ExpressionAttributeValues: update.getValues(),
          TableName: this.getTableName(),
          Key: indexKey
        };
      }
      /* istanbul ignore next */
      _makePutParams({ data } = {}, pk, sk) {
        let appliedData = this.model.schema.applyAttributeSetters(data);
        let { updatedKeys, setAttributes } = this._getPutKeys(pk, sk && sk.facets, appliedData);
        let translatedFields = this.model.schema.translateToFields(setAttributes);
        return {
          Item: {
            ...translatedFields,
            ...updatedKeys,
            [this.identifiers.entity]: this.getName(),
            [this.identifiers.version]: this.getVersion()
          },
          TableName: this.getTableName()
        };
      }
      _maybeApplyUpsertUpdate({ fields = [], operation, updateProxy, update }) {
        for (let [field, value] of fields) {
          const name = this.model.schema.translationForRetrieval[field];
          if (name) {
            const attribute = this.model.schema.attributes[name];
            if (this.model.schema.readOnlyAttributes.has(name) && (!attribute || !attribute.indexes || attribute.indexes.length === 0)) {
              update.set(field, value, ItemOperations.ifNotExists);
            } else {
              updateProxy.performOperation({
                value,
                operation,
                path: name,
                force: true
              });
            }
          } else {
            update.set(field, value, operation);
          }
        }
      }
      _makeUpsertParams({ update, upsert } = {}) {
        return {
          TableName: this.getTableName(),
          UpdateExpression: update.build(),
          ExpressionAttributeNames: update.getNames(),
          ExpressionAttributeValues: update.getValues(),
          Key: upsert.indexKey
        };
      }
      _updateExpressionBuilder(data) {
        let accessPattern = this.model.translations.indexes.fromIndexToAccessPattern[TableIndex];
        let skip = [
          // Removing readOnly from here because this should have been validated earlier in the process. Not checking
          // readOnly here also allows `watch` properties to circumnavigate the readOnly check for attributes that
          // should be calculated but not updatable by the user.
          // ...this.model.schema.getReadOnly(),
          // ...this.model.facets.fields,
          this.model.indexes[accessPattern].pk.field,
          this.model.indexes[accessPattern].sk.field
        ];
        return this._expressionAttributeBuilder(data, ItemOperations.set, { skip });
      }
      _queryKeyExpressionAttributeBuilder(index, pk, ...sks) {
        let translate = { ...this.model.translations.keys[index] };
        let restrict = ["pk"];
        let keys = { pk };
        sks = sks.filter((sk) => sk !== void 0);
        for (let i = 0; i < sks.length; i++) {
          let id = `sk${i + 1}`;
          keys[id] = sks[i];
          restrict.push(id);
          translate[id] = translate["sk"];
        }
        let keyExpressions = this._expressionAttributeBuilder(keys, ItemOperations.set, {
          translate,
          restrict
        });
        return {
          ExpressionAttributeNames: Object.assign({}, keyExpressions.ExpressionAttributeNames),
          ExpressionAttributeValues: Object.assign({}, keyExpressions.ExpressionAttributeValues)
        };
      }
      /* istanbul ignore next */
      _expressionAttributeBuilder(item = {}, operation = "", options = {}) {
        let {
          require: require2 = [],
          reject = [],
          restrict = [],
          skip = [],
          translate = {}
        } = options;
        let expressions = {
          UpdateExpression: [],
          ExpressionAttributeNames: {},
          ExpressionAttributeValues: {}
        };
        if (require2.length) {
          let props = Object.keys(item);
          let missing = require2.filter((prop) => !props.includes(prop));
          if (!missing) {
            throw new e.ElectroError(e.ErrorCodes.MissingAttribute, `Item is missing attributes: ${u.commaSeparatedString(missing)}`);
          }
        }
        for (let prop in item) {
          if (reject.includes(prop)) {
            throw new Error(`Invalid attribute ${prop}`);
          }
          if (restrict.length && !restrict.includes(prop)) {
            throw new Error(`${prop} is not a valid attribute: ${u.commaSeparatedString(restrict)}`);
          }
          if (prop === void 0 || skip.includes(prop)) {
            continue;
          }
          let name = prop;
          let value = item[prop];
          let nameProp = `#${prop}`;
          let valProp = `:${prop}`;
          if (translate[prop]) {
            name = translate[prop];
          }
          expressions.UpdateExpression.push(`${nameProp} = ${valProp}`);
          expressions.ExpressionAttributeNames[nameProp] = name;
          expressions.ExpressionAttributeValues[valProp] = value;
        }
        expressions.UpdateExpression = `${operation.toUpperCase()} ${expressions.UpdateExpression.join(
          ", "
        )}`;
        return expressions;
      }
      _makeQueryKeys(state) {
        let consolidatedQueryFacets = this._consolidateQueryFacets(
          state.query.keys.sk
        );
        switch (state.query.type) {
          case QueryTypes.is:
            return this._makeIndexKeys({
              index: state.query.index,
              pkAttributes: state.query.keys.pk,
              skAttributes: consolidatedQueryFacets,
              indexType: state.query.options.indexType,
              queryType: state.query.type,
              isCollection: state.query.options._isCollectionQuery
            });
          default:
            return this._makeIndexKeysWithoutTail(state, consolidatedQueryFacets);
        }
      }
      /* istanbul ignore next */
      _queryParams(state = {}, options = {}) {
        const indexKeys = this._makeQueryKeys(state);
        let parameters = {};
        switch (state.query.type) {
          case QueryTypes.is:
            parameters = this._makeIsQueryParams(
              state.query,
              state.query.index,
              state.query.filter[ExpressionTypes.FilterExpression],
              indexKeys.pk,
              ...indexKeys.sk
            );
            break;
          case QueryTypes.begins:
            parameters = this._makeBeginsWithQueryParams(
              state.query.options,
              state.query.index,
              state.query.filter[ExpressionTypes.FilterExpression],
              indexKeys.pk,
              ...indexKeys.sk
            );
            break;
          case QueryTypes.collection:
            parameters = this._makeBeginsWithQueryParams(
              state.query.options,
              state.query.index,
              state.query.filter[ExpressionTypes.FilterExpression],
              indexKeys.pk,
              this._getCollectionSk(state.query.collection)
            );
            break;
          case QueryTypes.clustered_collection:
            parameters = this._makeBeginsWithQueryParams(
              state.query.options,
              state.query.index,
              state.query.filter[ExpressionTypes.FilterExpression],
              indexKeys.pk,
              ...indexKeys.sk
            );
            break;
          case QueryTypes.between:
            parameters = this._makeBetweenQueryParams(
              state.query.index,
              state.query.filter[ExpressionTypes.FilterExpression],
              indexKeys.pk,
              ...indexKeys.sk
            );
            break;
          case QueryTypes.gte:
          case QueryTypes.gt:
          case QueryTypes.lte:
          case QueryTypes.lt:
            parameters = this._makeComparisonQueryParams(
              state.query.index,
              state.query.type,
              state.query.filter[ExpressionTypes.FilterExpression],
              indexKeys
            );
            break;
          default:
            throw new Error(`Invalid query type: ${state.query.type}`);
        }
        const appliedParameters = this._applyParameterOptions({
          params: parameters,
          options
        });
        return this._applyProjectionExpressions({
          parameters: appliedParameters,
          config: options
        });
      }
      _makeBetweenQueryParams(index, filter, pk, ...sk) {
        let keyExpressions = this._queryKeyExpressionAttributeBuilder(
          index,
          pk,
          ...sk
        );
        delete keyExpressions.ExpressionAttributeNames["#sk2"];
        let params = {
          TableName: this.getTableName(),
          ExpressionAttributeNames: this._mergeExpressionsAttributes(
            filter.getNames(),
            keyExpressions.ExpressionAttributeNames
          ),
          ExpressionAttributeValues: this._mergeExpressionsAttributes(
            filter.getValues(),
            keyExpressions.ExpressionAttributeValues
          ),
          KeyConditionExpression: `#pk = :pk and #sk1 BETWEEN :sk1 AND :sk2`
        };
        if (index) {
          params["IndexName"] = index;
        }
        if (filter.build()) {
          params.FilterExpression = filter.build();
        }
        return params;
      }
      _makeInclusiveQueryParams(options, index, filter, pk, sk, type) {
        let keyExpressions = this._queryKeyExpressionAttributeBuilder(index, pk, sk);
        let KeyConditionExpression = "#pk = :pk";
        if (this.model.lookup.indexHasSortKeys[index] && typeof keyExpressions.ExpressionAttributeValues[":sk1"] === "string" && keyExpressions.ExpressionAttributeValues[":sk1"].length > 0) {
          if (type === QueryTypes.is) {
            KeyConditionExpression = `${KeyConditionExpression} and #sk1 = :sk1`;
          } else {
            KeyConditionExpression = `${KeyConditionExpression} and begins_with(#sk1, :sk1)`;
          }
        } else {
          delete keyExpressions.ExpressionAttributeNames["#sk1"];
          delete keyExpressions.ExpressionAttributeValues[":sk1"];
        }
        let customExpressions = {
          names: options.expressions && options.expressions.names || {},
          values: options.expressions && options.expressions.values || {},
          expression: options.expressions && options.expressions.expression || ""
        };
        let params = {
          KeyConditionExpression,
          TableName: this.getTableName(),
          ExpressionAttributeNames: this._mergeExpressionsAttributes(filter.getNames(), keyExpressions.ExpressionAttributeNames, customExpressions.names),
          ExpressionAttributeValues: this._mergeExpressionsAttributes(filter.getValues(), keyExpressions.ExpressionAttributeValues, customExpressions.values)
        };
        if (index) {
          params["IndexName"] = index;
        }
        let expressions = [customExpressions.expression, filter.build()].filter(Boolean).join(" AND ");
        if (expressions.length) {
          params.FilterExpression = expressions;
        }
        return params;
      }
      _makeIsQueryParams(query, index, filter, pk, sk) {
        const { options, keys } = query;
        const providedSks = keys.provided.filter((item) => item.type === KeyTypes.sk).map((item) => item.attribute);
        const skDefinition = this.model.facets.byIndex[index] && this.model.facets.byIndex[index].sk && Array.isArray(this.model.facets.byIndex[index].sk) && this.model.facets.byIndex[index].sk || [];
        const skCompositeAttributes = new Set(skDefinition);
        const skIsCompletelyFulfilled = skCompositeAttributes.size === providedSks.length && skDefinition.every((attr) => providedSks.includes(attr));
        if (skIsCompletelyFulfilled) {
          return this._makeInclusiveQueryParams(options, index, filter, pk, sk, QueryTypes.is);
        } else {
          return this._makeBeginsWithQueryParams(options, index, filter, pk, sk);
        }
      }
      _makeBeginsWithQueryParams(options, index, filter, pk, sk) {
        return this._makeInclusiveQueryParams(options, index, filter, pk, sk, QueryTypes.begins);
      }
      _mergeExpressionsAttributes(...expressionAttributes) {
        let merged = {};
        for (let obj of expressionAttributes) {
          if (obj) {
            merged = { ...merged, ...obj };
          }
        }
        return merged;
      }
      /* istanbul ignore next */
      _makeComparisonQueryParams(index = TableIndex, comparison = "", filter = {}, indexKeys = {}) {
        const { pk, fulfilled } = indexKeys;
        const sk = indexKeys.sk[0];
        let operator = PartialComparisons[comparison];
        if (!operator) {
          throw new Error(`Unexpected comparison operator "${comparison}", expected ${u.commaSeparatedString(Object.values(Comparisons))}`);
        }
        let keyExpressions = this._queryKeyExpressionAttributeBuilder(
          index,
          pk,
          sk
        );
        let params = {
          TableName: this.getTableName(),
          ExpressionAttributeNames: this._mergeExpressionsAttributes(
            filter.getNames(),
            keyExpressions.ExpressionAttributeNames
          ),
          ExpressionAttributeValues: this._mergeExpressionsAttributes(
            filter.getValues(),
            keyExpressions.ExpressionAttributeValues
          ),
          KeyConditionExpression: `#pk = :pk and #sk1 ${operator} :sk1`
        };
        if (index) {
          params["IndexName"] = index;
        }
        if (filter.build()) {
          params.FilterExpression = filter.build();
        }
        return params;
      }
      _expectIndexFacets(attributes2, facets) {
        let [isIncomplete, { incomplete, complete }] = this._getIndexImpact(
          attributes2,
          facets
        );
        if (isIncomplete) {
          let incompleteAccessPatterns = incomplete.map(({ index }) => this.model.translations.indexes.fromIndexToAccessPattern[index]);
          let missingFacets = incomplete.reduce((result, { missing }) => [...result, ...missing], []);
          throw new e.ElectroError(
            e.ErrorCodes.IncompleteCompositeAttributes,
            `Incomplete composite attributes: Without the composite attributes ${u.commaSeparatedString(missingFacets)} the following access patterns cannot be updated: ${u.commaSeparatedString(incompleteAccessPatterns.filter((val2) => val2 !== void 0))}. If a composite attribute is readOnly and cannot be set, use the 'composite' chain method on update to supply the value for key formatting purposes.`
          );
        }
        return complete;
      }
      _makeKeysFromAttributes(indexes, attributes2) {
        let indexKeys = {};
        for (let [index, keyTypes] of Object.entries(indexes)) {
          let keys = this._makeIndexKeys({
            index,
            pkAttributes: attributes2,
            skAttributes: [attributes2]
          });
          if (keyTypes.pk || keyTypes.sk) {
            indexKeys[index] = {};
          }
          if (keyTypes.pk && keys.pk) {
            indexKeys[index].pk = keys.pk;
          }
          if (keyTypes.sk && keys.sk) {
            indexKeys[index].sk = keys.sk;
          } else {
            indexKeys[index].sk = [];
          }
        }
        return indexKeys;
      }
      _makePutKeysFromAttributes(indexes, attributes2) {
        let indexKeys = {};
        for (let index of indexes) {
          indexKeys[index] = this._makeIndexKeys({
            index,
            pkAttributes: attributes2,
            skAttributes: [attributes2]
          });
        }
        return indexKeys;
      }
      _getPutKeys(pk, sk, set, validationAssistance) {
        let setAttributes = set;
        let updateIndex = TableIndex;
        let keyTranslations = this.model.translations.keys;
        let keyAttributes = { ...sk, ...pk };
        let completeFacets = this._expectIndexFacets(
          { ...setAttributes, ...validationAssistance },
          { ...keyAttributes }
        );
        if (!completeFacets.indexes.includes(updateIndex)) {
          completeFacets.indexes.push(updateIndex);
        }
        let composedKeys = this._makePutKeysFromAttributes(completeFacets.indexes, { ...keyAttributes, ...setAttributes });
        let updatedKeys = {};
        let indexKey = {};
        for (let [index, keys] of Object.entries(composedKeys)) {
          let { pk: pk2, sk: sk2 } = keyTranslations[index];
          if (index === updateIndex) {
            indexKey[pk2] = keys.pk;
            if (sk2) {
              indexKey[sk2] = keys.sk[0];
            }
          }
          if (keys.pk !== void 0 && keys.pk !== "") {
            updatedKeys[pk2] = keys.pk;
          }
          if (sk2 && keys.sk[0] !== void 0 && keys.sk[0] !== "") {
            updatedKeys[sk2] = keys.sk[0];
          }
        }
        return { indexKey, updatedKeys, setAttributes };
      }
      _getUpdatedKeys(pk, sk, set, removed) {
        let updateIndex = TableIndex;
        let keyTranslations = this.model.translations.keys;
        let keyAttributes = { ...sk, ...pk };
        let completeFacets = this._expectIndexFacets(
          { ...set },
          { ...keyAttributes }
        );
        const removedKeyImpact = this._expectIndexFacets(
          { ...removed },
          { ...keyAttributes }
        );
        if (completeFacets.impactedIndexTypes[updateIndex] === void 0) {
          completeFacets.impactedIndexTypes[updateIndex] = {
            pk: "pk",
            sk: "sk"
          };
        }
        let composedKeys = this._makeKeysFromAttributes(completeFacets.impactedIndexTypes, { ...set, ...keyAttributes });
        let updatedKeys = {};
        let deletedKeys = [];
        let indexKey = {};
        for (const keys of Object.values(removedKeyImpact.impactedIndexTypes)) {
          deletedKeys = deletedKeys.concat(Object.values(keys));
        }
        for (let [index, keys] of Object.entries(composedKeys)) {
          let { pk: pk2, sk: sk2 } = keyTranslations[index];
          if (index === updateIndex) {
            indexKey[pk2] = keys.pk;
            if (sk2) {
              indexKey[sk2] = keys.sk[0];
            }
          } else {
            let noImpactSk = Array.isArray(keys.sk) && keys.sk.length === 0;
            let indexHasSk = this.model.lookup.indexHasSortKeys[index];
            let noAttributeSk = indexHasSk && this.model.facets.byIndex[index].sk.length === 0;
            let hasPrefix = indexHasSk && this.model.prefixes[index].sk.prefix !== void 0;
            if (noImpactSk && noAttributeSk && hasPrefix) {
              keys.sk.push(this.model.prefixes[index].sk.prefix);
            }
          }
          if (keys.pk) {
            updatedKeys[pk2] = keys.pk;
          }
          if (sk2 && keys.sk[0]) {
            updatedKeys[sk2] = keys.sk[0];
          }
        }
        return { indexKey, updatedKeys, deletedKeys };
      }
      /* istanbul ignore next */
      _getIndexImpact(attributes2 = {}, included = {}) {
        let includedFacets = Object.keys(included);
        let impactedIndexes = {};
        let impactedIndexTypes = {};
        let completedIndexes = [];
        let facets = {};
        for (let [attribute, indexes] of Object.entries(this.model.facets.byAttr)) {
          if (attributes2[attribute] !== void 0) {
            facets[attribute] = attributes2[attribute];
            indexes.forEach(({ index, type }) => {
              impactedIndexes[index] = impactedIndexes[index] || {};
              impactedIndexes[index][type] = impactedIndexes[index][type] || [];
              impactedIndexes[index][type].push(attribute);
              impactedIndexTypes[index] = impactedIndexTypes[index] || {};
              impactedIndexTypes[index][type] = this.model.translations.keys[index][type];
            });
          }
        }
        let incomplete = Object.entries(this.model.facets.byIndex).map(([index, { pk, sk }]) => {
          let impacted = impactedIndexes[index];
          let impact = { index, missing: [] };
          if (impacted) {
            let missingPk = impacted[KeyTypes.pk] && impacted[KeyTypes.pk].length !== pk.length;
            let missingSk = impacted[KeyTypes.sk] && impacted[KeyTypes.sk].length !== sk.length;
            if (missingPk) {
              impact.missing = [
                ...impact.missing,
                ...pk.filter((attr) => {
                  return !impacted[KeyTypes.pk].includes(attr) && !includedFacets.includes(attr);
                })
              ];
            }
            if (missingSk) {
              impact.missing = [
                ...impact.missing,
                ...sk.filter(
                  (attr) => !impacted[KeyTypes.sk].includes(attr) && !includedFacets.includes(attr)
                )
              ];
            }
            if (!missingPk && !missingSk) {
              completedIndexes.push(index);
            }
          }
          return impact;
        }).filter(({ missing }) => missing.length);
        let isIncomplete = !!incomplete.length;
        let complete = { facets, indexes: completedIndexes, impactedIndexTypes };
        return [isIncomplete, { incomplete, complete }];
      }
      _consolidateQueryFacets(queryFacets) {
        let sk1 = {};
        let sk2 = {};
        for (let { type, facets } of queryFacets) {
          if (type === QueryTypes.between) {
            sk1 = { ...sk1, ...facets };
          } else if (type === QueryTypes.and) {
            sk2 = { ...sk2, ...facets };
          } else {
            sk1 = { ...sk1, ...facets };
            sk2 = { ...sk2, ...facets };
          }
        }
        return [sk1, sk2];
      }
      _buildQueryFacets(facets, skFacets) {
        let queryFacets = this._findProperties(facets, skFacets).reduce(
          (result, [name, value]) => {
            if (value !== void 0) {
              result[name] = value;
            }
            return result;
          },
          {}
        );
        return { ...queryFacets };
      }
      /* istanbul ignore next */
      _expectFacets(obj = {}, properties = [], type = "key composite attributes") {
        let [incompletePk, missing, matching] = this._expectProperties(obj, properties);
        if (incompletePk) {
          throw new e.ElectroError(e.ErrorCodes.IncompleteCompositeAttributes, `Incomplete or invalid ${type} supplied. Missing properties: ${u.commaSeparatedString(missing)}`);
        } else {
          return matching;
        }
      }
      _findProperties(obj, properties) {
        return properties.map((name) => [name, obj[name]]);
      }
      _expectProperties(obj, properties) {
        let missing = [];
        let matching = {};
        this._findProperties(obj, properties).forEach(([name, value]) => {
          if (value === void 0) {
            missing.push(name);
          } else {
            matching[name] = value;
          }
        });
        return [!!missing.length, missing, matching];
      }
      _makeKeyFixings({
        service,
        entity,
        version: version2 = "1",
        tableIndex,
        modelVersion,
        isClustered,
        schema
      }) {
        let keys = {
          pk: {
            prefix: "",
            field: tableIndex.pk.field,
            casing: tableIndex.pk.casing,
            isCustom: tableIndex.customFacets.pk,
            cast: tableIndex.pk.cast
          },
          sk: {
            prefix: "",
            casing: tableIndex.sk.casing,
            isCustom: tableIndex.customFacets.sk,
            field: tableIndex.sk ? tableIndex.sk.field : void 0,
            cast: tableIndex.sk ? tableIndex.sk.cast : void 0
          }
        };
        let pk = `$${service}`;
        let sk = "";
        let entityKeys = "";
        let postfix = "";
        let collectionPrefix = this._makeCollectionPrefix(tableIndex.collection);
        if (validations.isStringHasLength(collectionPrefix)) {
          sk = `${collectionPrefix}`;
          entityKeys += `#${entity}`;
        } else {
          entityKeys += `$${entity}`;
        }
        if (modelVersion === ModelVersions.beta) {
          pk = `${pk}_${version2}`;
        } else {
          entityKeys = `${entityKeys}_${version2}`;
        }
        if (isClustered) {
          postfix = entityKeys;
        } else {
          sk = `${sk}${entityKeys}`;
        }
        if (Object.keys(tableIndex.sk).length === 0) {
          pk += sk;
          if (isClustered) {
            pk += postfix;
          }
        }
        if (!keys.pk.isCustom) {
          keys.pk.prefix = u.formatKeyCasing(pk, tableIndex.pk.casing);
        }
        if (!keys.sk.isCustom) {
          keys.sk.prefix = u.formatKeyCasing(sk, tableIndex.sk.casing);
          keys.sk.postfix = u.formatKeyCasing(postfix, tableIndex.sk.casing);
        }
        const castKeys = tableIndex.hasSk ? [tableIndex.pk, tableIndex.sk] : [tableIndex.pk];
        for (const castKey of castKeys) {
          if (castKey.cast === CastKeyOptions.string) {
            keys[castKey.type].cast = CastKeyOptions.string;
          } else if (
            // custom keys with only one facet and no labels are numeric by default
            castKey.cast === void 0 && castKey.isCustom && castKey.facets.length === 1 && castKey.facetLabels.every(({ label }) => !label) && schema.attributes[castKey.facets[0]] && schema.attributes[castKey.facets[0]].type === "number"
          ) {
            keys[castKey.type].cast = CastKeyOptions.number;
          } else if (castKey.cast === CastKeyOptions.number && castKey.facets.length === 1 && schema.attributes[castKey.facets[0]] && ["number", "string", "boolean"].includes(schema.attributes[castKey.facets[0]].type)) {
            keys[castKey.type].cast = CastKeyOptions.number;
          } else if (castKey.cast === CastKeyOptions.number && castKey.facets.length > 1) {
            throw new e.ElectroError(e.ErrorCodes.InvalidModel, `Invalid "cast" option provided for ${castKey.type} definition on index "${u.formatIndexNameForDisplay(tableIndex.index)}". Keys can only be cast to 'number' if they are a composite of one numeric attribute.`);
          } else {
            keys[castKey.type].cast = CastKeyOptions.string;
          }
        }
        return keys;
      }
      _formatKeyCasing(accessPattern, key) {
        const casing = this.model.indexes[accessPattern] !== void 0 ? this.model.indexes[accessPattern].sk.casing : void 0;
        return u.formatKeyCasing(key, casing);
      }
      _validateIndex(index) {
        if (!this.model.facets.byIndex[index]) {
          throw new Error(`Invalid index: ${index}`);
        }
      }
      _getCollectionSk(collection = "") {
        const subCollections = this.model.subCollections[collection];
        const index = this.model.translations.collections.fromCollectionToIndex[collection];
        const accessPattern = this.model.translations.indexes.fromIndexToAccessPattern[index];
        const prefixes = this.model.prefixes[index];
        const prefix = this._makeCollectionPrefix(subCollections);
        if (prefixes.sk && prefixes.sk.isCustom) {
          return "";
        }
        return this._formatKeyCasing(accessPattern, prefix);
      }
      _makeCollectionPrefix(collection = []) {
        let prefix = "";
        if (validations.isArrayHasLength(collection)) {
          for (let i = 0; i < collection.length; i++) {
            let subCollection = collection[i];
            if (i === 0) {
              prefix += `$${subCollection}`;
            } else {
              prefix += `#${subCollection}`;
            }
          }
        } else if (validations.isStringHasLength(collection)) {
          prefix = `$${collection}`;
        }
        return prefix;
      }
      _makeKeyTransforms(queryType) {
        const transforms = [];
        const shiftUp = (val2) => u.shiftSortOrder(val2, 1);
        const noop = (val2) => val2;
        switch (queryType) {
          case QueryTypes.between:
            transforms.push(noop, shiftUp);
            break;
          case QueryTypes.lte:
          case QueryTypes.gt:
            transforms.push(shiftUp);
            break;
          default:
            transforms.push(noop);
            break;
        }
        return transforms;
      }
      /* istanbul ignore next */
      _makeIndexKeysWithoutTail(state = {}, skFacets = []) {
        const index = state.query.index || TableIndex;
        this._validateIndex(index);
        const pkFacets = state.query.keys.pk || {};
        const excludePostfix = state.query.options.indexType === IndexTypes.clustered && state.query.options._isCollectionQuery;
        const transforms = this._makeKeyTransforms(state.query.type);
        if (!skFacets.length) {
          skFacets.push({});
        }
        let facets = this.model.facets.byIndex[index];
        let prefixes = this.model.prefixes[index];
        if (!prefixes) {
          throw new Error(`Invalid index: ${index}`);
        }
        let partitionKey = this._makeKey(
          prefixes.pk,
          facets.pk,
          pkFacets,
          this.model.facets.labels[index].pk
        );
        let pk = partitionKey.key;
        let sk = [];
        let fulfilled = false;
        if (this.model.lookup.indexHasSortKeys[index]) {
          for (let i = 0; i < skFacets.length; i++) {
            const skFacet = skFacets[i];
            const transform = transforms[i];
            let hasLabels = this.model.facets.labels[index] && Array.isArray(this.model.facets.labels[index].sk);
            let labels = hasLabels ? this.model.facets.labels[index].sk : [];
            let sortKey = this._makeKey(prefixes.sk, facets.sk, skFacet, labels, {
              excludeLabelTail: true,
              excludePostfix,
              transform
            });
            if (sortKey.key !== void 0) {
              sk.push(sortKey.key);
            }
            if (sortKey.fulfilled) {
              fulfilled = true;
            }
          }
        }
        return {
          pk,
          sk,
          fulfilled
        };
      }
      /* istanbul ignore next */
      _makeIndexKeys({
        index = TableIndex,
        pkAttributes = {},
        skAttributes = [],
        queryType,
        indexType,
        isCollection = false
      }) {
        this._validateIndex(index);
        const excludePostfix = indexType === IndexTypes.clustered && isCollection;
        const transforms = this._makeKeyTransforms(queryType);
        if (!skAttributes.length) {
          skAttributes.push({});
        }
        let facets = this.model.facets.byIndex[index];
        let prefixes = this.model.prefixes[index];
        if (!prefixes) {
          throw new Error(`Invalid index: ${index}`);
        }
        let pk = this._makeKey(prefixes.pk, facets.pk, pkAttributes, this.model.facets.labels[index].pk);
        let sk = [];
        let fulfilled = false;
        if (this.model.lookup.indexHasSortKeys[index]) {
          for (let i = 0; i < skAttributes.length; i++) {
            const skFacet = skAttributes[i];
            const transform = transforms[i];
            let hasLabels = this.model.facets.labels[index] && Array.isArray(this.model.facets.labels[index].sk);
            let labels = hasLabels ? this.model.facets.labels[index].sk : [];
            let sortKey = this._makeKey(prefixes.sk, facets.sk, skFacet, labels, { excludePostfix, transform });
            if (sortKey.key !== void 0) {
              sk.push(sortKey.key);
            }
            if (sortKey.fulfilled) {
              fulfilled = true;
            }
          }
        }
        return {
          pk: pk.key,
          sk,
          fulfilled
        };
      }
      _formatNumericCastKey(attributeName, key) {
        const fulfilled = key !== void 0;
        if (!fulfilled) {
          return {
            fulfilled,
            key
          };
        }
        if (typeof key === "number") {
          return {
            fulfilled,
            key
          };
        }
        if (typeof key === "string") {
          const parsed = parseInt(key);
          if (!isNaN(parsed)) {
            return {
              fulfilled,
              key: parsed
            };
          }
        }
        if (typeof key === "boolean") {
          return {
            fulfilled,
            key: key === true ? 1 : 0
          };
        }
        throw new e.ElectroAttributeValidationError(attributeName, `Invalid key value provided, could not cast composite attribute ${attributeName} to number for index`);
      }
      /* istanbul ignore next */
      _makeKey({ prefix, isCustom, casing, postfix, cast } = {}, facets = [], supplied = {}, labels = [], { excludeLabelTail, excludePostfix, transform = (val2) => val2 } = {}) {
        if (cast === CastKeyOptions.number) {
          return this._formatNumericCastKey(facets[0], supplied[facets[0]]);
        }
        let key = prefix;
        let foundCount = 0;
        for (let i = 0; i < labels.length; i++) {
          const { name, label } = labels[i];
          const attribute = this.model.schema.getAttribute(name);
          let value = supplied[name];
          if (supplied[name] === void 0 && excludeLabelTail) {
            break;
          }
          if (attribute && validations.isFunction(attribute.format)) {
            value = attribute.format(`${value}`);
          }
          if (isCustom) {
            key = `${key}${label}`;
          } else {
            key = `${key}#${label}_`;
          }
          if (supplied[name] === void 0) {
            break;
          }
          foundCount++;
          key = `${key}${value}`;
        }
        const fulfilled = foundCount === labels.length;
        const shouldApplyPostfix = typeof postfix === "string" && !excludePostfix;
        if (fulfilled && shouldApplyPostfix) {
          key += postfix;
        }
        const transformedKey = transform(u.formatKeyCasing(key, casing));
        return {
          fulfilled,
          key: transformedKey
        };
      }
      _findBestIndexKeyMatch(attributes2 = {}) {
        let facets = this.model.facets.bySlot;
        let matches = [];
        for (let f = 0; f < facets.length; f++) {
          const slots = facets[f] || [];
          for (let s = 0; s < slots.length; s++) {
            const accessPatternSlot = slots[s];
            matches[s] = matches[s] || {
              index: accessPatternSlot.index,
              allKeys: false,
              hasSk: false,
              count: 0,
              done: false,
              keys: []
            };
            const indexOutOfContention = matches[s].done;
            const lacksAttributeAtSlot = !accessPatternSlot;
            const attributeNotProvided = accessPatternSlot && attributes2[accessPatternSlot.name] === void 0;
            const nextAttributeIsSortKey = accessPatternSlot && accessPatternSlot.next && facets[f + 1][s].type === "sk";
            const hasAllKeys = accessPatternSlot && !accessPatternSlot.next;
            if (indexOutOfContention || lacksAttributeAtSlot || attributeNotProvided) {
              matches[s].done = true;
              continue;
            }
            if (nextAttributeIsSortKey) {
              matches[s].hasSk = true;
            } else if (hasAllKeys) {
              matches[s].allKeys = true;
            }
            matches[s].count++;
            matches[s].keys.push({
              name: accessPatternSlot.name,
              type: accessPatternSlot.type
            });
          }
        }
        let max = 0;
        matches = matches.filter((match2) => match2.hasSk || match2.allKeys).map((match2) => {
          max = Math.max(max, match2.count);
          return match2;
        });
        const matched = [];
        for (let m = 0; m < matches.length; m++) {
          const match2 = matches[m];
          const primaryIndexIsFinished = match2.index === "" && match2.allKeys;
          const primaryIndexIsMostMatched = match2.index === "" && match2.count === max;
          const indexRequirementsFulfilled = match2.allKeys;
          const hasTheMostAttributeMatches = match2.count === max;
          if (primaryIndexIsFinished) {
            matched[0] = match2;
          } else if (primaryIndexIsMostMatched) {
            matched[1] = match2;
          } else if (indexRequirementsFulfilled) {
            matched[2] = match2;
          } else if (hasTheMostAttributeMatches) {
            matched[3] = match2;
          }
        }
        const match = matched.find((value) => !!value);
        let keys = [];
        let index = "";
        let shouldScan = true;
        if (match) {
          keys = match.keys;
          index = match.index;
          shouldScan = false;
        }
        return { keys, index, shouldScan };
      }
      /* istanbul ignore next */
      _parseComposedKey(key = TableIndex) {
        let attributes2 = {};
        let names = key.match(/:[A-Z1-9]+/gi);
        if (!names) {
          throw new e.ElectroError(e.ErrorCodes.InvalidKeyCompositeAttributeTemplate, `Invalid key composite attribute template. No composite attributes provided, expected at least one composite attribute with the format ":attributeName". Received: ${key}`);
        }
        let labels = key.split(/:[A-Z1-9]+/gi);
        for (let i = 0; i < names.length; i++) {
          let name = names[i].replace(":", "");
          let label = labels[i];
          if (name !== "") {
            attributes2[name] = attributes2[name] || [];
            attributes2[name].push(label);
          }
        }
        return attributes2;
      }
      _parseTemplateKey(template = "") {
        let attributes2 = [];
        let current = {
          label: "",
          name: ""
        };
        let type = "label";
        for (let i = 0; i < template.length; i++) {
          let char = template[i];
          let last = template[i - 1];
          let next = template[i + 1];
          if (char === "{" && last === "$" && type === "label") {
            type = "name";
          } else if (char === "}" && type === "name") {
            if (current.name.match(/^\s*$/)) {
              throw new e.ElectroError(e.ErrorCodes.InvalidKeyCompositeAttributeTemplate, `Invalid key composite attribute template. Empty expression "\${${current.name}}" provided. Expected attribute name.`);
            }
            attributes2.push({ name: current.name, label: current.label });
            current.name = "";
            current.label = "";
            type = "label";
          } else if (char === "$" && next === "{" && type === "label") {
            continue;
          } else {
            current[type] += char;
          }
        }
        if (current.name.length > 0 || current.label.length > 0) {
          attributes2.push({ name: current.name, label: current.label });
        }
        return attributes2;
      }
      _parseFacets(facets) {
        let isCustom = !Array.isArray(facets) && typeof facets === "string";
        if (isCustom && facets.length > 0) {
          let labels = this._parseComposedKey(facets);
          return {
            isCustom,
            labels: [],
            attributes: Object.keys(attributes)
          };
        } else if (isCustom && facets.length === 0) {
          return {
            isCustom: false,
            labels: [],
            attributes: []
          };
        } else {
          return {
            isCustom,
            labels: [],
            attributes: Object.keys(facets)
          };
        }
      }
      _parseTemplateAttributes(composite = []) {
        let isCustom = !Array.isArray(composite) && typeof composite === "string";
        if (isCustom && composite.length > 0) {
          let labels = this._parseTemplateKey(composite);
          return {
            isCustom,
            labels,
            attributes: labels.map(({ name }) => name).filter((name) => !!name)
          };
        } else if (isCustom && composite.length === 0) {
          return {
            isCustom: false,
            labels: [],
            attributes: []
          };
        } else {
          return {
            isCustom,
            labels: composite.map((name) => ({ name })),
            attributes: composite
          };
        }
      }
      _compositeTemplateAreCompatible(parsedAttributes, composite) {
        if (!Array.isArray(composite) || !parsedAttributes || !parsedAttributes.isCustom) {
          return true;
        }
        return validations.stringArrayMatch(composite, parsedAttributes.attributes);
      }
      _optimizeIndexKey(keyDefinition) {
        const hasTemplate = typeof keyDefinition.template === "string";
        const hasSingleItemComposite = Array.isArray(keyDefinition.facets) && keyDefinition.facets.length === 1 && keyDefinition.facets[0] === keyDefinition.field;
        if (!hasTemplate && hasSingleItemComposite) {
          keyDefinition.facets = "${" + keyDefinition.field + "}";
        }
        return keyDefinition;
      }
      _optimizeMatchingKeyAttributes(model = {}) {
        const attributeFields = [];
        for (const name of Object.keys(model.attributes)) {
          const { field } = model.attributes[name];
          attributeFields.push(field || name);
        }
        for (const accessPattern of Object.keys(model.indexes)) {
          let { pk, sk } = model.indexes[accessPattern];
          if (attributeFields.includes(pk.field)) {
            model.indexes[accessPattern].pk = this._optimizeIndexKey(pk);
          }
          if (sk && attributeFields.includes(sk.field)) {
            model.indexes[accessPattern].sk = this._optimizeIndexKey(sk);
          }
        }
        return model;
      }
      _normalizeIndexes(indexes) {
        let normalized = {};
        let indexFieldTranslation = {};
        let indexHasSortKeys = {};
        let indexHasSubCollections = {};
        let clusteredIndexes = /* @__PURE__ */ new Set();
        let indexAccessPatternTransaction = {
          fromAccessPatternToIndex: {},
          fromIndexToAccessPattern: {}
        };
        let collectionIndexTranslation = {
          fromCollectionToIndex: {},
          fromIndexToCollection: {}
        };
        let subCollections = {};
        let collections = {};
        let facets = {
          byIndex: {},
          byField: {},
          byFacet: {},
          byAttr: {},
          byType: {},
          bySlot: [],
          fields: [],
          attributes: [],
          labels: {}
        };
        let seenIndexes = {};
        let seenIndexFields = {};
        let accessPatterns = Object.keys(indexes);
        for (let i in accessPatterns) {
          let accessPattern = accessPatterns[i];
          let index = indexes[accessPattern];
          let indexName = index.index || TableIndex;
          let indexType = typeof index.type === "string" ? index.type : IndexTypes.isolated;
          if (indexType === "clustered") {
            clusteredIndexes.add(accessPattern);
          }
          if (seenIndexes[indexName] !== void 0) {
            if (indexName === TableIndex) {
              throw new e.ElectroError(e.ErrorCodes.DuplicateIndexes, `Duplicate index defined in model found in Access Pattern '${accessPattern}': '${u.formatIndexNameForDisplay(indexName)}'. This could be because you forgot to specify the index name of a secondary index defined in your model.`);
            } else {
              throw new e.ElectroError(e.ErrorCodes.DuplicateIndexes, `Duplicate index defined in model found in Access Pattern '${accessPattern}': '${indexName}'`);
            }
          }
          seenIndexes[indexName] = indexName;
          let hasSk = !!index.sk;
          let inCollection = !!index.collection;
          if (!hasSk && inCollection) {
            throw new e.ElectroError(e.ErrorCodes.CollectionNoSK, `Invalid Access pattern definition for '${accessPattern}': '${u.formatIndexNameForDisplay(indexName)}', contains a collection definition without a defined SK. Collections can only be defined on indexes with a defined SK.`);
          }
          let collection = index.collection || "";
          let customFacets = {
            pk: false,
            sk: false
          };
          const pkCasing = KeyCasing[index.pk.casing] === void 0 ? KeyCasing.default : index.pk.casing;
          let skCasing = KeyCasing.default;
          if (hasSk && KeyCasing[index.sk.casing] !== void 0) {
            skCasing = index.sk.casing;
          }
          indexHasSortKeys[indexName] = hasSk;
          let parsedPKAttributes = this._parseTemplateAttributes(index.pk.facets);
          customFacets.pk = parsedPKAttributes.isCustom;
          facets.labels[indexName] = facets.labels[indexName] || {};
          facets.labels[indexName]["pk"] = facets.labels[indexName]["pk"] || parsedPKAttributes;
          facets.labels[indexName]["sk"] = facets.labels[indexName]["sk"] || this._parseTemplateAttributes();
          let pk = {
            inCollection,
            accessPattern,
            index: indexName,
            casing: pkCasing,
            type: KeyTypes.pk,
            cast: index.pk.cast,
            field: index.pk.field || "",
            facets: parsedPKAttributes.attributes,
            isCustom: parsedPKAttributes.isCustom,
            facetLabels: parsedPKAttributes.labels
          };
          let sk = {};
          let parsedSKAttributes = {};
          if (hasSk) {
            parsedSKAttributes = this._parseTemplateAttributes(index.sk.facets);
            customFacets.sk = parsedSKAttributes.isCustom;
            facets.labels[indexName]["sk"] = parsedSKAttributes;
            sk = {
              inCollection,
              accessPattern,
              index: indexName,
              casing: skCasing,
              type: KeyTypes.sk,
              cast: index.sk.cast,
              field: index.sk.field || "",
              facets: parsedSKAttributes.attributes,
              isCustom: parsedSKAttributes.isCustom,
              facetLabels: parsedSKAttributes.labels
            };
            facets.fields.push(sk.field);
          }
          if (Array.isArray(sk.facets)) {
            let duplicates = pk.facets.filter((facet) => sk.facets.includes(facet));
            if (duplicates.length !== 0) {
              if (sk.facets.length > 1) {
                throw new e.ElectroError(e.ErrorCodes.DuplicateIndexCompositeAttributes, `The Access Pattern '${accessPattern}' contains duplicate references the composite attribute(s): ${u.commaSeparatedString(duplicates)}. Composite attributes can only be used more than once in an index if your sort key is limitted to a single attribute. This is to prevent unexpected runtime errors related to the inability to generate keys.`);
              }
            }
          }
          let definition = {
            pk,
            sk,
            collection,
            hasSk,
            customFacets,
            index: indexName,
            type: indexType
          };
          indexHasSubCollections[indexName] = inCollection && Array.isArray(collection);
          if (inCollection) {
            let collectionArray = this._toSubCollectionArray(collection);
            for (let collectionName of collectionArray) {
              if (collections[collectionName] !== void 0) {
                throw new e.ElectroError(e.ErrorCodes.DuplicateCollections, `Duplicate collection, "${collectionName}" is defined across multiple indexes "${collections[collectionName]}" and "${accessPattern}". Collections must be unique names across indexes for an Entity.`);
              } else {
                collections[collectionName] = accessPattern;
              }
              collectionIndexTranslation.fromCollectionToIndex[collectionName] = indexName;
              collectionIndexTranslation.fromIndexToCollection[indexName] = collectionIndexTranslation.fromIndexToCollection[indexName] || [];
              collectionIndexTranslation.fromIndexToCollection[indexName].push(collection);
            }
            subCollections = {
              ...subCollections,
              ...this._normalizeSubCollections(collectionArray)
            };
          }
          let attributes2 = [
            ...pk.facets.map((name) => ({
              name,
              index: indexName,
              type: KeyTypes.pk
            })),
            ...(sk.facets || []).map((name) => ({
              name,
              index: indexName,
              type: KeyTypes.sk
            }))
          ];
          normalized[accessPattern] = definition;
          indexAccessPatternTransaction.fromAccessPatternToIndex[accessPattern] = indexName;
          indexAccessPatternTransaction.fromIndexToAccessPattern[indexName] = accessPattern;
          indexFieldTranslation[indexName] = {
            pk: pk.field,
            sk: sk.field || ""
          };
          facets.attributes = [...facets.attributes, ...attributes2];
          facets.fields.push(pk.field);
          facets.byIndex[indexName] = {
            customFacets,
            pk: pk.facets,
            sk: sk.facets,
            all: attributes2,
            collection: index.collection,
            hasSortKeys: !!indexHasSortKeys[indexName],
            hasSubCollections: !!indexHasSubCollections[indexName],
            casing: {
              pk: pkCasing,
              sk: skCasing
            }
          };
          facets.byField = facets.byField || {};
          facets.byField[pk.field] = facets.byField[pk.field] || {};
          facets.byField[pk.field][indexName] = pk;
          if (sk.field) {
            facets.byField[sk.field] = facets.byField[sk.field] || {};
            facets.byField[sk.field][indexName] = sk;
          }
          if (seenIndexFields[pk.field] !== void 0) {
            const definition2 = Object.values(facets.byField[pk.field]).find((definition3) => definition3.index !== indexName);
            const definitionsMatch = validations.stringArrayMatch(pk.facets, definition2.facets);
            if (!definitionsMatch) {
              throw new e.ElectroError(e.ErrorCodes.InconsistentIndexDefinition, `Partition Key (pk) on Access Pattern '${u.formatIndexNameForDisplay(accessPattern)}' is defined with the composite attribute(s) ${u.commaSeparatedString(pk.facets)}, but the accessPattern '${u.formatIndexNameForDisplay(definition2.index)}' defines this field with the composite attributes ${u.commaSeparatedString(definition2.facets)}'. Key fields must have the same composite attribute definitions across all indexes they are involved with`);
            }
            seenIndexFields[pk.field].push({ accessPattern, type: "pk" });
          } else {
            seenIndexFields[pk.field] = [];
            seenIndexFields[pk.field].push({ accessPattern, type: "pk" });
          }
          if (sk.field) {
            if (sk.field === pk.field) {
              throw new e.ElectroError(e.ErrorCodes.DuplicateIndexFields, `The Access Pattern '${u.formatIndexNameForDisplay(accessPattern)}' references the field '${sk.field}' as the field name for both the PK and SK. Fields used for indexes need to be unique to avoid conflicts.`);
            } else if (seenIndexFields[sk.field] !== void 0) {
              const isAlsoDefinedAsPK = seenIndexFields[sk.field].find((field) => field.type === "pk");
              if (isAlsoDefinedAsPK) {
                throw new e.ElectroError(e.ErrorCodes.InconsistentIndexDefinition, `The Sort Key (sk) on Access Pattern '${u.formatIndexNameForDisplay(accessPattern)}' references the field '${pk.field}' which is already referenced by the Access Pattern(s) '${u.formatIndexNameForDisplay(isAlsoDefinedAsPK.accessPattern)}' as a Partition Key. Fields mapped to Partition Keys cannot be also mapped to Sort Keys.`);
              }
              const definition2 = Object.values(facets.byField[sk.field]).find((definition3) => definition3.index !== indexName);
              const definitionsMatch = validations.stringArrayMatch(sk.facets, definition2.facets);
              if (!definitionsMatch) {
                throw new e.ElectroError(e.ErrorCodes.DuplicateIndexFields, `Sort Key (sk) on Access Pattern '${u.formatIndexNameForDisplay(accessPattern)}' is defined with the composite attribute(s) ${u.commaSeparatedString(sk.facets)}, but the accessPattern '${u.formatIndexNameForDisplay(definition2.index)}' defines this field with the composite attributes ${u.commaSeparatedString(definition2.facets)}'. Key fields must have the same composite attribute definitions across all indexes they are involved with`);
              }
              seenIndexFields[sk.field].push({ accessPattern, type: "sk" });
            } else {
              seenIndexFields[sk.field] = [];
              seenIndexFields[sk.field].push({ accessPattern, type: "sk" });
            }
          }
          attributes2.forEach(({ index: index2, type, name }, j) => {
            let next = attributes2[j + 1] !== void 0 ? attributes2[j + 1].name : "";
            let facet = { index: index2, name, type, next };
            facets.byAttr[name] = facets.byAttr[name] || [];
            facets.byAttr[name].push(facet);
            facets.byType[type] = facets.byType[type] || [];
            facets.byType[type].push(facet);
            facets.byFacet[name] = facets.byFacet[name] || [];
            facets.byFacet[name][j] = facets.byFacet[name][j] || [];
            facets.byFacet[name][j].push(facet);
            facets.bySlot[j] = facets.bySlot[j] || [];
            facets.bySlot[j][i] = facet;
          });
          let pkTemplateIsCompatible = this._compositeTemplateAreCompatible(parsedPKAttributes, index.pk.composite);
          if (!pkTemplateIsCompatible) {
            throw new e.ElectroError(e.ErrorCodes.IncompatibleKeyCompositeAttributeTemplate, `Incompatible PK 'template' and 'composite' properties for defined on index "${u.formatIndexNameForDisplay(indexName)}". PK "template" string is defined as having composite attributes ${u.commaSeparatedString(parsedPKAttributes.attributes)} while PK "composite" array is defined with composite attributes ${u.commaSeparatedString(index.pk.composite)}`);
          }
          if (index.sk !== void 0 && Array.isArray(index.sk.composite) && typeof index.sk.template === "string") {
            let skTemplateIsCompatible = this._compositeTemplateAreCompatible(parsedSKAttributes, index.sk.composite);
            if (!skTemplateIsCompatible) {
              throw new e.ElectroError(e.ErrorCodes.IncompatibleKeyCompositeAttributeTemplate, `Incompatible SK 'template' and 'composite' properties for defined on index "${u.formatIndexNameForDisplay(indexName)}". SK "template" string is defined as having composite attributes ${u.commaSeparatedString(parsedSKAttributes.attributes)} while SK "composite" array is defined with composite attributes ${u.commaSeparatedString(index.sk.composite)}`);
            }
          }
        }
        if (facets.byIndex[TableIndex] === void 0) {
          throw new e.ElectroError(e.ErrorCodes.MissingPrimaryIndex, "Schema is missing an index definition for the table's main index. Please update the schema to include an index without a specified name to define the table's natural index");
        }
        return {
          facets,
          subCollections,
          indexHasSortKeys,
          clusteredIndexes,
          indexHasSubCollections,
          indexes: normalized,
          indexField: indexFieldTranslation,
          indexAccessPattern: indexAccessPatternTransaction,
          indexCollection: collectionIndexTranslation,
          collections: Object.keys(collections)
        };
      }
      _normalizeFilters(filters = {}) {
        let normalized = {};
        let invalidFilterNames = ["go", "params", "filter", "where", "set"];
        for (let [name, fn] of Object.entries(filters)) {
          if (invalidFilterNames.includes(name)) {
            throw new e.ElectroError(e.ErrorCodes.InvalidFilter, `Invalid filter name: ${name}. Filter cannot be named ${u.commaSeparatedString(invalidFilterNames)}`);
          } else {
            normalized[name] = fn;
          }
        }
        return normalized;
      }
      _normalizeKeyFixings({ service, entity, version: version2, indexes, modelVersion, clusteredIndexes, schema }) {
        let prefixes = {};
        for (let accessPattern of Object.keys(indexes)) {
          let tableIndex = indexes[accessPattern];
          prefixes[tableIndex.index] = this._makeKeyFixings({
            service,
            entity,
            version: version2,
            tableIndex,
            modelVersion,
            isClustered: clusteredIndexes.has(accessPattern),
            schema
          });
        }
        return prefixes;
      }
      _normalizeSubCollections(collections = []) {
        let lookup = {};
        for (let i = collections.length - 1; i >= 0; i--) {
          let subCollection = collections[i];
          lookup[subCollection] = lookup[subCollection] || [];
          for (let j = 0; j <= i; j++) {
            lookup[subCollection].push(collections[j]);
          }
        }
        return lookup;
      }
      _toSubCollectionArray(collection) {
        let collectionArray = [];
        if (Array.isArray(collection) && collection.every((col) => validations.isStringHasLength(col))) {
          collectionArray = collection;
        } else if (validations.isStringHasLength(collection)) {
          collectionArray.push(collection);
        } else {
          throw new Error("Invalid collection definition");
        }
        return collectionArray;
      }
      _applyCompositeToFacetConversion(model) {
        for (let accessPattern of Object.keys(model.indexes)) {
          let index = model.indexes[accessPattern];
          let invalidPK = index.pk.facets === void 0 && index.pk.composite === void 0 && index.pk.template === void 0;
          let invalidSK = index.sk && (index.sk.facets === void 0 && index.sk.composite === void 0 && index.sk.template === void 0);
          if (invalidPK) {
            throw new Error("Missing Index Composite Attributes!");
          } else if (invalidSK) {
            throw new Error("Missing Index Composite Attributes!");
          }
          if (Array.isArray(index.pk.composite)) {
            index.pk = {
              ...index.pk,
              facets: index.pk.composite
            };
          }
          if (typeof index.pk.template === "string") {
            index.pk = {
              ...index.pk,
              facets: index.pk.template
            };
          }
          if (index.sk && Array.isArray(index.sk.composite)) {
            index.sk = {
              ...index.sk,
              facets: index.sk.composite
            };
          }
          if (index.sk && typeof index.sk.template === "string") {
            index.sk = {
              ...index.sk,
              facets: index.sk.template
            };
          }
          model.indexes[accessPattern] = index;
        }
        return model;
      }
      _mergeKeyDefinitions(fromIndex, fromModel) {
        let definitions = {};
        for (let indexName of Object.keys(fromIndex)) {
          let pk = fromIndex[indexName].pk;
          let sk = fromIndex[indexName].sk || { labels: [] };
          definitions[indexName] = {
            pk: [],
            sk: []
          };
          for (let { name, label } of pk.labels) {
            if (pk.isCustom) {
              definitions[indexName].pk.push({ name, label });
            } else {
              definitions[indexName].pk.push({ name, label: fromModel[name] || name });
            }
          }
          for (let { name, label } of sk.labels) {
            if (sk.isCustom) {
              definitions[indexName].sk.push({ name, label });
            } else {
              definitions[indexName].sk.push({ name, label: u.getFirstDefined(fromModel[name], name) });
            }
          }
        }
        return definitions;
      }
      _parseModel(model, config = {}) {
        let modelVersion = u.getModelVersion(model);
        let service, entity, version2, table, name;
        switch (modelVersion) {
          case ModelVersions.beta:
            service = model.service;
            entity = model.entity;
            version2 = model.version;
            table = config.table || model.table;
            name = entity;
            break;
          case ModelVersions.v1:
            service = model.model && model.model.service;
            entity = model.model && model.model.entity;
            version2 = model.model && model.model.version;
            table = config.table || model.table;
            name = entity;
            break;
          default:
            throw new Error("Invalid model");
        }
        model = this._applyCompositeToFacetConversion(model);
        model = this._optimizeMatchingKeyAttributes(model);
        let {
          facets,
          indexes,
          indexField,
          collections,
          subCollections,
          indexCollection,
          clusteredIndexes,
          indexHasSortKeys,
          indexAccessPattern,
          indexHasSubCollections
        } = this._normalizeIndexes(model.indexes);
        let schema = new Schema(model.attributes, facets, {
          getClient: () => this.client,
          isRoot: true
        });
        let filters = this._normalizeFilters(model.filters);
        let prefixes = this._normalizeKeyFixings({ service, entity, version: version2, indexes, modelVersion, clusteredIndexes, schema });
        let schemaDefinedLabels = schema.getLabels();
        const deconstructors = {};
        facets.labels = this._mergeKeyDefinitions(facets.labels, schemaDefinedLabels);
        for (let indexName of Object.keys(facets.labels)) {
          const accessPattern = indexAccessPattern.fromIndexToAccessPattern[indexName];
          indexes[accessPattern].pk.labels = facets.labels[indexName].pk;
          indexes[accessPattern].sk.labels = facets.labels[indexName].sk;
          const keyTypes = prefixes[indexName] || {};
          deconstructors[indexName] = {};
          for (const keyType in keyTypes) {
            const prefixes2 = keyTypes[keyType];
            const labels = facets.labels[indexName][keyType] || [];
            const attributes2 = schema.attributes;
            deconstructors[indexName][keyType] = this._createKeyDeconstructor(prefixes2, labels, attributes2);
          }
        }
        return {
          name,
          table,
          schema,
          facets,
          entity,
          service,
          indexes,
          version: version2,
          filters,
          prefixes,
          collections,
          modelVersion,
          subCollections,
          lookup: {
            clusteredIndexes,
            indexHasSortKeys,
            indexHasSubCollections
          },
          translations: {
            keys: indexField,
            indexes: indexAccessPattern,
            collections: indexCollection
          },
          keys: {
            deconstructors
          },
          original: model
        };
      }
    };
    function getEntityIdentifiers(entities) {
      let identifiers = [];
      for (let alias of Object.keys(entities)) {
        let entity = entities[alias];
        let name = entity.model.entity;
        let version2 = entity.model.version;
        identifiers.push({
          name,
          alias,
          version: version2,
          entity,
          nameField: entity.identifiers.entity,
          versionField: entity.identifiers.version
        });
      }
      return identifiers;
    }
    function matchToEntityAlias({ paramItem, identifiers, record, entities = {}, allowMatchOnKeys = false } = {}) {
      let entity;
      if (paramItem && v.isFunction(paramItem[TransactionCommitSymbol])) {
        const committed = paramItem[TransactionCommitSymbol]();
        entity = committed.entity;
      }
      let entityAlias;
      for (let { name, version: version2, nameField, versionField, alias } of identifiers) {
        if (entity && entity.model.entity === name && entity.model.version === version2) {
          entityAlias = alias;
          break;
        } else if (record[nameField] !== void 0 && record[versionField] !== void 0 && record[nameField] === name && record[versionField] === version2) {
          entityAlias = alias;
          break;
        } else if (entities[alias] && entities[alias].ownsKeys(record)) {
          entityAlias = alias;
          break;
        }
      }
      return entityAlias;
    }
    module2.exports = {
      Entity: Entity2,
      clauses,
      getEntityIdentifiers,
      matchToEntityAlias
    };
  }
});

// node_modules/electrodb/src/transaction.js
var require_transaction = __commonJS({
  "node_modules/electrodb/src/transaction.js"(exports, module2) {
    var { TableIndex, TransactionMethods } = require_types8();
    var { getEntityIdentifiers, matchToEntityAlias } = require_entity();
    function cleanseCanceledData(index = TableIndex, entities, data = {}, config = {}) {
      if (config.raw) {
        return data;
      }
      const identifiers = getEntityIdentifiers(entities);
      const canceled = data.canceled || [];
      const paramItems = config._paramItems || [];
      const results = [];
      for (let i = 0; i < canceled.length; i++) {
        const { Item, Code, Message } = canceled[i] || {};
        const paramItem = paramItems[i];
        const code = Code || "None";
        const rejected = code !== "None";
        const result = {
          rejected,
          code,
          message: Message
        };
        if (Item) {
          const entityAlias = matchToEntityAlias({
            record: Item,
            paramItem,
            identifiers
          });
          result.item = entities[entityAlias].formatResponse({ Item }, index, {
            ...config,
            pager: false,
            parse: void 0
          }).data;
        } else {
          result.item = null;
        }
        results.push(result);
      }
      return results;
    }
    function cleanseTransactionData(index = TableIndex, entities, data = {}, config = {}) {
      if (config.raw) {
        return data;
      }
      const identifiers = getEntityIdentifiers(entities);
      data.Items = data.Items || [];
      const paramItems = config._paramItems || [];
      const results = [];
      for (let i = 0; i < data.Items.length; i++) {
        const record = data.Items[i];
        if (!record) {
          results.push(null);
          continue;
        }
        const paramItem = paramItems[i];
        const entityAlias = matchToEntityAlias({ paramItem, identifiers, record });
        if (!entityAlias) {
          continue;
        }
        let formatted = entities[entityAlias].formatResponse({ Item: record }, index, {
          ...config,
          pager: false,
          parse: void 0
        });
        results.push(formatted.data);
      }
      return results.map((item) => ({
        rejected: false,
        item
      }));
    }
    function createTransaction(options) {
      const { fn, method, getEntities } = options;
      const operations = {
        params: (options2 = {}) => {
          const paramItems = fn(getEntities());
          const params = {
            TransactItems: paramItems
          };
          if (typeof options2.token === "string" && options2.token.length) {
            params["ClientRequestToken"] = options2.token;
          }
          if (options2._returnParamItems) {
            return { params, paramItems };
          }
          return params;
        },
        go: async (options2) => {
          const driver = Object.values(getEntities())[0];
          if (!driver) {
            throw new Error("At least one entity must exist to perform a transaction");
          }
          const { params, paramItems } = operations.params({
            ...options2,
            _returnParamItems: true
          });
          let canceled = false;
          if (paramItems.length === 0) {
            return {
              canceled,
              data: []
            };
          }
          const response = await driver.go(method, params, {
            ...options2,
            parse: (options3, data) => {
              if (options3.raw) {
                return data;
              } else if (data.canceled) {
                canceled = true;
                return cleanseCanceledData(TableIndex, getEntities(), data, {
                  ...options3,
                  _isTransaction: true,
                  _paramItems: paramItems
                });
              } else if (data.Responses) {
                return cleanseTransactionData(TableIndex, getEntities(), {
                  Items: data.Responses.map((response2) => response2.Item)
                }, {
                  ...options3,
                  _isTransaction: true,
                  _paramItems: paramItems
                });
              } else {
                return new Array(paramItems ? paramItems.length : 0).fill({
                  item: null,
                  code: "None",
                  rejected: false,
                  message: void 0
                });
              }
            }
          });
          return {
            ...response,
            canceled
          };
        }
      };
      return operations;
    }
    function createWriteTransaction(entities, fn) {
      return createTransaction({
        fn,
        method: TransactionMethods.transactWrite,
        getEntities: () => entities
      });
    }
    function createGetTransaction(entities, fn) {
      return createTransaction({
        fn,
        method: TransactionMethods.transactGet,
        getEntities: () => entities
      });
    }
    module2.exports = {
      createTransaction,
      createWriteTransaction,
      createGetTransaction
    };
  }
});

// node_modules/electrodb/src/service.js
var require_service = __commonJS({
  "node_modules/electrodb/src/service.js"(exports, module2) {
    var { Entity: Entity2, getEntityIdentifiers, matchToEntityAlias } = require_entity();
    var { clauses } = require_clauses();
    var { TableIndex, TransactionMethods, KeyCasing, ServiceVersions, Pager, ElectroInstance, ElectroInstanceTypes, ModelVersions, IndexTypes } = require_types8();
    var { FilterFactory } = require_filters();
    var { FilterOperations } = require_operations();
    var { WhereFactory } = require_where();
    var v = require_validations();
    var c = require_client4();
    var e = require_errors();
    var u = require_util5();
    var txn = require_transaction();
    var { getInstanceType, getModelVersion, applyBetaModelOverrides } = require_util5();
    var ConstructorTypes = {
      beta: "beta",
      v1: "v1",
      v1Map: "v1Map",
      unknown: "unknown"
    };
    function inferConstructorType(service) {
      if (v.isNameEntityRecordType(service) || v.isNameModelRecordType(service)) {
        return ConstructorTypes.v1Map;
      } else if (v.isBetaServiceConfig(service)) {
        return ConstructorTypes.beta;
      } else if (v.isStringHasLength(service)) {
        return ConstructorTypes.v1;
      } else {
        return ConstructorTypes.unknown;
      }
    }
    function inferJoinValues(alias, instance, config) {
      let hasAlias = true;
      let args = { alias, instance, config, hasAlias };
      if (typeof alias !== "string") {
        args.config = instance;
        args.instance = alias;
        args.hasAlias = false;
      }
      return args;
    }
    var Service2 = class {
      _betaConstructor(service, config) {
        this.service = {};
        this._modelOverrides = {};
        this._modelVersion = ModelVersions.beta;
        this._modelOverrides = {
          table: service.table,
          service: service.service,
          version: service.version
        };
        this.service.name = service.name || service.service;
        this.service.table = service.table;
        this.service.version = service.version;
        this.config = config;
        this.client = config.client;
        if (v.isFunction(config.logger)) {
          this.logger = config.logger;
        }
        this.entities = {};
        this.find = {};
        this.collectionSchema = {};
        this.compositeAttributes = {};
        this.collections = {};
        this.identifiers = {};
        this.transaction = {
          get: (fn) => {
            return txn.createTransaction({
              fn,
              getEntities: () => this.entities,
              method: TransactionMethods.transactGet
            });
          },
          write: (fn) => {
            return txn.createTransaction({
              fn,
              getEntities: () => this.entities,
              method: TransactionMethods.transactWrite
            });
          }
        };
        this._instance = ElectroInstance.service;
        this._instanceType = ElectroInstanceTypes.service;
      }
      _v1Constructor(service, config) {
        this.service = {};
        this._modelOverrides = {};
        this._modelVersion = ModelVersions.v1;
        this.service.name = service;
        this.service.table = config.table;
        this._modelOverrides.table = config.table;
        this.config = config;
        this.client = config.client;
        if (v.isFunction(config.logger)) {
          this.logger = config.logger;
        }
        this.entities = {};
        this.find = {};
        this.collectionSchema = {};
        this.compositeAttributes = {};
        this.collections = {};
        this.identifiers = {};
        this.transaction = {
          get: (fn) => {
            return txn.createTransaction({
              fn,
              getEntities: () => this.entities,
              method: TransactionMethods.transactGet
            });
          },
          write: (fn) => {
            return txn.createTransaction({
              fn,
              getEntities: () => this.entities,
              method: TransactionMethods.transactWrite
            });
          }
        };
        this._instance = ElectroInstance.service;
        this._instanceType = ElectroInstanceTypes.service;
      }
      _v1MapConstructor(service, config) {
        let entityNames = Object.keys(service);
        let serviceName2 = this._inferServiceNameFromEntityMap(service);
        this._v1Constructor(serviceName2, config);
        for (let name of entityNames) {
          let entity = service[name];
          this.join(name, entity, config);
        }
      }
      constructor(service = "", config = {}) {
        config = c.normalizeConfig(config);
        this.version = ServiceVersions.v1;
        let type = inferConstructorType(service);
        switch (type) {
          case ConstructorTypes.v1Map:
            this._v1MapConstructor(service, config);
            break;
          case ConstructorTypes.beta:
            this._betaConstructor(service, config);
            break;
          case ConstructorTypes.v1:
            this._v1Constructor(service, config);
            break;
          default:
            throw new e.ElectroError(e.ErrorCodes.InvalidJoin, `Invalid service name: ${JSON.stringify(service)}. Service name must have length greater than zero`);
        }
      }
      _inferServiceNameFromEntityMap(service) {
        let names = Object.keys(service);
        let entity = names.map((name) => service[name]).map((instance) => this._inferJoinEntity(instance)).find((entity2) => entity2 && entity2.model && entity2.model.service);
        if (!entity || !entity.model || !entity.model.service) {
          throw new e.ElectroError(e.ErrorCodes.InvalidJoin, `Invalid service name: Entities/Models provided do not contain property for Service Name`);
        }
        return entity.model.service;
      }
      _inferJoinEntity(instance, options) {
        let entity = {};
        let type = getInstanceType(instance);
        let modelVersion = getModelVersion(instance);
        switch (type) {
          case ElectroInstanceTypes.model:
            entity = new Entity2(instance, options);
            break;
          case ElectroInstanceTypes.entity:
            entity = instance;
            break;
          default:
            if (modelVersion !== this._modelVersion) {
              throw new e.ElectroError(e.ErrorCodes.InvalidJoin, "Invalid instance: Valid instances to join include Models and Entity instances.");
            } else if (modelVersion === ModelVersions.beta) {
              instance = applyBetaModelOverrides(instance, this._modelOverrides);
            } else {
              throw new e.ElectroError(e.ErrorCodes.InvalidJoin, `Invalid instance: Valid instances to join include Models and Entity instances.`);
            }
            entity = new Entity2(instance, options);
            break;
        }
        return entity;
      }
      /**
       * Join
       * @param {string} alias
       * @param instance
       * @param config
       * @returns {Service}
       */
      join(...args) {
        let { alias, instance, config, hasAlias } = inferJoinValues(...args);
        let options = { ...config, ...this.config };
        let entity = this._inferJoinEntity(instance, options);
        let name = hasAlias ? alias : entity.getName();
        if (this.service.name.toLowerCase() !== entity.model.service.toLowerCase()) {
          throw new e.ElectroError(e.ErrorCodes.InvalidJoin, `Service name defined on joined instance, ${entity.model.service}, does not match the name of this Service: ${this.service.name}. Verify or update the service name on the Entity/Model to match the name defined on this service.`);
        }
        if (this.getTableName()) {
          entity.setTableName(this.getTableName());
        }
        if (options.client) {
          entity.setClient(options.client);
        }
        if (options.logger) {
          entity._addLogger(options.logger);
        }
        if (options.listeners) {
          entity.addListeners(options.listeners);
        }
        if (this._modelVersion === ModelVersions.beta && this.service.version) {
          entity.model.version = this.service.version;
        }
        this.entities[name] = entity;
        for (let collection of this.entities[name].model.collections) {
          this._addCollectionEntity(collection, name, this.entities[name]);
          this.collections[collection] = (...facets) => {
            return this._makeCollectionChain({
              name: collection,
              initialClauses: clauses
            }, ...facets);
          };
        }
        for (const collection in this.collectionSchema) {
          const collectionSchema = this.collectionSchema[collection];
          this.compositeAttributes[collection] = this._collectionSchemaToCompositeAttributes(collectionSchema);
        }
        this.find = { ...this.entities, ...this.collections };
        return this;
      }
      _collectionSchemaToCompositeAttributes(schema) {
        const keys = schema.keys;
        return {
          hasSortKeys: keys.hasSk,
          customFacets: {
            pk: keys.pk.isCustom,
            sk: keys.sk.isCustom
          },
          pk: keys.pk.facets,
          sk: keys.sk.facets,
          all: [
            ...keys.pk.facets.map((name) => {
              return {
                name,
                index: keys.index,
                type: "pk"
              };
            }),
            ...keys.sk.facets.map((name) => {
              return {
                name,
                index: keys.index,
                type: "sk"
              };
            })
          ],
          collection: keys.collection,
          hasSubCollections: schema.hasSubCollections,
          casing: {
            pk: keys.pk.casing,
            sk: keys.sk.casing
          }
        };
      }
      setClient(client) {
        if (client !== void 0) {
          for (let entity of Object.values(this.entities)) {
            entity.setClient(client);
          }
        }
      }
      cleanseRetrievedData(index = TableIndex, entities, data = {}, config = {}) {
        if (config.raw) {
          return data;
        }
        const identifiers = getEntityIdentifiers(entities);
        data.Items = data.Items || [];
        const results = {};
        for (let { alias } of identifiers) {
          results[alias] = [];
        }
        for (let i = 0; i < data.Items.length; i++) {
          const record = data.Items[i];
          if (!record) {
            continue;
          }
          const entityAlias = matchToEntityAlias({ identifiers, record, entities: this.entities, allowMatchOnKeys: config.ignoreOwnership });
          if (!entityAlias) {
            continue;
          }
          let formatted;
          if (config.hydrate) {
            formatted = {
              data: record
              // entities[entityAlias]._formatKeysToItem(index, record),
            };
          } else {
            formatted = entities[entityAlias].formatResponse({ Item: record }, index, {
              ...config,
              pager: false,
              parse: void 0
            });
          }
          results[entityAlias].push(formatted.data);
        }
        return results;
      }
      findKeyOwner(lastEvaluatedKey) {
        return Object.values(this.entities)[0];
      }
      expectKeyOwner(lastEvaluatedKey) {
        const owner = this.findKeyOwner(lastEvaluatedKey);
        if (owner === void 0) {
          throw new e.ElectroError(e.ErrorCodes.NoOwnerForCursor, `Supplied cursor does not resolve to Entity within the Service ${this.service.name}`);
        }
        return owner;
      }
      findCursorOwner(cursor) {
        return Object.values(this.entities)[0];
      }
      expectCursorOwner(cursor) {
        const owner = this.findCursorOwner(cursor);
        if (owner === void 0) {
          throw new e.ElectroError(e.ErrorCodes.NoOwnerForCursor, `Supplied cursor does not resolve to Entity within the Service ${this.service.name}`);
        }
        return owner;
      }
      getTableName() {
        return this.service.table;
      }
      setTableName(table) {
        this.service.table = table;
        for (let entity of Object.values(this.entities)) {
          entity.setTableName(table);
        }
      }
      _makeCollectionChain({
        name = "",
        initialClauses = {}
      }, facets = {}) {
        const { entities, attributes: attributes2, identifiers, indexType, index } = this.collectionSchema[name];
        const compositeAttributes = this.compositeAttributes[name];
        const allEntities = Object.values(entities);
        const entity = allEntities[0];
        let filterBuilder = new FilterFactory(attributes2, FilterOperations);
        let whereBuilder = new WhereFactory(attributes2, FilterOperations);
        let clauses2 = { ...initialClauses };
        clauses2 = filterBuilder.injectFilterClauses(clauses2);
        clauses2 = whereBuilder.injectWhereClauses(clauses2);
        const expression = identifiers.expression || "";
        let options = {
          // expressions, // DynamoDB doesnt return what I expect it would when provided with these entity filters
          parse: (options2, data) => {
            if (options2.raw) {
              return data;
            }
            return this.cleanseRetrievedData(index, entities, data, options2);
          },
          formatCursor: {
            serialize: (key) => {
              return this.expectKeyOwner(key).serializeCursor(key);
            },
            deserialize: (cursor) => {
              return this.expectCursorOwner(cursor).deserializeCursor(cursor);
            }
          },
          identifiers: {
            names: identifiers.names || {},
            values: identifiers.values || {},
            expression: allEntities.length > 1 ? `(${expression})` : expression
          },
          expressions: {
            names: {},
            values: {},
            expression: ""
          },
          attributes: attributes2,
          entities,
          indexType,
          compositeAttributes,
          hydrator: async (entity2, index2, items, config) => {
            if (entity2 && entities[entity2]) {
              return entities[entity2].hydrate(index2, items, {
                ...config,
                parse: void 0,
                hydrator: void 0,
                _isCollectionQuery: false,
                ignoreOwnership: config._providedIgnoreOwnership
              });
            }
            let entityItemRefs = {};
            for (let i = 0; i < items.length; i++) {
              const item = items[i];
              for (let entityName2 in entities) {
                entityItemRefs[entityName2] = entityItemRefs[entityName2] || [];
                const entity3 = entities[entityName2];
                if (entity3.ownsKeys(item)) {
                  entityItemRefs[entityName2].push({
                    item,
                    itemSlot: i
                  });
                }
              }
            }
            let unprocessed = [];
            let data = new Array(items.length).fill(null);
            for (const entityName2 in entityItemRefs) {
              const itemRefs = entityItemRefs[entityName2];
              const items2 = itemRefs.map((ref) => ref.item);
              const results = await entities[entity2].hydrate(index2, items2, {
                ...config,
                parse: void 0,
                hydrate: false,
                hydrator: void 0,
                _isCollectionQuery: false,
                ignoreOwnership: config._providedIgnoreOwnership
              });
              unprocessed = unprocessed.concat(results.unprocessed);
              if (results.data.length !== itemRefs.length) {
                throw new Error("Temporary: something wrong");
              }
              for (let r = 0; r < itemRefs.length; r++) {
                const itemRef = itemRefs[r];
                const hydrated = results.data[r];
                data[itemRef.itemSlot] = hydrated;
              }
            }
            return {
              data,
              unprocessed
            };
          }
        };
        return entity.collection(name, clauses2, facets, options);
      }
      _validateIndexCasingMatch(definition = {}, providedIndex = {}) {
        const definitionSk = definition.sk || {};
        const providedSk = providedIndex.sk || {};
        const pkCasingMatch = v.isMatchingCasing(definition.pk.casing, providedIndex.pk.casing);
        const skCasingMatch = v.isMatchingCasing(definitionSk.casing, providedSk.casing);
        return {
          pk: pkCasingMatch,
          sk: skCasingMatch
        };
      }
      _validateCollectionDefinition(definition = {}, providedIndex = {}) {
        let isCustomMatchPK = definition.pk.isCustom === providedIndex.pk.isCustom;
        let isCustomMatchSK = !!(definition.sk && definition.sk.isCustom) === !!(providedIndex.sk && providedIndex.sk.isCustom);
        let indexMatch = definition.index === providedIndex.index;
        let pkFieldMatch = definition.pk.field === providedIndex.pk.field;
        let pkFacetLengthMatch = definition.pk.facets.length === providedIndex.pk.facets.length;
        let mismatchedFacetLabels = [];
        let collectionDifferences = [];
        let definitionIndexName = u.formatIndexNameForDisplay(definition.index);
        let providedIndexName = u.formatIndexNameForDisplay(providedIndex.index);
        let matchingKeyCasing = this._validateIndexCasingMatch(definition, providedIndex);
        for (let i = 0; i < Math.max(definition.pk.labels.length, providedIndex.pk.labels.length); i++) {
          let definitionFacet = definition.pk.labels[i] && definition.pk.labels[i].name;
          let definitionLabel = definition.pk.labels[i] && definition.pk.labels[i].label;
          let providedFacet = providedIndex.pk.labels[i] && providedIndex.pk.labels[i].name;
          let providedLabel = providedIndex.pk.labels[i] && providedIndex.pk.labels[i].label;
          let noLabels = definitionLabel === definitionFacet && providedLabel === providedFacet;
          if (definitionLabel !== providedLabel) {
            mismatchedFacetLabels.push({
              definitionFacet,
              definitionLabel,
              providedFacet,
              providedLabel,
              kind: "Partition",
              type: noLabels ? "facet" : "label"
            });
            break;
          } else if (definitionFacet !== providedFacet) {
            mismatchedFacetLabels.push({
              definitionFacet,
              definitionLabel,
              providedFacet,
              providedLabel,
              kind: "Partition",
              type: "facet"
            });
            break;
          }
        }
        if (!isCustomMatchPK) {
          collectionDifferences.push(`The usage of key templates the partition key on index ${definitionIndexName} must be consistent across all Entities, some entities provided use template while others do not`);
        }
        if (!isCustomMatchSK) {
          collectionDifferences.push(`The usage of key templates the sort key on index ${definitionIndexName} must be consistent across all Entities, some entities provided use template while others do not`);
        }
        if (definition.type === "clustered") {
          for (let i = 0; i < Math.min(definition.sk.labels.length, providedIndex.sk.labels.length); i++) {
            let definitionFacet = definition.sk.labels[i] && definition.sk.labels[i].name;
            let definitionLabel = definition.sk.labels[i] && definition.sk.labels[i].label;
            let providedFacet = providedIndex.sk.labels[i] && providedIndex.sk.labels[i].name;
            let providedLabel = providedIndex.sk.labels[i] && providedIndex.sk.labels[i].label;
            let noLabels = definitionLabel === definitionFacet && providedLabel === providedFacet;
            if (definitionFacet === providedFacet) {
              if (definitionLabel !== providedLabel) {
                mismatchedFacetLabels.push({
                  definitionFacet,
                  definitionLabel,
                  providedFacet,
                  providedLabel,
                  kind: "Sort",
                  type: noLabels ? "facet" : "label"
                });
              }
            } else {
              break;
            }
          }
        }
        if (!matchingKeyCasing.pk) {
          collectionDifferences.push(
            `The pk property "casing" provided "${providedIndex.pk.casing || KeyCasing.default}" does not match established casing "${definition.pk.casing || KeyCasing.default}" on index "${providedIndexName}". Index casing options must match across all entities participating in a collection`
          );
        }
        if (!matchingKeyCasing.sk) {
          const definedSk = definition.sk || {};
          const providedSk = providedIndex.sk || {};
          collectionDifferences.push(
            `The sk property "casing" provided "${definedSk.casing || KeyCasing.default}" does not match established casing "${providedSk.casing || KeyCasing.default}" on index "${providedIndexName}". Index casing options must match across all entities participating in a collection`
          );
        }
        if (!indexMatch) {
          collectionDifferences.push(
            `Collection defined on provided index "${providedIndexName}" does not match collection established index "${definitionIndexName}". Collections must be defined on the same index across all entities within a service.`
          );
        } else if (!pkFieldMatch) {
          collectionDifferences.push(
            `Partition Key composite attributes provided "${providedIndex.pk.field}" for index "${providedIndexName}" do not match established field "${definition.pk.field}" on established index "${definitionIndexName}"`
          );
        }
        if (!pkFacetLengthMatch) {
          collectionDifferences.push(
            `Partition Key composite attributes provided [${providedIndex.pk.facets.map((val2) => `"${val2}"`).join(", ")}] for index "${providedIndexName}" do not match established composite attributes [${definition.pk.facets.map((val2) => `"${val2}"`).join(", ")}] on established index "${definitionIndexName}"`
          );
        } else if (mismatchedFacetLabels.length > 0) {
          for (let mismatch of mismatchedFacetLabels) {
            if (mismatch.type === "facet") {
              collectionDifferences.push(
                `${mismatch.kind} Key composite attributes provided for index "${providedIndexName}" do not match established composite attribute "${mismatch.definitionFacet}" on established index "${definitionIndexName}": "${mismatch.definitionLabel}" != "${mismatch.providedLabel}"; Composite attribute definitions must match between all members of a collection to ensure key structures will resolve to identical Partition Keys. Please ensure these composite attribute definitions are identical for all entities associated with this service.`
              );
            } else {
              collectionDifferences.push(
                `${mismatch.kind} Key composite attributes provided for index "${providedIndexName}" contain conflicting composite attribute labels for established composite attribute "${mismatch.definitionFacet || ""}" on established index "${definitionIndexName}". Established composite attribute "${mismatch.definitionFacet || ""}" on established index "${definitionIndexName}" was defined with label "${mismatch.definitionLabel}" while provided composite attribute "${mismatch.providedFacet || ""}" on provided index "${providedIndexName}" is defined with label "${mismatch.providedLabel}". Composite attribute labels definitions must match between all members of a collection to ensure key structures will resolve to identical Partition Keys. Please ensure these labels definitions are identical for all entities associated with this service.`
              );
            }
          }
        }
        return [!!collectionDifferences.length, collectionDifferences];
      }
      _compareEntityAttributes(entityName2, definition = {}, providedAttributes = {}, keys) {
        let results = {
          additions: {},
          invalid: []
        };
        for (let [name, detail] of Object.entries(providedAttributes)) {
          let defined = definition[name];
          if (defined === void 0) {
            results.additions[name] = detail;
          } else if (defined.field !== detail.field) {
            results.invalid.push(
              `The attribute "${name}" with Table Field "${detail.field}" does not match established Table Field "${defined.field}"`
            );
          }
          if (defined && detail && (defined.padding || detail.padding)) {
            const definedPadding = defined.padding || {};
            const detailPadding = detail.padding || {};
            if (keys.pk.facets.includes(name) && (definedPadding.length !== detailPadding.length || definedPadding.char !== detailPadding.char)) {
              results.invalid.push(
                `The attribute "${name}" contains inconsistent padding definitions that impact how keys are formed`
              );
            }
          }
        }
        return [!!results.invalid.length, results];
      }
      _processEntityAttributes(entityName2, definition = {}, providedAttributes = {}, keys) {
        let [attributesAreIncompatible, attributeResults] = this._compareEntityAttributes(entityName2, definition, providedAttributes, keys);
        if (attributesAreIncompatible) {
          throw new e.ElectroError(e.ErrorCodes.InvalidJoin, `Inconsistent attribute(s) on the entity "${entityName2}". The following attribute(s) are defined with incompatible or conflicting definitions across participating entities: ${attributeResults.invalid.join(", ")}. These attribute definitions must match among all members of the collection.`);
        } else {
          return {
            ...definition,
            ...attributeResults.additions
          };
        }
      }
      _processEntityKeys(name, definition = {}, providedIndex = {}) {
        if (!Object.keys(definition).length) {
          definition = providedIndex;
        }
        const [invalidDefinition, invalidIndexMessages] = this._validateCollectionDefinition(definition, providedIndex);
        if (invalidDefinition) {
          throw new e.ElectroError(e.ErrorCodes.InvalidJoin, `Validation Error while joining entity, "${name}". ${invalidIndexMessages.join("; ")}`);
        }
        const sharedSortKeyAttributes = [];
        const sharedSortKeyCompositeAttributeLabels = [];
        const sharedSortKeyLabels = [];
        if (providedIndex.hasSk && definition.hasSk && Array.isArray(definition.sk.labels)) {
          for (let i = 0; i < definition.sk.labels.length; i++) {
            const providedLabels = providedIndex.sk.labels[i];
            const definedLabels = definition.sk.labels[i];
            const namesMatch = providedLabels && providedLabels.name === definedLabels.name;
            const labelsMatch = providedLabels && providedLabels.label === definedLabels.label;
            if (!namesMatch || !labelsMatch) {
              break;
            }
            sharedSortKeyLabels.push({ ...definedLabels });
            sharedSortKeyCompositeAttributeLabels.push({ ...definition.sk.facetLabels[i] });
            sharedSortKeyAttributes.push(definition.sk.facets[i]);
          }
        }
        return {
          ...definition,
          sk: {
            ...definition.sk,
            facets: sharedSortKeyAttributes,
            facetLabels: sharedSortKeyCompositeAttributeLabels,
            labels: sharedSortKeyLabels
          }
        };
      }
      _getEntityIndexFromCollectionName(collection, entity) {
        for (let index of Object.values(entity.model.indexes)) {
          let names = [];
          if (v.isArrayHasLength(index.collection)) {
            names = index.collection;
          } else {
            names.push(index.collection);
          }
          for (let name of names) {
            if (v.isStringHasLength(name) && name === collection) {
              return index;
            }
          }
        }
        return Object.values(entity.model.indexes).find(
          (index) => {
            if (v.isStringHasLength(index.collection)) {
              return index.collection === collection;
            } else if (v.isArrayHasLength(index.collection)) {
              return index.collection.indexOf(collection) > 0;
            }
          }
        );
      }
      _processSubCollections(providedType, existing, provided, entityName2, collectionName) {
        let existingSubCollections;
        let providedSubCollections;
        if (v.isArrayHasLength(existing)) {
          existingSubCollections = existing;
        } else {
          existingSubCollections = [existing];
        }
        if (v.isArrayHasLength(provided)) {
          providedSubCollections = provided;
        } else {
          providedSubCollections = [provided];
        }
        if (providedSubCollections.length > 1 && providedType === IndexTypes.clustered) {
          throw new e.ElectroError(e.ErrorCodes.InvalidJoin, `Clustered indexes do not support sub-collections. The sub-collection "${collectionName}", on Entity "${entityName2}" must be defined as either an individual collection name or the index must be redefined as an isolated cluster`);
        }
        const existingRequiredIndex = existingSubCollections.indexOf(collectionName);
        const providedRequiredIndex = providedSubCollections.indexOf(collectionName);
        if (providedRequiredIndex < 0) {
          throw new e.ElectroError(e.ErrorCodes.InvalidJoin, `The collection definition for Collection "${collectionName}" does not exist on Entity "${entityName2}".`);
        }
        if (existingRequiredIndex >= 0 && existingRequiredIndex !== providedRequiredIndex) {
          throw new e.ElectroError(e.ErrorCodes.InvalidJoin, `The collection definition for Collection "${collectionName}", on Entity "${entityName2}", does not match the established sub-collection order for this service. The collection name provided in slot ${providedRequiredIndex + 1}, ${providedSubCollections[existingRequiredIndex] === void 0 ? "(not found)" : `"${providedSubCollections[existingRequiredIndex]}"`}, on Entity "${entityName2}", does not match the established collection name in slot ${existingRequiredIndex + 1}, "${collectionName}". When using sub-collections, all Entities within a Service must must implement the same order for all preceding sub-collections.`);
        }
        let length = Math.max(existingRequiredIndex, providedRequiredIndex);
        for (let i = 0; i <= length; i++) {
          let existingCollection = existingSubCollections[i];
          let providedCollection = providedSubCollections[i];
          if (v.isStringHasLength(existingCollection)) {
            if (existingCollection === providedCollection && providedCollection === collectionName) {
              return i;
            }
            if (existingCollection !== providedCollection) {
              throw new e.ElectroError(e.ErrorCodes.InvalidJoin, `The collection definition for Collection "${collectionName}", on Entity "${entityName2}", does not match the established sub-collection order for this service. The collection name provided in slot ${i + 1}, "${providedCollection}", on Entity "${entityName2}", does not match the established collection name in slot ${i + 1}, "${existingCollection}". When using sub-collections, all Entities within a Service must must implement the same order for all preceding sub-collections.`);
            }
          } else if (v.isStringHasLength(providedCollection)) {
            if (providedCollection === collectionName) {
              return i;
            }
          }
        }
      }
      _addCollectionEntity(collection = "", name = "", entity = {}) {
        let providedIndex = this._getEntityIndexFromCollectionName(
          collection,
          entity
        );
        this.collectionSchema[collection] = this.collectionSchema[collection] || {
          entities: {},
          keys: {},
          attributes: {},
          identifiers: {
            names: {},
            values: {},
            expression: ""
          },
          index: void 0,
          table: "",
          collection: [],
          indexType: void 0,
          hasSubCollections: void 0
        };
        const providedType = providedIndex.type || IndexTypes.isolated;
        if (this.collectionSchema[collection].indexType === void 0) {
          this.collectionSchema[collection].indexType = providedType;
        } else if (this.collectionSchema[collection].indexType !== providedType) {
          throw new e.ElectroError(e.ErrorCodes.InvalidJoin, `Index type mismatch on collection ${collection}. The entity ${name} defines the index as type ${providedType} while the established type for that index is ${this.collectionSchema[collection].indexType}. Note that when omitted, indexes default to the type "${IndexTypes.isolated}"`);
        }
        if (this.collectionSchema[collection].entities[name] !== void 0) {
          throw new e.ElectroError(e.ErrorCodes.InvalidJoin, `Entity with name '${name}' has already been joined to this service.`);
        }
        if (this.collectionSchema[collection].table !== "") {
          if (this.collectionSchema[collection].table !== entity.getTableName()) {
            throw new e.ElectroError(e.ErrorCodes.InvalidJoin, `Entity with name '${name}' is defined to use a different Table than what is defined on other Service Entities and/or the Service itself. Entity '${name}' is defined with table name '${entity.getTableName()}' but the Service has been defined to use table name '${this.collectionSchema[collection].table}'. All Entities in a Service must reference the same DynamoDB table. To ensure all Entities will use the same DynamoDB table, it is possible to apply the property 'table' to the Service constructor's configuration parameter.`);
          }
        } else {
          this.collectionSchema[collection].table = entity.getTableName();
        }
        this.collectionSchema[collection].keys = this._processEntityKeys(name, this.collectionSchema[collection].keys, providedIndex);
        this.collectionSchema[collection].attributes = this._processEntityAttributes(name, this.collectionSchema[collection].attributes, entity.model.schema.attributes, this.collectionSchema[collection].keys);
        this.collectionSchema[collection].entities[name] = entity;
        this.collectionSchema[collection].identifiers = this._processEntityIdentifiers(this.collectionSchema[collection].identifiers, entity.getIdentifierExpressions(name));
        this.collectionSchema[collection].index = this._processEntityCollectionIndex(this.collectionSchema[collection].index, providedIndex.index, name, collection);
        let collectionIndex = this._processSubCollections(
          providedType,
          this.collectionSchema[collection].collection,
          providedIndex.collection,
          name,
          collection
        );
        this.collectionSchema[collection].collection[collectionIndex] = collection;
        this.collectionSchema[collection].hasSubCollections = this.collectionSchema[collection].hasSubCollections || Array.isArray(providedIndex.collection);
        return this.collectionSchema[collection];
      }
      _processEntityCollectionIndex(existing, provided, name, collection) {
        if (typeof provided !== "string") {
          throw new e.ElectroError(e.ErrorCodes.InvalidJoin, `Entity with name '${name}' does not have collection ${collection} defined on it's model`);
        } else if (existing === void 0) {
          return provided;
        } else if (provided !== existing) {
          throw new e.ElectroError(e.ErrorCodes.InvalidJoin, `Entity with name '${name}' defines collection ${collection} on index `);
        } else {
          return existing;
        }
      }
      _processEntityIdentifiers(existing = {}, { names, values, expression } = {}) {
        let identifiers = {};
        if (names) {
          identifiers.names = Object.assign({}, existing.names, names);
        }
        if (values) {
          identifiers.values = Object.assign({}, existing.values, values);
        }
        if (expression) {
          identifiers.expression = [existing.expression, expression].filter(Boolean).join(" OR ");
        }
        return identifiers;
      }
    };
    module2.exports = {
      Service: Service2
    };
  }
});

// node_modules/electrodb/index.js
var require_electrodb = __commonJS({
  "node_modules/electrodb/index.js"(exports, module2) {
    var { Entity: Entity2 } = require_entity();
    var { Service: Service2 } = require_service();
    var { createGetTransaction, createWriteTransaction } = require_transaction();
    var { createCustomAttribute, CustomAttributeType, createSchema } = require_schema();
    var { ElectroError, ElectroValidationError, ElectroUserValidationError, ElectroAttributeValidationError } = require_errors();
    module2.exports = {
      Entity: Entity2,
      Service: Service2,
      ElectroError,
      createSchema,
      CustomAttributeType,
      createCustomAttribute,
      ElectroValidationError,
      createGetTransaction,
      createWriteTransaction
    };
  }
});

// node_modules/@aws-lambda-powertools/logger/lib/helpers.js
var require_helpers2 = __commonJS({
  "node_modules/@aws-lambda-powertools/logger/lib/helpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createLogger = void 0;
    var _1 = require_lib4();
    var createLogger = (options = {}) => new _1.Logger(options);
    exports.createLogger = createLogger;
  }
});

// node_modules/@aws-lambda-powertools/commons/lib/utils/lambda/LambdaInterface.js
var require_LambdaInterface = __commonJS({
  "node_modules/@aws-lambda-powertools/commons/lib/utils/lambda/LambdaInterface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-lambda-powertools/commons/lib/utils/lambda/index.js
var require_lambda = __commonJS({
  "node_modules/@aws-lambda-powertools/commons/lib/utils/lambda/index.js"(exports) {
    "use strict";
    var __createBinding3 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar3 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding3(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar3(require_LambdaInterface(), exports);
  }
});

// node_modules/@aws-lambda-powertools/commons/lib/Utility.js
var require_Utility = __commonJS({
  "node_modules/@aws-lambda-powertools/commons/lib/Utility.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Utility = void 0;
    var Utility = class {
      constructor() {
        this.coldStart = true;
        this.defaultServiceName = "service_undefined";
      }
      getColdStart() {
        if (this.coldStart) {
          this.coldStart = false;
          return true;
        }
        return false;
      }
      isColdStart() {
        return this.getColdStart();
      }
      getDefaultServiceName() {
        return this.defaultServiceName;
      }
      isValidServiceName(serviceName2) {
        return typeof serviceName2 === "string" && serviceName2.trim().length > 0;
      }
    };
    exports.Utility = Utility;
  }
});

// node_modules/@aws-lambda-powertools/commons/lib/config/ConfigService.js
var require_ConfigService = __commonJS({
  "node_modules/@aws-lambda-powertools/commons/lib/config/ConfigService.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConfigService = void 0;
    var ConfigService = class {
    };
    exports.ConfigService = ConfigService;
  }
});

// node_modules/@aws-lambda-powertools/commons/lib/config/EnvironmentVariablesService.js
var require_EnvironmentVariablesService = __commonJS({
  "node_modules/@aws-lambda-powertools/commons/lib/config/EnvironmentVariablesService.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EnvironmentVariablesService = void 0;
    var ConfigService_1 = require_ConfigService();
    var EnvironmentVariablesService = class extends ConfigService_1.ConfigService {
      constructor() {
        super(...arguments);
        this.serviceNameVariable = "POWERTOOLS_SERVICE_NAME";
        this.xRayTraceIdVariable = "_X_AMZN_TRACE_ID";
      }
      get(name) {
        return process.env[name]?.trim() || "";
      }
      getServiceName() {
        return this.get(this.serviceNameVariable);
      }
      getXrayTraceId() {
        const xRayTraceData = this.getXrayTraceData();
        return xRayTraceData?.Root;
      }
      getXrayTraceSampled() {
        const xRayTraceData = this.getXrayTraceData();
        return xRayTraceData?.Sampled === "1";
      }
      isValueTrue(value) {
        const truthyValues = ["1", "y", "yes", "t", "true", "on"];
        return truthyValues.includes(value.toLowerCase());
      }
      getXrayTraceData() {
        const xRayTraceEnv = this.get(this.xRayTraceIdVariable);
        if (xRayTraceEnv === "")
          return void 0;
        if (!xRayTraceEnv.includes("="))
          return { Root: xRayTraceEnv };
        const xRayTraceData = {};
        xRayTraceEnv.split(";").forEach((field) => {
          const [key, value] = field.split("=");
          xRayTraceData[key] = value;
        });
        return xRayTraceData;
      }
    };
    exports.EnvironmentVariablesService = EnvironmentVariablesService;
  }
});

// node_modules/@aws-lambda-powertools/commons/lib/config/index.js
var require_config5 = __commonJS({
  "node_modules/@aws-lambda-powertools/commons/lib/config/index.js"(exports) {
    "use strict";
    var __createBinding3 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar3 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding3(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar3(require_ConfigService(), exports);
    __exportStar3(require_EnvironmentVariablesService(), exports);
  }
});

// node_modules/@aws-lambda-powertools/commons/lib/samples/resources/contexts/hello-world.js
var require_hello_world = __commonJS({
  "node_modules/@aws-lambda-powertools/commons/lib/samples/resources/contexts/hello-world.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.helloworldContext = void 0;
    var helloworldContext = {
      callbackWaitsForEmptyEventLoop: true,
      functionVersion: "$LATEST",
      functionName: "foo-bar-function",
      memoryLimitInMB: "128",
      logGroupName: "/aws/lambda/foo-bar-function-123456abcdef",
      logStreamName: "2021/03/09/[$LATEST]abcdef123456abcdef123456abcdef123456",
      invokedFunctionArn: "arn:aws:lambda:eu-west-1:123456789012:function:foo-bar-function",
      awsRequestId: "c6af9ac6-7b61-11e6-9a41-93e812345678",
      getRemainingTimeInMillis: () => 1234,
      done: () => console.log("Done!"),
      fail: () => console.log("Failed!"),
      succeed: () => console.log("Succeeded!")
    };
    exports.helloworldContext = helloworldContext;
  }
});

// node_modules/@aws-lambda-powertools/commons/lib/samples/resources/contexts/index.js
var require_contexts = __commonJS({
  "node_modules/@aws-lambda-powertools/commons/lib/samples/resources/contexts/index.js"(exports) {
    "use strict";
    var __createBinding3 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar3 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding3(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar3(require_hello_world(), exports);
  }
});

// node_modules/@aws-lambda-powertools/commons/lib/samples/resources/events/custom/index.js
var require_custom = __commonJS({
  "node_modules/@aws-lambda-powertools/commons/lib/samples/resources/events/custom/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomEvent = void 0;
    exports.CustomEvent = {
      key1: "value1",
      key2: "value2",
      key3: "value3"
    };
  }
});

// node_modules/@aws-lambda-powertools/commons/lib/samples/resources/events/index.js
var require_events2 = __commonJS({
  "node_modules/@aws-lambda-powertools/commons/lib/samples/resources/events/index.js"(exports) {
    "use strict";
    var __createBinding3 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar3 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding3(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Custom = void 0;
    exports.Custom = __importStar3(require_custom());
  }
});

// node_modules/@aws-lambda-powertools/commons/lib/types/middy.js
var require_middy = __commonJS({
  "node_modules/@aws-lambda-powertools/commons/lib/types/middy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-lambda-powertools/commons/lib/types/utils.js
var require_utils4 = __commonJS({
  "node_modules/@aws-lambda-powertools/commons/lib/types/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isNullOrUndefined = exports.isTruthy = exports.isString = exports.isRecord = void 0;
    var isRecord = (value) => {
      return Object.prototype.toString.call(value) === "[object Object]" && !Object.is(value, null);
    };
    exports.isRecord = isRecord;
    var isTruthy = (value) => {
      if (typeof value === "string") {
        return value !== "";
      } else if (typeof value === "number") {
        return value !== 0;
      } else if (typeof value === "boolean") {
        return value;
      } else if (Array.isArray(value)) {
        return value.length > 0;
      } else if (isRecord(value)) {
        return Object.keys(value).length > 0;
      } else {
        return false;
      }
    };
    exports.isTruthy = isTruthy;
    var isNullOrUndefined = (value) => {
      return Object.is(value, null) || Object.is(value, void 0);
    };
    exports.isNullOrUndefined = isNullOrUndefined;
    var isString = (value) => {
      return typeof value === "string";
    };
    exports.isString = isString;
  }
});

// node_modules/@aws-lambda-powertools/commons/lib/version.js
var require_version = __commonJS({
  "node_modules/@aws-lambda-powertools/commons/lib/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PT_VERSION = void 0;
    exports.PT_VERSION = "1.13.1";
  }
});

// node_modules/@aws-lambda-powertools/commons/lib/awsSdk/utils.js
var require_utils5 = __commonJS({
  "node_modules/@aws-lambda-powertools/commons/lib/awsSdk/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSdkClient = void 0;
    var isSdkClient = (client) => typeof client === "object" && client !== null && "send" in client && typeof client.send === "function" && "config" in client && client.config !== void 0 && typeof client.config === "object" && client.config !== null && "middlewareStack" in client && client.middlewareStack !== void 0 && typeof client.middlewareStack === "object" && client.middlewareStack !== null && "identify" in client.middlewareStack && typeof client.middlewareStack.identify === "function" && "addRelativeTo" in client.middlewareStack && typeof client.middlewareStack.addRelativeTo === "function";
    exports.isSdkClient = isSdkClient;
  }
});

// node_modules/@aws-lambda-powertools/commons/lib/awsSdk/userAgentMiddleware.js
var require_userAgentMiddleware = __commonJS({
  "node_modules/@aws-lambda-powertools/commons/lib/awsSdk/userAgentMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addUserAgentMiddleware = exports.customUserAgentMiddleware = void 0;
    var version_1 = require_version();
    var utils_1 = require_utils5();
    var EXEC_ENV = process.env.AWS_EXECUTION_ENV || "NA";
    var middlewareOptions = {
      relation: "after",
      toMiddleware: "getUserAgentMiddleware",
      name: "addPowertoolsToUserAgent",
      tags: ["POWERTOOLS", "USER_AGENT"]
    };
    var customUserAgentMiddleware = (feature) => {
      return (next) => async (args) => {
        const powertoolsUserAgent = `PT/${feature}/${version_1.PT_VERSION} PTEnv/${EXEC_ENV}`;
        args.request.headers["user-agent"] = `${args.request.headers["user-agent"]} ${powertoolsUserAgent}`;
        return await next(args);
      };
    };
    exports.customUserAgentMiddleware = customUserAgentMiddleware;
    var addUserAgentMiddleware = (client, feature) => {
      try {
        if ((0, utils_1.isSdkClient)(client)) {
          if (client.middlewareStack.identify().includes("addPowertoolsToUserAgent: POWERTOOLS,USER_AGENT")) {
            return;
          }
          client.middlewareStack.addRelativeTo(customUserAgentMiddleware(feature), middlewareOptions);
        } else {
          throw new Error(`The client provided does not match the expected interface`);
        }
      } catch (e) {
        console.warn("Failed to add user agent middleware", e);
      }
    };
    exports.addUserAgentMiddleware = addUserAgentMiddleware;
  }
});

// node_modules/@aws-lambda-powertools/commons/lib/awsSdk/index.js
var require_awsSdk = __commonJS({
  "node_modules/@aws-lambda-powertools/commons/lib/awsSdk/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSdkClient = exports.addUserAgentMiddleware = void 0;
    var userAgentMiddleware_1 = require_userAgentMiddleware();
    Object.defineProperty(exports, "addUserAgentMiddleware", { enumerable: true, get: function() {
      return userAgentMiddleware_1.addUserAgentMiddleware;
    } });
    var utils_1 = require_utils5();
    Object.defineProperty(exports, "isSdkClient", { enumerable: true, get: function() {
      return utils_1.isSdkClient;
    } });
  }
});

// node_modules/@aws-lambda-powertools/commons/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/@aws-lambda-powertools/commons/lib/index.js"(exports) {
    "use strict";
    var __createBinding3 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __exportStar3 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding3(exports2, m, p);
    };
    var __importStar3 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding3(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Events = exports.ContextExamples = void 0;
    __exportStar3(require_lambda(), exports);
    __exportStar3(require_Utility(), exports);
    __exportStar3(require_config5(), exports);
    exports.ContextExamples = __importStar3(require_contexts());
    exports.Events = __importStar3(require_events2());
    __exportStar3(require_middy(), exports);
    __exportStar3(require_utils4(), exports);
    __exportStar3(require_awsSdk(), exports);
  }
});

// node_modules/@aws-lambda-powertools/logger/lib/formatter/LogFormatter.js
var require_LogFormatter = __commonJS({
  "node_modules/@aws-lambda-powertools/logger/lib/formatter/LogFormatter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogFormatter = void 0;
    var isErrorWithCause = (error) => {
      return "cause" in error;
    };
    var LogFormatter = class {
      formatError(error) {
        return {
          name: error.name,
          location: this.getCodeLocation(error.stack),
          message: error.message,
          stack: error.stack,
          cause: isErrorWithCause(error) ? error.cause instanceof Error ? this.formatError(error.cause) : error.cause : void 0
        };
      }
      formatTimestamp(now) {
        return now.toISOString();
      }
      getCodeLocation(stack) {
        if (!stack) {
          return "";
        }
        const stackLines = stack.split("\n");
        const regex = /\((.*):(\d+):(\d+)\)\\?$/;
        let i;
        for (i = 0; i < stackLines.length; i++) {
          const match = regex.exec(stackLines[i]);
          if (Array.isArray(match)) {
            return `${match[1]}:${Number(match[2])}`;
          }
        }
        return "";
      }
    };
    exports.LogFormatter = LogFormatter;
  }
});

// node_modules/@aws-lambda-powertools/logger/lib/formatter/LogFormatterInterface.js
var require_LogFormatterInterface = __commonJS({
  "node_modules/@aws-lambda-powertools/logger/lib/formatter/LogFormatterInterface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-lambda-powertools/logger/lib/formatter/PowertoolLogFormatter.js
var require_PowertoolLogFormatter = __commonJS({
  "node_modules/@aws-lambda-powertools/logger/lib/formatter/PowertoolLogFormatter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PowertoolLogFormatter = void 0;
    var _1 = require_formatter();
    var PowertoolLogFormatter = class extends _1.LogFormatter {
      formatAttributes(attributes2) {
        return {
          cold_start: attributes2.lambdaContext?.coldStart,
          function_arn: attributes2.lambdaContext?.invokedFunctionArn,
          function_memory_size: attributes2.lambdaContext?.memoryLimitInMB,
          function_name: attributes2.lambdaContext?.functionName,
          function_request_id: attributes2.lambdaContext?.awsRequestId,
          level: attributes2.logLevel,
          message: attributes2.message,
          sampling_rate: attributes2.sampleRateValue,
          service: attributes2.serviceName,
          timestamp: this.formatTimestamp(attributes2.timestamp),
          xray_trace_id: attributes2.xRayTraceId
        };
      }
    };
    exports.PowertoolLogFormatter = PowertoolLogFormatter;
  }
});

// node_modules/@aws-lambda-powertools/logger/lib/formatter/index.js
var require_formatter = __commonJS({
  "node_modules/@aws-lambda-powertools/logger/lib/formatter/index.js"(exports) {
    "use strict";
    var __createBinding3 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar3 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding3(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar3(require_LogFormatter(), exports);
    __exportStar3(require_LogFormatterInterface(), exports);
    __exportStar3(require_PowertoolLogFormatter(), exports);
  }
});

// node_modules/lodash.merge/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.merge/index.js"(exports, module2) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var objectCtorString = funcToString.call(Object);
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var Symbol2 = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectCreate = Object.create;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var nativeMax = Math.max;
    var nativeNow = Date.now;
    var Map2 = getNative(root, "Map");
    var nativeCreate = getNative(Object, "create");
    var baseCreate = function() {
      function object() {
      }
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    var baseFor = createBaseFor();
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + "");
    }
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
        return eq(object[index], value);
      }
      return false;
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function overRest(func, start, transform) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    var setToString = shortOut(baseSetToString);
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    function constant(value) {
      return function() {
        return value;
      };
    }
    function identity(value) {
      return value;
    }
    function stubFalse() {
      return false;
    }
    module2.exports = merge;
  }
});

// node_modules/@aws-lambda-powertools/logger/lib/log/LogItem.js
var require_LogItem = __commonJS({
  "node_modules/@aws-lambda-powertools/logger/lib/log/LogItem.js"(exports) {
    "use strict";
    var __importDefault3 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogItem = void 0;
    var lodash_merge_1 = __importDefault3(require_lodash());
    var LogItem = class {
      constructor(params) {
        this.attributes = {};
        this.addAttributes(params.baseAttributes);
        this.addAttributes(params.persistentAttributes);
      }
      addAttributes(attributes2) {
        this.attributes = (0, lodash_merge_1.default)(this.attributes, attributes2);
        return this;
      }
      getAttributes() {
        return this.attributes;
      }
      prepareForPrint() {
        this.setAttributes(this.removeEmptyKeys(this.getAttributes()));
      }
      removeEmptyKeys(attributes2) {
        const newAttributes = {};
        for (const key in attributes2) {
          if (attributes2[key] !== void 0 && attributes2[key] !== "" && attributes2[key] !== null) {
            newAttributes[key] = attributes2[key];
          }
        }
        return newAttributes;
      }
      setAttributes(attributes2) {
        this.attributes = attributes2;
      }
    };
    exports.LogItem = LogItem;
  }
});

// node_modules/@aws-lambda-powertools/logger/lib/log/LogItemInterface.js
var require_LogItemInterface = __commonJS({
  "node_modules/@aws-lambda-powertools/logger/lib/log/LogItemInterface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-lambda-powertools/logger/lib/log/index.js
var require_log = __commonJS({
  "node_modules/@aws-lambda-powertools/logger/lib/log/index.js"(exports) {
    "use strict";
    var __createBinding3 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar3 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding3(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar3(require_LogItem(), exports);
    __exportStar3(require_LogItemInterface(), exports);
  }
});

// node_modules/@aws-lambda-powertools/logger/lib/config/ConfigServiceInterface.js
var require_ConfigServiceInterface = __commonJS({
  "node_modules/@aws-lambda-powertools/logger/lib/config/ConfigServiceInterface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-lambda-powertools/logger/lib/config/EnvironmentVariablesService.js
var require_EnvironmentVariablesService2 = __commonJS({
  "node_modules/@aws-lambda-powertools/logger/lib/config/EnvironmentVariablesService.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EnvironmentVariablesService = void 0;
    var commons_1 = require_lib3();
    var EnvironmentVariablesService = class extends commons_1.EnvironmentVariablesService {
      constructor() {
        super(...arguments);
        this.awsRegionVariable = "AWS_REGION";
        this.currentEnvironmentVariable = "ENVIRONMENT";
        this.devModeVariable = "POWERTOOLS_DEV";
        this.functionNameVariable = "AWS_LAMBDA_FUNCTION_NAME";
        this.functionVersionVariable = "AWS_LAMBDA_FUNCTION_VERSION";
        this.logEventVariable = "POWERTOOLS_LOGGER_LOG_EVENT";
        this.logLevelVariable = "LOG_LEVEL";
        this.memoryLimitInMBVariable = "AWS_LAMBDA_FUNCTION_MEMORY_SIZE";
        this.sampleRateValueVariable = "POWERTOOLS_LOGGER_SAMPLE_RATE";
      }
      getAwsRegion() {
        return this.get(this.awsRegionVariable);
      }
      getCurrentEnvironment() {
        return this.get(this.currentEnvironmentVariable);
      }
      getFunctionMemory() {
        const value = this.get(this.memoryLimitInMBVariable);
        return Number(value);
      }
      getFunctionName() {
        return this.get(this.functionNameVariable);
      }
      getFunctionVersion() {
        return this.get(this.functionVersionVariable);
      }
      getLogEvent() {
        const value = this.get(this.logEventVariable);
        return this.isValueTrue(value);
      }
      getLogLevel() {
        return this.get(this.logLevelVariable);
      }
      getSampleRateValue() {
        const value = this.get(this.sampleRateValueVariable);
        return value && value.length > 0 ? Number(value) : void 0;
      }
      isDevMode() {
        const value = this.get(this.devModeVariable);
        return this.isValueTrue(value);
      }
    };
    exports.EnvironmentVariablesService = EnvironmentVariablesService;
  }
});

// node_modules/@aws-lambda-powertools/logger/lib/config/index.js
var require_config6 = __commonJS({
  "node_modules/@aws-lambda-powertools/logger/lib/config/index.js"(exports) {
    "use strict";
    var __createBinding3 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar3 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding3(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar3(require_ConfigServiceInterface(), exports);
    __exportStar3(require_EnvironmentVariablesService2(), exports);
  }
});

// node_modules/@aws-lambda-powertools/logger/lib/Logger.js
var require_Logger = __commonJS({
  "node_modules/@aws-lambda-powertools/logger/lib/Logger.js"(exports) {
    "use strict";
    var __importDefault3 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Logger = void 0;
    var node_crypto_1 = require("node:crypto");
    var node_console_1 = require("node:console");
    var commons_1 = require_lib3();
    var formatter_1 = require_formatter();
    var log_1 = require_log();
    var lodash_merge_1 = __importDefault3(require_lodash());
    var config_1 = require_config6();
    var Logger2 = class _Logger extends commons_1.Utility {
      get level() {
        return this.logLevel;
      }
      constructor(options = {}) {
        super();
        this.logEvent = false;
        this.logIndentation = 0;
        this.logLevel = 12;
        this.logLevelThresholds = {
          DEBUG: 8,
          INFO: 12,
          WARN: 16,
          ERROR: 20,
          CRITICAL: 24,
          SILENT: 28
        };
        this.logsSampled = false;
        this.persistentLogAttributes = {};
        this.powertoolLogData = {};
        this.setOptions(options);
      }
      addContext(context) {
        const lambdaContext = {
          invokedFunctionArn: context.invokedFunctionArn,
          coldStart: this.getColdStart(),
          awsRequestId: context.awsRequestId,
          memoryLimitInMB: Number(context.memoryLimitInMB),
          functionName: context.functionName,
          functionVersion: context.functionVersion
        };
        this.addToPowertoolLogData({
          lambdaContext
        });
      }
      addPersistentLogAttributes(attributes2) {
        (0, lodash_merge_1.default)(this.persistentLogAttributes, attributes2);
      }
      appendKeys(attributes2) {
        this.addPersistentLogAttributes(attributes2);
      }
      createChild(options = {}) {
        const parentsOptions = {
          logLevel: this.getLevelName(),
          customConfigService: this.getCustomConfigService(),
          logFormatter: this.getLogFormatter()
        };
        const parentsPowertoolsLogData = this.getPowertoolLogData();
        const childLogger = this.createLogger((0, lodash_merge_1.default)(parentsOptions, parentsPowertoolsLogData, options));
        const parentsPersistentLogAttributes = this.getPersistentLogAttributes();
        childLogger.addPersistentLogAttributes(parentsPersistentLogAttributes);
        if (parentsPowertoolsLogData.lambdaContext) {
          childLogger.addContext(parentsPowertoolsLogData.lambdaContext);
        }
        return childLogger;
      }
      critical(input, ...extraInput) {
        this.processLogItem(24, input, extraInput);
      }
      debug(input, ...extraInput) {
        this.processLogItem(8, input, extraInput);
      }
      error(input, ...extraInput) {
        this.processLogItem(20, input, extraInput);
      }
      getLevelName() {
        return this.getLogLevelNameFromNumber(this.logLevel);
      }
      getLogEvent() {
        return this.logEvent;
      }
      getLogsSampled() {
        return this.logsSampled;
      }
      getPersistentLogAttributes() {
        return this.persistentLogAttributes;
      }
      info(input, ...extraInput) {
        this.processLogItem(12, input, extraInput);
      }
      injectLambdaContext(options) {
        return (_target, _propertyKey, descriptor) => {
          const originalMethod = descriptor.value;
          const loggerRef = this;
          descriptor.value = async function(event, context, callback) {
            let initialPersistentAttributes = {};
            if (options && options.clearState === true) {
              initialPersistentAttributes = {
                ...loggerRef.getPersistentLogAttributes()
              };
            }
            _Logger.injectLambdaContextBefore(loggerRef, event, context, options);
            let result;
            try {
              result = await originalMethod.apply(this, [event, context, callback]);
            } catch (error) {
              throw error;
            } finally {
              _Logger.injectLambdaContextAfterOrOnError(loggerRef, initialPersistentAttributes, options);
            }
            return result;
          };
        };
      }
      static injectLambdaContextAfterOrOnError(logger2, initialPersistentAttributes, options) {
        if (options && options.clearState === true) {
          logger2.setPersistentLogAttributes(initialPersistentAttributes);
        }
      }
      static injectLambdaContextBefore(logger2, event, context, options) {
        logger2.addContext(context);
        let shouldLogEvent = void 0;
        if (options && options.hasOwnProperty("logEvent")) {
          shouldLogEvent = options.logEvent;
        }
        logger2.logEventIfEnabled(event, shouldLogEvent);
      }
      logEventIfEnabled(event, overwriteValue) {
        if (!this.shouldLogEvent(overwriteValue)) {
          return;
        }
        this.info("Lambda invocation event", { event });
      }
      refreshSampleRateCalculation() {
        this.setLogsSampled();
      }
      removeKeys(keys) {
        this.removePersistentLogAttributes(keys);
      }
      removePersistentLogAttributes(keys) {
        keys.forEach((key) => {
          if (this.persistentLogAttributes && key in this.persistentLogAttributes) {
            delete this.persistentLogAttributes[key];
          }
        });
      }
      setLogLevel(logLevel) {
        if (this.isValidLogLevel(logLevel)) {
          this.logLevel = this.logLevelThresholds[logLevel];
        } else {
          throw new Error(`Invalid log level: ${logLevel}`);
        }
      }
      setPersistentLogAttributes(attributes2) {
        this.persistentLogAttributes = attributes2;
      }
      setSampleRateValue(sampleRateValue) {
        this.powertoolLogData.sampleRateValue = sampleRateValue || this.getCustomConfigService()?.getSampleRateValue() || this.getEnvVarsService().getSampleRateValue();
      }
      shouldLogEvent(overwriteValue) {
        if (typeof overwriteValue === "boolean") {
          return overwriteValue;
        }
        return this.getLogEvent();
      }
      warn(input, ...extraInput) {
        this.processLogItem(16, input, extraInput);
      }
      createLogger(options) {
        return new _Logger(options);
      }
      shouldPrint(logLevel) {
        if (logLevel >= this.logLevel) {
          return true;
        }
        return this.getLogsSampled();
      }
      addToPowertoolLogData(...attributesArray) {
        attributesArray.forEach((attributes2) => {
          (0, lodash_merge_1.default)(this.powertoolLogData, attributes2);
        });
      }
      createAndPopulateLogItem(logLevel, input, extraInput) {
        const unformattedBaseAttributes = (0, lodash_merge_1.default)({
          logLevel: this.getLogLevelNameFromNumber(logLevel),
          timestamp: /* @__PURE__ */ new Date(),
          message: typeof input === "string" ? input : input.message,
          xRayTraceId: this.envVarsService.getXrayTraceId()
        }, this.getPowertoolLogData());
        const logItem = new log_1.LogItem({
          baseAttributes: this.getLogFormatter().formatAttributes(unformattedBaseAttributes),
          persistentAttributes: this.getPersistentLogAttributes()
        });
        if (typeof input !== "string") {
          logItem.addAttributes(input);
        }
        extraInput.forEach((item) => {
          const attributes2 = item instanceof Error ? { error: item } : typeof item === "string" ? { extra: item } : item;
          logItem.addAttributes(attributes2);
        });
        return logItem;
      }
      getCustomConfigService() {
        return this.customConfigService;
      }
      getEnvVarsService() {
        return this.envVarsService;
      }
      getLogFormatter() {
        return this.logFormatter;
      }
      getLogLevelNameFromNumber(logLevel) {
        const found = Object.entries(this.logLevelThresholds).find(([key, value]) => {
          if (value === logLevel) {
            return key;
          }
        });
        return found[0];
      }
      getPowertoolLogData() {
        return this.powertoolLogData;
      }
      getReplacer() {
        const references = /* @__PURE__ */ new WeakSet();
        return (key, value) => {
          let item = value;
          if (item instanceof Error) {
            item = this.getLogFormatter().formatError(item);
          }
          if (typeof item === "bigint") {
            return item.toString();
          }
          if (typeof item === "object" && value !== null) {
            if (references.has(item)) {
              return;
            }
            references.add(item);
          }
          return item;
        };
      }
      getSampleRateValue() {
        if (!this.powertoolLogData.sampleRateValue) {
          this.setSampleRateValue();
        }
        return this.powertoolLogData.sampleRateValue;
      }
      isValidLogLevel(logLevel) {
        return typeof logLevel === "string" && logLevel in this.logLevelThresholds;
      }
      printLog(logLevel, log) {
        log.prepareForPrint();
        const consoleMethod = logLevel === 24 ? "error" : this.getLogLevelNameFromNumber(logLevel).toLowerCase();
        this.console[consoleMethod](JSON.stringify(log.getAttributes(), this.getReplacer(), this.logIndentation));
      }
      processLogItem(logLevel, input, extraInput) {
        if (!this.shouldPrint(logLevel)) {
          return;
        }
        this.printLog(logLevel, this.createAndPopulateLogItem(logLevel, input, extraInput));
      }
      setConsole() {
        if (!this.getEnvVarsService().isDevMode()) {
          this.console = new node_console_1.Console({
            stdout: process.stdout,
            stderr: process.stderr
          });
        } else {
          this.console = console;
        }
      }
      setCustomConfigService(customConfigService) {
        this.customConfigService = customConfigService ? customConfigService : void 0;
      }
      setEnvVarsService() {
        this.envVarsService = new config_1.EnvironmentVariablesService();
      }
      setInitialLogLevel(logLevel) {
        const constructorLogLevel = logLevel?.toUpperCase();
        if (this.isValidLogLevel(constructorLogLevel)) {
          this.logLevel = this.logLevelThresholds[constructorLogLevel];
          return;
        }
        const customConfigValue = this.getCustomConfigService()?.getLogLevel()?.toUpperCase();
        if (this.isValidLogLevel(customConfigValue)) {
          this.logLevel = this.logLevelThresholds[customConfigValue];
          return;
        }
        const envVarsValue = this.getEnvVarsService()?.getLogLevel()?.toUpperCase();
        if (this.isValidLogLevel(envVarsValue)) {
          this.logLevel = this.logLevelThresholds[envVarsValue];
          return;
        }
      }
      setLogEvent() {
        if (this.getEnvVarsService().getLogEvent()) {
          this.logEvent = true;
        }
      }
      setLogFormatter(logFormatter) {
        this.logFormatter = logFormatter || new formatter_1.PowertoolLogFormatter();
      }
      setLogIndentation() {
        if (this.getEnvVarsService().isDevMode()) {
          this.logIndentation = 4;
        }
      }
      setLogsSampled() {
        const sampleRateValue = this.getSampleRateValue();
        this.logsSampled = sampleRateValue !== void 0 && (sampleRateValue === 1 || (0, node_crypto_1.randomInt)(0, 100) / 100 <= sampleRateValue);
      }
      setOptions(options) {
        const { logLevel, serviceName: serviceName2, sampleRateValue, logFormatter, customConfigService, persistentLogAttributes, environment } = options;
        this.setEnvVarsService();
        this.setConsole();
        this.setCustomConfigService(customConfigService);
        this.setInitialLogLevel(logLevel);
        this.setSampleRateValue(sampleRateValue);
        this.setLogsSampled();
        this.setLogFormatter(logFormatter);
        this.setPowertoolLogData(serviceName2, environment);
        this.setLogEvent();
        this.setLogIndentation();
        this.addPersistentLogAttributes(persistentLogAttributes);
        return this;
      }
      setPowertoolLogData(serviceName2, environment, persistentLogAttributes = {}) {
        this.addToPowertoolLogData({
          awsRegion: this.getEnvVarsService().getAwsRegion(),
          environment: environment || this.getCustomConfigService()?.getCurrentEnvironment() || this.getEnvVarsService().getCurrentEnvironment(),
          sampleRateValue: this.getSampleRateValue(),
          serviceName: serviceName2 || this.getCustomConfigService()?.getServiceName() || this.getEnvVarsService().getServiceName() || this.getDefaultServiceName()
        }, persistentLogAttributes);
      }
    };
    exports.Logger = Logger2;
  }
});

// node_modules/@aws-lambda-powertools/commons/lib/middleware/constants.js
var require_constants9 = __commonJS({
  "node_modules/@aws-lambda-powertools/commons/lib/middleware/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IDEMPOTENCY_KEY = exports.LOGGER_KEY = exports.METRICS_KEY = exports.TRACER_KEY = exports.PREFIX = void 0;
    var PREFIX = "powertools-for-aws";
    exports.PREFIX = PREFIX;
    var TRACER_KEY = `${PREFIX}.tracer`;
    exports.TRACER_KEY = TRACER_KEY;
    var METRICS_KEY = `${PREFIX}.metrics`;
    exports.METRICS_KEY = METRICS_KEY;
    var LOGGER_KEY = `${PREFIX}.logger`;
    exports.LOGGER_KEY = LOGGER_KEY;
    var IDEMPOTENCY_KEY = `${PREFIX}.idempotency`;
    exports.IDEMPOTENCY_KEY = IDEMPOTENCY_KEY;
  }
});

// node_modules/@aws-lambda-powertools/commons/lib/middleware/cleanupMiddlewares.js
var require_cleanupMiddlewares = __commonJS({
  "node_modules/@aws-lambda-powertools/commons/lib/middleware/cleanupMiddlewares.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cleanupMiddlewares = void 0;
    var constants_1 = require_constants9();
    var isFunction = (obj) => {
      return typeof obj === "function";
    };
    var cleanupMiddlewares = async (request) => {
      const cleanupFunctionNames = [
        constants_1.TRACER_KEY,
        constants_1.METRICS_KEY,
        constants_1.LOGGER_KEY,
        constants_1.IDEMPOTENCY_KEY
      ];
      for (const functionName of cleanupFunctionNames) {
        if (Object(request.internal).hasOwnProperty(functionName)) {
          const functionReference = request.internal[functionName];
          if (isFunction(functionReference)) {
            await functionReference(request);
          }
        }
      }
    };
    exports.cleanupMiddlewares = cleanupMiddlewares;
  }
});

// node_modules/@aws-lambda-powertools/commons/lib/middleware/index.js
var require_middleware3 = __commonJS({
  "node_modules/@aws-lambda-powertools/commons/lib/middleware/index.js"(exports) {
    "use strict";
    var __createBinding3 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar3 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding3(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar3(require_cleanupMiddlewares(), exports);
    __exportStar3(require_constants9(), exports);
  }
});

// node_modules/@aws-lambda-powertools/logger/lib/middleware/middy.js
var require_middy2 = __commonJS({
  "node_modules/@aws-lambda-powertools/logger/lib/middleware/middy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.injectLambdaContext = void 0;
    var Logger_1 = require_Logger();
    var middleware_1 = require_middleware3();
    var injectLambdaContext = (target, options) => {
      const loggers = target instanceof Array ? target : [target];
      const persistentAttributes = [];
      const isClearState = options && options.clearState === true;
      const setCleanupFunction = (request) => {
        request.internal = {
          ...request.internal,
          [middleware_1.LOGGER_KEY]: injectLambdaContextAfterOrOnError
        };
      };
      const injectLambdaContextBefore = async (request) => {
        loggers.forEach((logger2, index) => {
          if (isClearState) {
            persistentAttributes[index] = {
              ...logger2.getPersistentLogAttributes()
            };
            setCleanupFunction(request);
          }
          Logger_1.Logger.injectLambdaContextBefore(logger2, request.event, request.context, options);
        });
      };
      const injectLambdaContextAfterOrOnError = async () => {
        if (isClearState) {
          loggers.forEach((logger2, index) => {
            Logger_1.Logger.injectLambdaContextAfterOrOnError(logger2, persistentAttributes[index], options);
          });
        }
      };
      return {
        before: injectLambdaContextBefore,
        after: injectLambdaContextAfterOrOnError,
        onError: injectLambdaContextAfterOrOnError
      };
    };
    exports.injectLambdaContext = injectLambdaContext;
  }
});

// node_modules/@aws-lambda-powertools/logger/lib/middleware/index.js
var require_middleware4 = __commonJS({
  "node_modules/@aws-lambda-powertools/logger/lib/middleware/index.js"(exports) {
    "use strict";
    var __createBinding3 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar3 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding3(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar3(require_middy2(), exports);
  }
});

// node_modules/@aws-lambda-powertools/logger/lib/index.js
var require_lib4 = __commonJS({
  "node_modules/@aws-lambda-powertools/logger/lib/index.js"(exports) {
    "use strict";
    var __createBinding3 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar3 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding3(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar3(require_helpers2(), exports);
    __exportStar3(require_Logger(), exports);
    __exportStar3(require_middleware4(), exports);
    __exportStar3(require_formatter(), exports);
  }
});

// node_modules/@aws-lambda-powertools/tracer/lib/helpers.js
var require_helpers3 = __commonJS({
  "node_modules/@aws-lambda-powertools/tracer/lib/helpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTracer = void 0;
    var _1 = require_lib6();
    var createTracer = (options = {}) => new _1.Tracer(options);
    exports.createTracer = createTracer;
  }
});

// node_modules/@aws-lambda-powertools/tracer/lib/config/ConfigServiceInterface.js
var require_ConfigServiceInterface2 = __commonJS({
  "node_modules/@aws-lambda-powertools/tracer/lib/config/ConfigServiceInterface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-lambda-powertools/tracer/lib/config/EnvironmentVariablesService.js
var require_EnvironmentVariablesService3 = __commonJS({
  "node_modules/@aws-lambda-powertools/tracer/lib/config/EnvironmentVariablesService.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EnvironmentVariablesService = void 0;
    var commons_1 = require_lib3();
    var EnvironmentVariablesService = class extends commons_1.EnvironmentVariablesService {
      constructor() {
        super(...arguments);
        this.awsExecutionEnv = "AWS_EXECUTION_ENV";
        this.samLocalVariable = "AWS_SAM_LOCAL";
        this.tracerCaptureErrorVariable = "POWERTOOLS_TRACER_CAPTURE_ERROR";
        this.tracerCaptureHTTPsRequestsVariable = "POWERTOOLS_TRACER_CAPTURE_HTTPS_REQUESTS";
        this.tracerCaptureResponseVariable = "POWERTOOLS_TRACER_CAPTURE_RESPONSE";
        this.tracingEnabledVariable = "POWERTOOLS_TRACE_ENABLED";
      }
      getAwsExecutionEnv() {
        return this.get(this.awsExecutionEnv);
      }
      getCaptureHTTPsRequests() {
        return this.get(this.tracerCaptureHTTPsRequestsVariable);
      }
      getSamLocal() {
        return this.get(this.samLocalVariable);
      }
      getTracingCaptureError() {
        return this.get(this.tracerCaptureErrorVariable);
      }
      getTracingCaptureResponse() {
        return this.get(this.tracerCaptureResponseVariable);
      }
      getTracingEnabled() {
        return this.get(this.tracingEnabledVariable);
      }
    };
    exports.EnvironmentVariablesService = EnvironmentVariablesService;
  }
});

// node_modules/@aws-lambda-powertools/tracer/lib/config/index.js
var require_config7 = __commonJS({
  "node_modules/@aws-lambda-powertools/tracer/lib/config/index.js"(exports) {
    "use strict";
    var __createBinding3 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar3 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding3(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar3(require_ConfigServiceInterface2(), exports);
    __exportStar3(require_EnvironmentVariablesService3(), exports);
  }
});

// node_modules/shimmer/index.js
var require_shimmer = __commonJS({
  "node_modules/shimmer/index.js"(exports, module2) {
    "use strict";
    function isFunction(funktion) {
      return typeof funktion === "function";
    }
    var logger2 = console.error.bind(console);
    function defineProperty(obj, name, value) {
      var enumerable = !!obj[name] && obj.propertyIsEnumerable(name);
      Object.defineProperty(obj, name, {
        configurable: true,
        enumerable,
        writable: true,
        value
      });
    }
    function shimmer(options) {
      if (options && options.logger) {
        if (!isFunction(options.logger))
          logger2("new logger isn't a function, not replacing");
        else
          logger2 = options.logger;
      }
    }
    function wrap(nodule, name, wrapper) {
      if (!nodule || !nodule[name]) {
        logger2("no original function " + name + " to wrap");
        return;
      }
      if (!wrapper) {
        logger2("no wrapper function");
        logger2(new Error().stack);
        return;
      }
      if (!isFunction(nodule[name]) || !isFunction(wrapper)) {
        logger2("original object and wrapper must be functions");
        return;
      }
      var original = nodule[name];
      var wrapped = wrapper(original, name);
      defineProperty(wrapped, "__original", original);
      defineProperty(wrapped, "__unwrap", function() {
        if (nodule[name] === wrapped)
          defineProperty(nodule, name, original);
      });
      defineProperty(wrapped, "__wrapped", true);
      defineProperty(nodule, name, wrapped);
      return wrapped;
    }
    function massWrap(nodules, names, wrapper) {
      if (!nodules) {
        logger2("must provide one or more modules to patch");
        logger2(new Error().stack);
        return;
      } else if (!Array.isArray(nodules)) {
        nodules = [nodules];
      }
      if (!(names && Array.isArray(names))) {
        logger2("must provide one or more functions to wrap on modules");
        return;
      }
      nodules.forEach(function(nodule) {
        names.forEach(function(name) {
          wrap(nodule, name, wrapper);
        });
      });
    }
    function unwrap(nodule, name) {
      if (!nodule || !nodule[name]) {
        logger2("no function to unwrap.");
        logger2(new Error().stack);
        return;
      }
      if (!nodule[name].__unwrap) {
        logger2("no original to unwrap to -- has " + name + " already been unwrapped?");
      } else {
        return nodule[name].__unwrap();
      }
    }
    function massUnwrap(nodules, names) {
      if (!nodules) {
        logger2("must provide one or more modules to patch");
        logger2(new Error().stack);
        return;
      } else if (!Array.isArray(nodules)) {
        nodules = [nodules];
      }
      if (!(names && Array.isArray(names))) {
        logger2("must provide one or more functions to unwrap on modules");
        return;
      }
      nodules.forEach(function(nodule) {
        names.forEach(function(name) {
          unwrap(nodule, name);
        });
      });
    }
    shimmer.wrap = wrap;
    shimmer.massWrap = massWrap;
    shimmer.unwrap = unwrap;
    shimmer.massUnwrap = massUnwrap;
    module2.exports = shimmer;
  }
});

// node_modules/emitter-listener/listener.js
var require_listener = __commonJS({
  "node_modules/emitter-listener/listener.js"(exports, module2) {
    "use strict";
    var shimmer = require_shimmer();
    var wrap = shimmer.wrap;
    var unwrap = shimmer.unwrap;
    var SYMBOL = "wrap@before";
    function defineProperty(obj, name, value) {
      var enumerable = !!obj[name] && obj.propertyIsEnumerable(name);
      Object.defineProperty(obj, name, {
        configurable: true,
        enumerable,
        writable: true,
        value
      });
    }
    function _process(self2, listeners) {
      var l = listeners.length;
      for (var p = 0; p < l; p++) {
        var listener = listeners[p];
        var before = self2[SYMBOL];
        if (typeof before === "function") {
          before(listener);
        } else if (Array.isArray(before)) {
          var length = before.length;
          for (var i = 0; i < length; i++)
            before[i](listener);
        }
      }
    }
    function _listeners(self2, event) {
      var listeners;
      listeners = self2._events && self2._events[event];
      if (!Array.isArray(listeners)) {
        if (listeners) {
          listeners = [listeners];
        } else {
          listeners = [];
        }
      }
      return listeners;
    }
    function _findAndProcess(self2, event, before) {
      var after = _listeners(self2, event);
      var unprocessed = after.filter(function(fn) {
        return before.indexOf(fn) === -1;
      });
      if (unprocessed.length > 0)
        _process(self2, unprocessed);
    }
    function _wrap(unwrapped, visit) {
      if (!unwrapped)
        return;
      var wrapped = unwrapped;
      if (typeof unwrapped === "function") {
        wrapped = visit(unwrapped);
      } else if (Array.isArray(unwrapped)) {
        wrapped = [];
        for (var i = 0; i < unwrapped.length; i++) {
          wrapped[i] = visit(unwrapped[i]);
        }
      }
      return wrapped;
    }
    module2.exports = function wrapEmitter(emitter, onAddListener, onEmit) {
      if (!emitter || !emitter.on || !emitter.addListener || !emitter.removeListener || !emitter.emit) {
        throw new Error("can only wrap real EEs");
      }
      if (!onAddListener)
        throw new Error("must have function to run on listener addition");
      if (!onEmit)
        throw new Error("must have function to wrap listeners when emitting");
      function adding(on) {
        return function added(event, listener) {
          var existing = _listeners(this, event).slice();
          try {
            var returned = on.call(this, event, listener);
            _findAndProcess(this, event, existing);
            return returned;
          } finally {
            if (!this.on.__wrapped)
              wrap(this, "on", adding);
            if (!this.addListener.__wrapped)
              wrap(this, "addListener", adding);
          }
        };
      }
      function emitting(emit) {
        return function emitted(event) {
          if (!this._events || !this._events[event])
            return emit.apply(this, arguments);
          var unwrapped = this._events[event];
          function remover(removeListener) {
            return function removed() {
              this._events[event] = unwrapped;
              try {
                return removeListener.apply(this, arguments);
              } finally {
                unwrapped = this._events[event];
                this._events[event] = _wrap(unwrapped, onEmit);
              }
            };
          }
          wrap(this, "removeListener", remover);
          try {
            this._events[event] = _wrap(unwrapped, onEmit);
            return emit.apply(this, arguments);
          } finally {
            unwrap(this, "removeListener");
            this._events[event] = unwrapped;
          }
        };
      }
      if (!emitter[SYMBOL]) {
        defineProperty(emitter, SYMBOL, onAddListener);
      } else if (typeof emitter[SYMBOL] === "function") {
        defineProperty(emitter, SYMBOL, [emitter[SYMBOL], onAddListener]);
      } else if (Array.isArray(emitter[SYMBOL])) {
        emitter[SYMBOL].push(onAddListener);
      }
      if (!emitter.__wrapped) {
        wrap(emitter, "addListener", adding);
        wrap(emitter, "on", adding);
        wrap(emitter, "emit", emitting);
        defineProperty(emitter, "__unwrap", function() {
          unwrap(emitter, "addListener");
          unwrap(emitter, "on");
          unwrap(emitter, "emit");
          delete emitter[SYMBOL];
          delete emitter.__wrapped;
        });
        defineProperty(emitter, "__wrapped", true);
      }
    };
  }
});

// node_modules/cls-hooked/context.js
var require_context = __commonJS({
  "node_modules/cls-hooked/context.js"(exports, module2) {
    "use strict";
    var util = require("util");
    var assert = require("assert");
    var wrapEmitter = require_listener();
    var async_hooks = require("async_hooks");
    var CONTEXTS_SYMBOL = "cls@contexts";
    var ERROR_SYMBOL = "error@context";
    var DEBUG_CLS_HOOKED = process.env.DEBUG_CLS_HOOKED;
    var currentUid = -1;
    module2.exports = {
      getNamespace,
      createNamespace,
      destroyNamespace,
      reset,
      ERROR_SYMBOL
    };
    function Namespace(name) {
      this.name = name;
      this.active = null;
      this._set = [];
      this.id = null;
      this._contexts = /* @__PURE__ */ new Map();
      this._indent = 0;
    }
    Namespace.prototype.set = function set(key, value) {
      if (!this.active) {
        throw new Error("No context available. ns.run() or ns.bind() must be called first.");
      }
      this.active[key] = value;
      if (DEBUG_CLS_HOOKED) {
        const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
        debug2(indentStr + "CONTEXT-SET KEY:" + key + "=" + value + " in ns:" + this.name + " currentUid:" + currentUid + " active:" + util.inspect(this.active, { showHidden: true, depth: 2, colors: true }));
      }
      return value;
    };
    Namespace.prototype.get = function get(key) {
      if (!this.active) {
        if (DEBUG_CLS_HOOKED) {
          const asyncHooksCurrentId = async_hooks.currentId();
          const triggerId = async_hooks.triggerAsyncId();
          const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
          debug2(`${indentStr}CONTEXT-GETTING KEY NO ACTIVE NS: (${this.name}) ${key}=undefined currentUid:${currentUid} asyncHooksCurrentId:${asyncHooksCurrentId} triggerId:${triggerId} len:${this._set.length}`);
        }
        return void 0;
      }
      if (DEBUG_CLS_HOOKED) {
        const asyncHooksCurrentId = async_hooks.executionAsyncId();
        const triggerId = async_hooks.triggerAsyncId();
        const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
        debug2(indentStr + "CONTEXT-GETTING KEY:" + key + "=" + this.active[key] + " (" + this.name + ") currentUid:" + currentUid + " active:" + util.inspect(this.active, { showHidden: true, depth: 2, colors: true }));
        debug2(`${indentStr}CONTEXT-GETTING KEY: (${this.name}) ${key}=${this.active[key]} currentUid:${currentUid} asyncHooksCurrentId:${asyncHooksCurrentId} triggerId:${triggerId} len:${this._set.length} active:${util.inspect(this.active)}`);
      }
      return this.active[key];
    };
    Namespace.prototype.createContext = function createContext() {
      let context = Object.create(this.active ? this.active : Object.prototype);
      context._ns_name = this.name;
      context.id = currentUid;
      if (DEBUG_CLS_HOOKED) {
        const asyncHooksCurrentId = async_hooks.executionAsyncId();
        const triggerId = async_hooks.triggerAsyncId();
        const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
        debug2(`${indentStr}CONTEXT-CREATED Context: (${this.name}) currentUid:${currentUid} asyncHooksCurrentId:${asyncHooksCurrentId} triggerId:${triggerId} len:${this._set.length} context:${util.inspect(context, { showHidden: true, depth: 2, colors: true })}`);
      }
      return context;
    };
    Namespace.prototype.run = function run(fn) {
      let context = this.createContext();
      this.enter(context);
      try {
        if (DEBUG_CLS_HOOKED) {
          const triggerId = async_hooks.triggerAsyncId();
          const asyncHooksCurrentId = async_hooks.executionAsyncId();
          const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
          debug2(`${indentStr}CONTEXT-RUN BEGIN: (${this.name}) currentUid:${currentUid} triggerId:${triggerId} asyncHooksCurrentId:${asyncHooksCurrentId} len:${this._set.length} context:${util.inspect(context)}`);
        }
        fn(context);
        return context;
      } catch (exception) {
        if (exception) {
          exception[ERROR_SYMBOL] = context;
        }
        throw exception;
      } finally {
        if (DEBUG_CLS_HOOKED) {
          const triggerId = async_hooks.triggerAsyncId();
          const asyncHooksCurrentId = async_hooks.executionAsyncId();
          const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
          debug2(`${indentStr}CONTEXT-RUN END: (${this.name}) currentUid:${currentUid} triggerId:${triggerId} asyncHooksCurrentId:${asyncHooksCurrentId} len:${this._set.length} ${util.inspect(context)}`);
        }
        this.exit(context);
      }
    };
    Namespace.prototype.runAndReturn = function runAndReturn(fn) {
      let value;
      this.run(function(context) {
        value = fn(context);
      });
      return value;
    };
    Namespace.prototype.runPromise = function runPromise(fn) {
      let context = this.createContext();
      this.enter(context);
      let promise = fn(context);
      if (!promise || !promise.then || !promise.catch) {
        throw new Error("fn must return a promise.");
      }
      if (DEBUG_CLS_HOOKED) {
        debug2("CONTEXT-runPromise BEFORE: (" + this.name + ") currentUid:" + currentUid + " len:" + this._set.length + " " + util.inspect(context));
      }
      return promise.then((result) => {
        if (DEBUG_CLS_HOOKED) {
          debug2("CONTEXT-runPromise AFTER then: (" + this.name + ") currentUid:" + currentUid + " len:" + this._set.length + " " + util.inspect(context));
        }
        this.exit(context);
        return result;
      }).catch((err) => {
        err[ERROR_SYMBOL] = context;
        if (DEBUG_CLS_HOOKED) {
          debug2("CONTEXT-runPromise AFTER catch: (" + this.name + ") currentUid:" + currentUid + " len:" + this._set.length + " " + util.inspect(context));
        }
        this.exit(context);
        throw err;
      });
    };
    Namespace.prototype.bind = function bindFactory(fn, context) {
      if (!context) {
        if (!this.active) {
          context = this.createContext();
        } else {
          context = this.active;
        }
      }
      let self2 = this;
      return function clsBind() {
        self2.enter(context);
        try {
          return fn.apply(this, arguments);
        } catch (exception) {
          if (exception) {
            exception[ERROR_SYMBOL] = context;
          }
          throw exception;
        } finally {
          self2.exit(context);
        }
      };
    };
    Namespace.prototype.enter = function enter(context) {
      assert.ok(context, "context must be provided for entering");
      if (DEBUG_CLS_HOOKED) {
        const asyncHooksCurrentId = async_hooks.executionAsyncId();
        const triggerId = async_hooks.triggerAsyncId();
        const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
        debug2(`${indentStr}CONTEXT-ENTER: (${this.name}) currentUid:${currentUid} triggerId:${triggerId} asyncHooksCurrentId:${asyncHooksCurrentId} len:${this._set.length} ${util.inspect(context)}`);
      }
      this._set.push(this.active);
      this.active = context;
    };
    Namespace.prototype.exit = function exit(context) {
      assert.ok(context, "context must be provided for exiting");
      if (DEBUG_CLS_HOOKED) {
        const asyncHooksCurrentId = async_hooks.executionAsyncId();
        const triggerId = async_hooks.triggerAsyncId();
        const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
        debug2(`${indentStr}CONTEXT-EXIT: (${this.name}) currentUid:${currentUid} triggerId:${triggerId} asyncHooksCurrentId:${asyncHooksCurrentId} len:${this._set.length} ${util.inspect(context)}`);
      }
      if (this.active === context) {
        assert.ok(this._set.length, "can't remove top context");
        this.active = this._set.pop();
        return;
      }
      let index = this._set.lastIndexOf(context);
      if (index < 0) {
        if (DEBUG_CLS_HOOKED) {
          debug2("??ERROR?? context exiting but not entered - ignoring: " + util.inspect(context));
        }
        assert.ok(index >= 0, "context not currently entered; can't exit. \n" + util.inspect(this) + "\n" + util.inspect(context));
      } else {
        assert.ok(index, "can't remove top context");
        this._set.splice(index, 1);
      }
    };
    Namespace.prototype.bindEmitter = function bindEmitter(emitter) {
      assert.ok(emitter.on && emitter.addListener && emitter.emit, "can only bind real EEs");
      let namespace = this;
      let thisSymbol = "context@" + this.name;
      function attach(listener) {
        if (!listener) {
          return;
        }
        if (!listener[CONTEXTS_SYMBOL]) {
          listener[CONTEXTS_SYMBOL] = /* @__PURE__ */ Object.create(null);
        }
        listener[CONTEXTS_SYMBOL][thisSymbol] = {
          namespace,
          context: namespace.active
        };
      }
      function bind(unwrapped) {
        if (!(unwrapped && unwrapped[CONTEXTS_SYMBOL])) {
          return unwrapped;
        }
        let wrapped = unwrapped;
        let unwrappedContexts = unwrapped[CONTEXTS_SYMBOL];
        Object.keys(unwrappedContexts).forEach(function(name) {
          let thunk = unwrappedContexts[name];
          wrapped = thunk.namespace.bind(wrapped, thunk.context);
        });
        return wrapped;
      }
      wrapEmitter(emitter, attach, bind);
    };
    Namespace.prototype.fromException = function fromException(exception) {
      return exception[ERROR_SYMBOL];
    };
    function getNamespace(name) {
      return process.namespaces[name];
    }
    function createNamespace(name) {
      assert.ok(name, "namespace must be given a name.");
      if (DEBUG_CLS_HOOKED) {
        debug2(`NS-CREATING NAMESPACE (${name})`);
      }
      let namespace = new Namespace(name);
      namespace.id = currentUid;
      const hook = async_hooks.createHook({
        init(asyncId, type, triggerId, resource) {
          currentUid = async_hooks.executionAsyncId();
          if (namespace.active) {
            namespace._contexts.set(asyncId, namespace.active);
            if (DEBUG_CLS_HOOKED) {
              const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
              debug2(`${indentStr}INIT [${type}] (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} resource:${resource}`);
            }
          } else if (currentUid === 0) {
            const triggerId2 = async_hooks.triggerAsyncId();
            const triggerIdContext = namespace._contexts.get(triggerId2);
            if (triggerIdContext) {
              namespace._contexts.set(asyncId, triggerIdContext);
              if (DEBUG_CLS_HOOKED) {
                const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
                debug2(`${indentStr}INIT USING CONTEXT FROM TRIGGERID [${type}] (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId2} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} resource:${resource}`);
              }
            } else if (DEBUG_CLS_HOOKED) {
              const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
              debug2(`${indentStr}INIT MISSING CONTEXT [${type}] (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId2} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} resource:${resource}`);
            }
          }
          if (DEBUG_CLS_HOOKED && type === "PROMISE") {
            debug2(util.inspect(resource, { showHidden: true }));
            const parentId = resource.parentId;
            const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
            debug2(`${indentStr}INIT RESOURCE-PROMISE [${type}] (${name}) parentId:${parentId} asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} resource:${resource}`);
          }
        },
        before(asyncId) {
          currentUid = async_hooks.executionAsyncId();
          let context;
          context = namespace._contexts.get(asyncId) || namespace._contexts.get(currentUid);
          if (context) {
            if (DEBUG_CLS_HOOKED) {
              const triggerId = async_hooks.triggerAsyncId();
              const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
              debug2(`${indentStr}BEFORE (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} context:${util.inspect(context)}`);
              namespace._indent += 2;
            }
            namespace.enter(context);
          } else if (DEBUG_CLS_HOOKED) {
            const triggerId = async_hooks.triggerAsyncId();
            const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
            debug2(`${indentStr}BEFORE MISSING CONTEXT (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} namespace._contexts:${util.inspect(namespace._contexts, { showHidden: true, depth: 2, colors: true })}`);
            namespace._indent += 2;
          }
        },
        after(asyncId) {
          currentUid = async_hooks.executionAsyncId();
          let context;
          context = namespace._contexts.get(asyncId) || namespace._contexts.get(currentUid);
          if (context) {
            if (DEBUG_CLS_HOOKED) {
              const triggerId = async_hooks.triggerAsyncId();
              namespace._indent -= 2;
              const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
              debug2(`${indentStr}AFTER (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} context:${util.inspect(context)}`);
            }
            namespace.exit(context);
          } else if (DEBUG_CLS_HOOKED) {
            const triggerId = async_hooks.triggerAsyncId();
            namespace._indent -= 2;
            const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
            debug2(`${indentStr}AFTER MISSING CONTEXT (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} context:${util.inspect(context)}`);
          }
        },
        destroy(asyncId) {
          currentUid = async_hooks.executionAsyncId();
          if (DEBUG_CLS_HOOKED) {
            const triggerId = async_hooks.triggerAsyncId();
            const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
            debug2(`${indentStr}DESTROY (${name}) currentUid:${currentUid} asyncId:${asyncId} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} context:${util.inspect(namespace._contexts.get(currentUid))}`);
          }
          namespace._contexts.delete(asyncId);
        }
      });
      hook.enable();
      process.namespaces[name] = namespace;
      return namespace;
    }
    function destroyNamespace(name) {
      let namespace = getNamespace(name);
      assert.ok(namespace, `can't delete nonexistent namespace! "` + name + '"');
      assert.ok(namespace.id, "don't assign to process.namespaces directly! " + util.inspect(namespace));
      process.namespaces[name] = null;
    }
    function reset() {
      if (process.namespaces) {
        Object.keys(process.namespaces).forEach(function(name) {
          destroyNamespace(name);
        });
      }
      process.namespaces = /* @__PURE__ */ Object.create(null);
    }
    process.namespaces = {};
    function debug2(...args) {
      if (DEBUG_CLS_HOOKED) {
        process._rawDebug(`${util.format(...args)}`);
      }
    }
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/logger.js
var require_logger3 = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/logger.js"(exports, module2) {
    "use strict";
    var validLogLevels = ["debug", "info", "warn", "error", "silent"];
    var defaultLogLevel = validLogLevels.indexOf("error");
    var logLevel = calculateLogLevel(process.env.AWS_XRAY_DEBUG_MODE ? "debug" : process.env.AWS_XRAY_LOG_LEVEL);
    var logger2 = {
      error: createLoggerForLevel("error"),
      info: createLoggerForLevel("info"),
      warn: createLoggerForLevel("warn"),
      debug: createLoggerForLevel("debug")
    };
    function createLoggerForLevel(level) {
      var loggerLevel = validLogLevels.indexOf(level);
      var consoleMethod = console[level] || console.log || (() => {
      });
      if (loggerLevel >= logLevel) {
        return (message, meta) => {
          if (message || meta) {
            consoleMethod(formatLogMessage(level, message, meta));
          }
        };
      } else {
        return () => {
        };
      }
    }
    function calculateLogLevel(level) {
      if (level) {
        var normalisedLevel = level.toLowerCase();
        var index = validLogLevels.indexOf(normalisedLevel);
        return index >= 0 ? index : defaultLogLevel;
      }
      return defaultLogLevel;
    }
    function createTimestamp(date) {
      var tzo = -date.getTimezoneOffset(), dif = tzo >= 0 ? "+" : "-", pad = function(num) {
        var norm = Math.floor(Math.abs(num));
        return (norm < 10 ? "0" : "") + norm;
      };
      return new Date(date.getTime() + tzo * 60 * 1e3).toISOString().replace(/T/, " ").replace(/Z/, " ") + dif + pad(tzo / 60) + ":" + pad(tzo % 60);
    }
    function isLambdaFunction() {
      return process.env.LAMBDA_TASK_ROOT !== void 0;
    }
    function formatLogMessage(level, message, meta) {
      var messageParts = [];
      if (!isLambdaFunction()) {
        messageParts.push(createTimestamp(/* @__PURE__ */ new Date()));
        messageParts.push(`[${level.toUpperCase()}]`);
      }
      if (message) {
        messageParts.push(message);
      }
      var logString = messageParts.join(" ");
      var metaDataString = formatMetaData(meta);
      return [logString, metaDataString].filter((str) => str.length > 0).join("\n  ");
    }
    function formatMetaData(meta) {
      if (!meta) {
        return "";
      }
      return typeof meta === "string" ? meta : JSON.stringify(meta);
    }
    var logging = {
      setLogger: function setLogger(logObj) {
        logger2 = logObj;
      },
      getLogger: function getLogger() {
        return logger2;
      }
    };
    module2.exports = logging;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/captured_exception.js
var require_captured_exception = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/captured_exception.js"(exports, module2) {
    "use strict";
    var crypto4 = require("crypto");
    function CapturedException(err, remote) {
      this.init(err, remote);
    }
    CapturedException.prototype.init = function init(err, remote) {
      var e = typeof err === "string" || err instanceof String ? { message: err, name: "" } : err;
      this.message = e.message;
      this.type = e.name;
      this.stack = [];
      this.remote = !!remote;
      this.id = crypto4.randomBytes(8).toString("hex");
      if (e.stack) {
        var stack = e.stack.split("\n");
        stack.shift();
        stack.forEach((stackline) => {
          var line = stackline.trim().replace(/\(|\)/g, "");
          line = line.substring(line.indexOf(" ") + 1);
          var label = line.lastIndexOf(" ") >= 0 ? line.slice(0, line.lastIndexOf(" ")) : null;
          var path = Array.isArray(label) && !label.length ? line : line.slice(line.lastIndexOf(" ") + 1);
          path = path.split(":");
          var entry = {
            path: path[0],
            line: parseInt(path[1]),
            label: label || "anonymous"
          };
          this.stack.push(entry);
        }, this);
      }
    };
    module2.exports = CapturedException;
  }
});

// node_modules/atomic-batcher/index.js
var require_atomic_batcher = __commonJS({
  "node_modules/atomic-batcher/index.js"(exports, module2) {
    module2.exports = batcher;
    function batcher(run) {
      var running = false;
      var pendingBatch = null;
      var pendingCallbacks = null;
      var callbacks = null;
      return append;
      function done(err) {
        if (callbacks)
          callAll(callbacks, err);
        running = false;
        callbacks = pendingCallbacks;
        var nextBatch = pendingBatch;
        pendingBatch = null;
        pendingCallbacks = null;
        if (!nextBatch || !nextBatch.length) {
          if (!callbacks || !callbacks.length) {
            callbacks = null;
            return;
          }
          if (!nextBatch)
            nextBatch = [];
        }
        running = true;
        run(nextBatch, done);
      }
      function append(val2, cb) {
        if (running) {
          if (!pendingBatch) {
            pendingBatch = [];
            pendingCallbacks = [];
          }
          pushAll(pendingBatch, val2);
          if (cb)
            pendingCallbacks.push(cb);
        } else {
          if (cb)
            callbacks = [cb];
          running = true;
          run(Array.isArray(val2) ? val2 : [val2], done);
        }
      }
    }
    function pushAll(list, val2) {
      if (Array.isArray(val2))
        pushArray(list, val2);
      else
        list.push(val2);
    }
    function pushArray(list, val2) {
      for (var i = 0; i < val2.length; i++)
        list.push(val2[i]);
    }
    function callAll(list, err) {
      for (var i = 0; i < list.length; i++)
        list[i](err);
    }
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/daemon_config.js
var require_daemon_config = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/daemon_config.js"(exports, module2) {
    "use strict";
    var logger2 = require_logger3();
    var DaemonConfig = {
      udp_ip: "127.0.0.1",
      udp_port: 2e3,
      tcp_ip: "127.0.0.1",
      tcp_port: 2e3,
      setDaemonAddress: function setDaemonAddress(address) {
        if (!process.env.AWS_XRAY_DAEMON_ADDRESS) {
          processAddress(address);
          logger2.getLogger().info("Configured daemon address to " + address + ".");
        } else {
          logger2.getLogger().warn("Ignoring call to setDaemonAddress as AWS_XRAY_DAEMON_ADDRESS is set. The current daemon address will not be changed.");
        }
      }
    };
    var processAddress = function processAddress2(address) {
      if (address.indexOf(":") === -1) {
        throw new Error("Invalid Daemon Address. You must specify an ip and port.");
      } else {
        var splitAddress = address.split(" ");
        if (splitAddress.length === 1) {
          if (address.indexOf("udp") > -1 || address.indexOf("tcp") > -1) {
            throw new Error("Invalid Daemon Address. You must specify both tcp and udp addresses.");
          }
          var addr = address.split(":");
          if (!addr[0]) {
            throw new Error("Invalid Daemon Address. You must specify an ip.");
          }
          DaemonConfig.udp_ip = addr[0];
          DaemonConfig.tcp_ip = addr[0];
          DaemonConfig.udp_port = addr[1];
          DaemonConfig.tcp_port = addr[1];
        } else if (splitAddress.length === 2) {
          var part_1 = splitAddress[0].split(":");
          var part_2 = splitAddress[1].split(":");
          var addr_map = {};
          addr_map[part_1[0]] = part_1;
          addr_map[part_2[0]] = part_2;
          DaemonConfig.udp_ip = addr_map["udp"][1];
          DaemonConfig.udp_port = parseInt(addr_map["udp"][2]);
          DaemonConfig.tcp_ip = addr_map["tcp"][1];
          DaemonConfig.tcp_port = parseInt(addr_map["tcp"][2]);
          if (!DaemonConfig.udp_port || !DaemonConfig.tcp_port) {
            throw new Error("Invalid Daemon Address. You must specify port number.");
          }
        }
      }
    };
    if (process.env.AWS_XRAY_DAEMON_ADDRESS) {
      processAddress(process.env.AWS_XRAY_DAEMON_ADDRESS);
    }
    module2.exports = DaemonConfig;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/segment_emitter.js
var require_segment_emitter = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/segment_emitter.js"(exports, module2) {
    "use strict";
    var dgram = require("dgram");
    var batcher = require_atomic_batcher();
    var logger2 = require_logger3();
    var PROTOCOL_HEADER = '{"format":"json","version":1}';
    var PROTOCOL_DELIMITER = "\n";
    function batchSendData(ops, callback) {
      var client = dgram.createSocket("udp4");
      executeSendData(client, ops, 0, function() {
        try {
          client.close();
        } finally {
          callback();
        }
      });
    }
    function executeSendData(client, ops, index, callback) {
      if (index >= ops.length) {
        callback();
        return;
      }
      sendMessage(client, ops[index], function() {
        executeSendData(client, ops, index + 1, callback);
      });
    }
    function sendMessage(client, data, batchCallback) {
      var msg = data.msg;
      var offset = data.offset;
      var length = data.length;
      var port = data.port;
      var address = data.address;
      var callback = data.callback;
      client.send(msg, offset, length, port, address, function(err) {
        try {
          callback(err);
        } finally {
          batchCallback();
        }
      });
    }
    function BatchingTemporarySocket() {
      this.batchSend = batcher(batchSendData);
    }
    BatchingTemporarySocket.prototype.send = function(msg, offset, length, port, address, callback) {
      var work = {
        msg,
        offset,
        length,
        port,
        address,
        callback
      };
      this.batchSend(work);
    };
    var SegmentEmitter = {
      daemonConfig: require_daemon_config(),
      /**
       * Returns the formatted segment JSON string.
       * @param {Segment} segment - The segment to format.
       */
      format: function format(segment) {
        return PROTOCOL_HEADER + PROTOCOL_DELIMITER + segment.toString();
      },
      /**
       * Creates a UDP socket connection and send the formatted segment.
       * @param {Segment} segment - The segment to send to the daemon.
       */
      send: function send(segment) {
        if (!this.socket) {
          if (this.useBatchingTemporarySocket) {
            this.socket = new BatchingTemporarySocket();
          } else {
            this.socket = dgram.createSocket("udp4").unref();
          }
        }
        var client = this.socket;
        var formatted = segment.format();
        var data = PROTOCOL_HEADER + PROTOCOL_DELIMITER + formatted;
        var message = Buffer.from(data);
        var short = '{"trace_id:"' + segment.trace_id + '","id":"' + segment.id + '"}';
        var type = segment.type === "subsegment" ? "Subsegment" : "Segment";
        client.send(message, 0, message.length, this.daemonConfig.udp_port, this.daemonConfig.udp_ip, function(err) {
          if (err) {
            if (err.code === "EMSGSIZE") {
              logger2.getLogger().error(type + " too large to send: " + short + " (" + message.length + " bytes).");
            } else {
              logger2.getLogger().error("Error occured sending segment: ", err);
            }
          } else {
            logger2.getLogger().debug(type + ' sent: {"trace_id:"' + segment.trace_id + '","id":"' + segment.id + '"}');
            logger2.getLogger().debug("UDP message sent: " + segment);
          }
        });
      },
      /**
       * Configures the address and/or port the daemon is expected to be on.
       * @param {string} address - Address of the daemon the segments should be sent to. Should be formatted as an IPv4 address.
       * @module SegmentEmitter
       * @function setDaemonAddress
       */
      setDaemonAddress: function setDaemonAddress(address) {
        this.daemonConfig.setDaemonAddress(address);
      },
      /**
       * Get the UDP IP the emitter is configured to.
       * @module SegmentEmitter
       * @function getIp
       */
      getIp: function getIp() {
        return this.daemonConfig.udp_ip;
      },
      /**
       * Get the UDP port the emitter is configured to.
       * @module SegmentEmitter
       * @function getPort
       */
      getPort: function getPort() {
        return this.daemonConfig.udp_port;
      },
      /**
       * Forces the segment emitter to create a new socket on send, and close it on complete.
       * @module SegmentEmitter
       * @function disableReusableSocket
       */
      disableReusableSocket: function() {
        this.useBatchingTemporarySocket = true;
      }
    };
    module2.exports = SegmentEmitter;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/trace_id.js
var require_trace_id = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/trace_id.js"(exports, module2) {
    "use strict";
    var crypto4 = require("crypto");
    var logger2 = require_logger3();
    var TraceID = class _TraceID {
      /**
       * Constructs a new trace ID using the current time.
       * @param {string} [tsHex] - time stamp to use for trace ID in hexadecimal format
       * @param {string} [numberhex] - string of hexadecimal characters for random portion of Trace ID
       * @constructor
       */
      constructor(tsHex, numberhex) {
        this.version = 1;
        this.timestamp = tsHex || Math.round((/* @__PURE__ */ new Date()).getTime() / 1e3).toString(16);
        this.id = numberhex || crypto4.randomBytes(12).toString("hex");
      }
      /**
       * @returns {TraceID} - a hardcoded trace ID using zeroed timestamp and random ID
       */
      static Invalid() {
        return new _TraceID("00000000", "000000000000000000000000");
      }
      /**
       * Constructs a new trace ID from provided string. If no string is provided or the provided string is invalid,
       * log an error but a new trace ID still returned. This can be used as a trace ID string validator.
       * @param {string} [rawID] - string to create a Trace ID object from.
       */
      static FromString(rawID) {
        const DELIMITER = "-";
        var traceID = new _TraceID();
        var version2, timestamp;
        if (!rawID || typeof rawID !== "string") {
          logger2.getLogger().error("Empty or non-string trace ID provided");
          return traceID;
        }
        const parts = rawID.trim().split(DELIMITER);
        if (parts.length !== 3) {
          logger2.getLogger().error("Unrecognized trace ID format");
          return traceID;
        }
        version2 = parseInt(parts[0]);
        if (isNaN(version2) || version2 < 1) {
          logger2.getLogger().error("Trace ID version must be positive integer");
          return traceID;
        }
        timestamp = parseInt(parts[1], 16).toString(16);
        if (timestamp === "NaN") {
          logger2.getLogger().error("Trace ID timestamp must be a hex-encoded value");
          return traceID;
        }
        traceID.version = version2;
        traceID.timestamp = timestamp;
        traceID.id = parts[2];
        return traceID;
      }
      /**
       * Returns a string representation of the trace ID.
       * @returns {string} - stringified trace ID, e.g. 1-57fbe041-2c7ad569f5d6ff149137be86
       */
      toString() {
        return `${this.version.toString()}-${this.timestamp}-${this.id}`;
      }
    };
    module2.exports = TraceID;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/utils.js
var require_utils6 = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/utils.js"(exports, module2) {
    "use strict";
    var crypto4 = require("crypto");
    var logger2 = require_logger3();
    var TraceID = require_trace_id();
    var utils = {
      /**
       * Checks a HTTP response code, where 4xx are 'error' and 5xx are 'fault'.
       * @param {string} status - the HTTP response status code.
       * @returns [string] - 'error', 'fault' or nothing on no match
       * @alias module:utils.getCauseTypeFromHttpStatus
       */
      getCauseTypeFromHttpStatus: function getCauseTypeFromHttpStatus(status) {
        var stat = status.toString();
        if (stat.match(/^[4][0-9]{2}$/) !== null) {
          return "error";
        } else if (stat.match(/^[5][0-9]{2}$/) !== null) {
          return "fault";
        }
      },
      /**
       * Removes the query string parameters from a given http request path
       * as it may contain sensitive information
       *
       * Related issue: https://github.com/aws/aws-xray-sdk-node/issues/246
       *
       * Node documentation: https://nodejs.org/api/http.html#http_http_request_url_options_callback
       *
       * @param {string} path - options.path in a http.request callback
       * @returns [string] - removes query string element from path
       * @alias module:utils.stripQueryStringFromPath
       */
      stripQueryStringFromPath: function stripQueryStringFromPath(path) {
        return path ? path.split("?")[0] : "";
      },
      /**
       * Performs a case-insensitive wildcard match against two strings. This method works with pseduo-regex chars; specifically ? and * are supported.
       *   An asterisk (*) represents any combination of characters
       *   A question mark (?) represents any single character
       *
       * @param {string} pattern - the regex-like pattern to be compared against.
       * @param {string} text - the string to compare against the pattern.
       * @returns boolean
       * @alias module:utils.wildcardMatch
       */
      wildcardMatch: function wildcardMatch(pattern, text) {
        if (pattern === void 0 || text === void 0) {
          return false;
        }
        if (pattern.length === 1 && pattern.charAt(0) === "*") {
          return true;
        }
        var patternLength = pattern.length;
        var textLength = text.length;
        var indexOfGlob = pattern.indexOf("*");
        pattern = pattern.toLowerCase();
        text = text.toLowerCase();
        if (indexOfGlob === -1 || indexOfGlob === patternLength - 1) {
          var match = function simpleWildcardMatch() {
            var j2 = 0;
            for (var i2 = 0; i2 < patternLength; i2++) {
              var patternChar2 = pattern.charAt(i2);
              if (patternChar2 === "*") {
                return true;
              } else if (patternChar2 === "?") {
                if (j2 === textLength) {
                  return false;
                }
                j2++;
              } else {
                if (j2 >= textLength || patternChar2 != text.charAt(j2)) {
                  return false;
                }
                j2++;
              }
            }
            return j2 === textLength;
          };
          return match();
        }
        var matchArray = [];
        matchArray[0] = true;
        for (var j = 0; j < patternLength; j++) {
          var i;
          var patternChar = pattern.charAt(j);
          if (patternChar != "*") {
            for (i = textLength - 1; i >= 0; i--) {
              matchArray[i + 1] = !!matchArray[i] && (patternChar === "?" || patternChar === text.charAt(i));
            }
          } else {
            i = 0;
            while (i <= textLength && !matchArray[i]) {
              i++;
            }
            for (i; i <= textLength; i++) {
              matchArray[i] = true;
            }
          }
          matchArray[0] = matchArray[0] && patternChar === "*";
        }
        return matchArray[textLength];
      },
      LambdaUtils: {
        validTraceData: function(xAmznTraceId) {
          var valid = false;
          if (xAmznTraceId) {
            var data = utils.processTraceData(xAmznTraceId);
            valid = !!(data && data.root && data.parent && data.sampled);
          }
          return valid;
        },
        /**
         * Populates trace ID, parent ID, and sampled decision of given segment. Will always populate valid values,
         * even if xAmznTraceId contains missing or invalid values. This ensures downstream services receive valid
         * headers.
         * @param {Segment} segment - Facade segment to be populated
         * @param {String} xAmznTraceId - Raw Trace Header to supply trace data
         * @returns {Boolean} - true if required fields are present and Trace ID is valid, false otherwise
         */
        populateTraceData: function(segment, xAmznTraceId) {
          logger2.getLogger().debug("Lambda trace data found: " + xAmznTraceId);
          let traceData = utils.processTraceData(xAmznTraceId);
          var valid = false;
          if (!traceData) {
            traceData = {};
            logger2.getLogger().error("_X_AMZN_TRACE_ID is empty or has an invalid format");
          } else if (!traceData.root || !traceData.parent || !traceData.sampled) {
            logger2.getLogger().error("_X_AMZN_TRACE_ID is missing required information");
          } else {
            valid = true;
          }
          segment.trace_id = TraceID.FromString(traceData.root).toString();
          segment.id = traceData.parent || crypto4.randomBytes(8).toString("hex");
          if (traceData.root && segment.trace_id !== traceData.root) {
            logger2.getLogger().error("_X_AMZN_TRACE_ID contains invalid trace ID");
            valid = false;
          }
          if (!parseInt(traceData.sampled)) {
            segment.notTraced = true;
          } else {
            delete segment.notTraced;
          }
          if (traceData.data) {
            segment.additionalTraceData = traceData.data;
          }
          logger2.getLogger().debug("Segment started: " + JSON.stringify(traceData));
          return valid;
        }
      },
      /**
       * Splits out the data from the trace id format.  Used by the middleware.
       * @param {String} traceData - The additional trace data (typically in req.headers.x-amzn-trace-id).
       * @returns {object}
       * @alias module:mw_utils.processTraceData
       */
      processTraceData: function processTraceData(traceData) {
        var amznTraceData = {};
        var data = {};
        var reservedKeywords = ["root", "parent", "sampled", "self"];
        var remainingBytes = 256;
        if (!(typeof traceData === "string" && traceData)) {
          return amznTraceData;
        }
        traceData.split(";").forEach(function(header) {
          if (!header) {
            return;
          }
          var pair = header.split("=");
          if (pair[0] && pair[1]) {
            let key = pair[0].trim();
            let value = pair[1].trim();
            let lowerCaseKey = key.toLowerCase();
            let reserved = reservedKeywords.indexOf(lowerCaseKey) !== -1;
            if (reserved) {
              amznTraceData[lowerCaseKey] = value;
            } else if (!reserved && remainingBytes - (lowerCaseKey.length + value.length) >= 0) {
              data[key] = value;
              remainingBytes -= key.length + value.length;
            }
          }
        });
        amznTraceData["data"] = data;
        return amznTraceData;
      },
      /**
       * Makes a shallow copy of an object without given keys - keeps prototype
       * @param {Object} obj - The object to copy
       * @param {string[]} [keys=[]] - The keys that won't be copied
       * @param {boolean} [preservePrototype=false] - If true also copy prototype properties
       * @returns {}
       */
      objectWithoutProperties: function objectWithoutProperties(obj, keys, preservePrototype) {
        keys = Array.isArray(keys) ? keys : [];
        preservePrototype = typeof preservePrototype === "boolean" ? preservePrototype : false;
        var target = preservePrototype ? Object.create(Object.getPrototypeOf(obj)) : {};
        for (var property in obj) {
          if (keys.indexOf(property) >= 0) {
            continue;
          }
          if (!Object.prototype.hasOwnProperty.call(obj, property)) {
            continue;
          }
          target[property] = obj[property];
        }
        return target;
      },
      /**
       * Safely gets an integer from a string or number
       * @param {String | Number} - input to cast to integer
       * @returns {Number} - Integer representation of input, or 0 if input is not castable to int
       */
      safeParseInt: (val2) => {
        if (!val2 || isNaN(val2)) {
          return 0;
        }
        return parseInt(val2);
      }
    };
    module2.exports = utils;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/segments/segment_utils.js
var require_segment_utils = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/segments/segment_utils.js"(exports, module2) {
    "use strict";
    var { safeParseInt } = require_utils6();
    var logger2 = require_logger3();
    var DEFAULT_STREAMING_THRESHOLD = 100;
    var utils = {
      streamingThreshold: DEFAULT_STREAMING_THRESHOLD,
      getCurrentTime: function getCurrentTime() {
        return Date.now() / 1e3;
      },
      setOrigin: function setOrigin(origin) {
        this.origin = origin;
      },
      setPluginData: function setPluginData(pluginData) {
        this.pluginData = pluginData;
      },
      setSDKData: function setSDKData(sdkData) {
        this.sdkData = sdkData;
      },
      setServiceData: function setServiceData(serviceData) {
        this.serviceData = serviceData;
      },
      /**
       * Overrides the default streaming threshold (100).
       * The threshold represents the maximum number of subsegments on a single segment before
       * the SDK beings to send the completed subsegments out of band of the main segment.
       * Reduce this threshold if you see the 'Segment too large to send' error.
       * @param {number} threshold - The new threshold to use.
       * @memberof AWSXRay
       */
      setStreamingThreshold: function setStreamingThreshold(threshold) {
        if (isFinite(threshold) && threshold >= 0) {
          utils.streamingThreshold = threshold;
          logger2.getLogger().debug("Subsegment streaming threshold set to: " + threshold);
        } else {
          logger2.getLogger().error("Invalid threshold: " + threshold + ". Must be a whole number >= 0.");
        }
      },
      getStreamingThreshold: function getStreamingThreshold() {
        return utils.streamingThreshold;
      },
      /**
       * Parses an HTTP response object to return an X-Ray compliant HTTP response object.
       * @param {http.ServerResponse} res
       * @returns {Object} - X-Ray response object to be added to (sub)segment
       */
      getHttpResponseData: (res) => {
        const ret = {};
        if (!res) {
          return ret;
        }
        const status = safeParseInt(res.statusCode);
        if (status !== 0) {
          ret.status = status;
        }
        if (res.headers && res.headers["content-length"]) {
          ret.content_length = safeParseInt(res.headers["content-length"]);
        }
        return ret;
      }
    };
    module2.exports = utils;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/remote_request_data.js
var require_remote_request_data = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/remote_request_data.js"(exports, module2) {
    "use strict";
    var { getHttpResponseData } = require_segment_utils();
    var { stripQueryStringFromPath } = require_utils6();
    function RemoteRequestData(req, res, downstreamXRayEnabled) {
      this.init(req, res, downstreamXRayEnabled);
    }
    RemoteRequestData.prototype.init = function init(req, res, downstreamXRayEnabled) {
      this.request = {
        url: req.agent && req.agent.protocol ? req.agent.protocol + "//" + (req.host || req.getHeader("host")) + stripQueryStringFromPath(req.path) : "",
        method: req.method || ""
      };
      if (downstreamXRayEnabled) {
        this.request.traced = true;
      }
      if (res) {
        this.response = getHttpResponseData(res);
      }
    };
    module2.exports = RemoteRequestData;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/subsegment.js
var require_subsegment = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/subsegment.js"(exports, module2) {
    "use strict";
    var crypto4 = require("crypto");
    var CapturedException = require_captured_exception();
    var RemoteRequestData = require_remote_request_data();
    var SegmentEmitter = require_segment_emitter();
    var SegmentUtils = require_segment_utils();
    var Utils = require_utils6();
    var logger2 = require_logger3();
    function Subsegment(name) {
      this.init(name);
    }
    Subsegment.prototype.init = function init(name) {
      if (typeof name != "string") {
        throw new Error("Subsegment name must be of type string.");
      }
      this.id = crypto4.randomBytes(8).toString("hex");
      this.name = name;
      this.start_time = SegmentUtils.getCurrentTime();
      this.in_progress = true;
      this.counter = 0;
      this.notTraced = false;
    };
    Subsegment.prototype.addNewSubsegment = function addNewSubsegment(name) {
      const subsegment = new Subsegment(name);
      this.addSubsegment(subsegment);
      return subsegment;
    };
    Subsegment.prototype.addSubsegmentWithoutSampling = function addSubsegmentWithoutSampling(subsegment) {
      this.addSubsegment(subsegment);
      subsegment.notTraced = true;
    };
    Subsegment.prototype.addNewSubsegmentWithoutSampling = function addNewSubsegmentWithoutSampling(name) {
      const subsegment = new Subsegment(name);
      this.addSubsegment(subsegment);
      subsegment.notTraced = true;
      return subsegment;
    };
    Subsegment.prototype.addSubsegment = function(subsegment) {
      if (!(subsegment instanceof Subsegment)) {
        throw new Error("Failed to add subsegment:" + subsegment + ' to subsegment "' + this.name + '".  Not a subsegment.');
      }
      if (this.subsegments === void 0) {
        this.subsegments = [];
      }
      subsegment.segment = this.segment;
      subsegment.parent = this;
      subsegment.notTraced = subsegment.parent.notTraced;
      if (subsegment.end_time === void 0) {
        this.incrementCounter(subsegment.counter);
      }
      this.subsegments.push(subsegment);
    };
    Subsegment.prototype.removeSubsegment = function removeSubsegment(subsegment) {
      if (!(subsegment instanceof Subsegment)) {
        throw new Error("Failed to remove subsegment:" + subsegment + ' from subsegment "' + this.name + '".  Not a subsegment.');
      }
      if (this.subsegments !== void 0) {
        var index = this.subsegments.indexOf(subsegment);
        if (index >= 0) {
          this.subsegments.splice(index, 1);
        }
      }
    };
    Subsegment.prototype.addAttribute = function addAttribute(name, data) {
      this[name] = data;
    };
    Subsegment.prototype.addPrecursorId = function(id) {
      if (typeof id !== "string") {
        logger2.getLogger().error("Failed to add id:" + id + " to subsegment " + this.name + ".  Precursor Ids must be of type string.");
      }
      if (this.precursor_ids === void 0) {
        this.precursor_ids = [];
      }
      this.precursor_ids.push(id);
    };
    Subsegment.prototype.addAnnotation = function(key, value) {
      if (typeof value !== "boolean" && typeof value !== "string" && !isFinite(value)) {
        logger2.getLogger().error("Failed to add annotation key: " + key + " value: " + value + " to subsegment " + this.name + ". Value must be of type string, number or boolean.");
        return;
      }
      if (typeof key !== "string") {
        logger2.getLogger().error("Failed to add annotation key: " + key + " value: " + value + " to subsegment " + this.name + ". Key must be of type string.");
        return;
      }
      if (this.annotations === void 0) {
        this.annotations = {};
      }
      this.annotations[key] = value;
    };
    Subsegment.prototype.addMetadata = function(key, value, namespace) {
      if (typeof key !== "string") {
        logger2.getLogger().error("Failed to add metadata key: " + key + " value: " + value + " to subsegment " + this.name + ". Key must be of type string.");
        return;
      }
      if (namespace && typeof namespace !== "string") {
        logger2.getLogger().error("Failed to add metadata key: " + key + " value: " + value + " to subsegment " + this.name + ". Namespace must be of type string.");
        return;
      }
      var ns = namespace || "default";
      if (!this.metadata) {
        this.metadata = {};
      }
      if (!this.metadata[ns]) {
        this.metadata[ns] = {};
      }
      if (ns !== "__proto__") {
        this.metadata[ns][key] = value !== null && value !== void 0 ? value : "";
      }
    };
    Subsegment.prototype.addSqlData = function addSqlData(sqlData) {
      this.sql = sqlData;
    };
    Subsegment.prototype.addError = function addError(err, remote) {
      if (err == null || typeof err !== "object" && typeof err !== "string") {
        logger2.getLogger().error("Failed to add error:" + err + ' to subsegment "' + this.name + '".  Not an object or string literal.');
        return;
      }
      this.addFaultFlag();
      if (this.segment && this.segment.exception) {
        if (err === this.segment.exception.ex) {
          this.fault = true;
          this.cause = { id: this.segment.exception.cause, exceptions: [] };
          return;
        }
        delete this.segment.exception;
      }
      if (this.segment) {
        this.segment.exception = {
          ex: err,
          cause: this.id
        };
      } else {
      }
      if (this.cause === void 0) {
        this.cause = {
          working_directory: process.cwd(),
          exceptions: []
        };
      }
      this.cause.exceptions.unshift(new CapturedException(err, remote));
    };
    Subsegment.prototype.addRemoteRequestData = function addRemoteRequestData(req, res, downstreamXRayEnabled) {
      this.http = new RemoteRequestData(req, res, downstreamXRayEnabled);
      if ("traced" in this.http.request) {
        this.traced = this.http.request.traced;
        delete this.http.request.traced;
      }
    };
    Subsegment.prototype.addFaultFlag = function addFaultFlag() {
      this.fault = true;
    };
    Subsegment.prototype.addErrorFlag = function addErrorFlag() {
      this.error = true;
    };
    Subsegment.prototype.addThrottleFlag = function addThrottleFlag() {
      this.throttle = true;
    };
    Subsegment.prototype.close = function close(err, remote) {
      var root = this.segment;
      this.end_time = SegmentUtils.getCurrentTime();
      delete this.in_progress;
      if (err) {
        this.addError(err, remote);
      }
      if (this.parent) {
        this.parent.decrementCounter();
      }
      if (root && root.counter > SegmentUtils.getStreamingThreshold()) {
        if (this.streamSubsegments() && this.parent) {
          this.parent.removeSubsegment(this);
        }
      }
    };
    Subsegment.prototype.incrementCounter = function incrementCounter(additional) {
      this.counter = additional ? this.counter + additional + 1 : this.counter + 1;
      if (this.parent) {
        this.parent.incrementCounter(additional);
      }
    };
    Subsegment.prototype.decrementCounter = function decrementCounter() {
      this.counter--;
      if (this.parent) {
        this.parent.decrementCounter();
      }
    };
    Subsegment.prototype.isClosed = function isClosed() {
      return !this.in_progress;
    };
    Subsegment.prototype.flush = function flush() {
      if (!this.parent || !this.segment) {
        logger2.getLogger().error("Failed to flush subsegment: " + this.name + ". Subsegment must be added to a segment chain to flush.");
        return;
      }
      if (this.segment.trace_id) {
        if (this.segment.notTraced !== true && !this.notTraced) {
          SegmentEmitter.send(this);
        } else {
          logger2.getLogger().debug("Ignoring flush on subsegment " + this.id + ". Associated segment is marked as not sampled.");
        }
      } else {
        logger2.getLogger().debug("Ignoring flush on subsegment " + this.id + ". Associated segment is missing a trace ID.");
      }
    };
    Subsegment.prototype.streamSubsegments = function streamSubsegments() {
      if (this.isClosed() && this.counter <= 0) {
        this.flush();
        return true;
      } else if (this.subsegments && this.subsegments.length > 0) {
        var open = [];
        this.subsegments.forEach(function(child) {
          if (!child.streamSubsegments()) {
            open.push(child);
          }
        });
        this.subsegments = open;
      }
    };
    Subsegment.prototype.format = function format() {
      this.type = "subsegment";
      if (this.parent) {
        this.parent_id = this.parent.id;
      }
      if (this.segment) {
        this.trace_id = this.segment.trace_id;
      }
      return JSON.stringify(this);
    };
    Subsegment.prototype.toString = function toString() {
      return JSON.stringify(this);
    };
    Subsegment.prototype.toJSON = function toJSON() {
      var ignore = ["segment", "parent", "counter"];
      if (this.subsegments == null || this.subsegments.length === 0) {
        ignore.push("subsegments");
      }
      var thisCopy = Utils.objectWithoutProperties(this, ignore, false);
      return thisCopy;
    };
    module2.exports = Subsegment;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/segments/segment.js
var require_segment = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/segments/segment.js"(exports, module2) {
    "use strict";
    var crypto4 = require("crypto");
    var CapturedException = require_captured_exception();
    var SegmentEmitter = require_segment_emitter();
    var SegmentUtils = require_segment_utils();
    var Subsegment = require_subsegment();
    var TraceID = require_trace_id();
    var Utils = require_utils6();
    var logger2 = require_logger3();
    function Segment(name, rootId, parentId) {
      this.init(name, rootId, parentId);
    }
    Segment.prototype.init = function init(name, rootId, parentId) {
      if (typeof name != "string") {
        throw new Error("Segment name must be of type string.");
      }
      var traceId;
      if (rootId && typeof rootId == "string") {
        traceId = TraceID.FromString(rootId);
      } else {
        traceId = new TraceID();
      }
      var id = crypto4.randomBytes(8).toString("hex");
      var startTime = SegmentUtils.getCurrentTime();
      this.trace_id = traceId.toString();
      this.id = id;
      this.start_time = startTime;
      this.name = name || "";
      this.in_progress = true;
      this.counter = 0;
      if (parentId) {
        this.parent_id = parentId;
      }
      if (SegmentUtils.serviceData) {
        this.setServiceData(SegmentUtils.serviceData);
      }
      if (SegmentUtils.pluginData) {
        this.addPluginData(SegmentUtils.pluginData);
      }
      if (SegmentUtils.origin) {
        this.origin = SegmentUtils.origin;
      }
      if (SegmentUtils.sdkData) {
        this.setSDKData(SegmentUtils.sdkData);
      }
    };
    Segment.prototype.addIncomingRequestData = function addIncomingRequestData(data) {
      this.http = data;
    };
    Segment.prototype.addAnnotation = function addAnnotation(key, value) {
      if (typeof value !== "boolean" && typeof value !== "string" && !isFinite(value)) {
        logger2.getLogger().error("Failed to add annotation key: " + key + " value: " + value + " to subsegment " + this.name + ". Value must be of type string, number or boolean.");
        return;
      }
      if (typeof key !== "string") {
        logger2.getLogger().error("Failed to add annotation key: " + key + " value: " + value + " to subsegment " + this.name + ". Key must be of type string.");
        return;
      }
      if (this.annotations === void 0) {
        this.annotations = {};
      }
      this.annotations[key] = value;
    };
    Segment.prototype.setUser = function(user) {
      if (typeof user !== "string") {
        logger2.getLogger().error("Set user: " + user + " failed. User IDs must be of type string.");
      }
      this.user = user;
    };
    Segment.prototype.addMetadata = function(key, value, namespace) {
      if (typeof key !== "string") {
        logger2.getLogger().error("Failed to add metadata key: " + key + " value: " + value + " to segment " + this.name + ". Key must be of type string.");
        return;
      }
      if (namespace && typeof namespace !== "string") {
        logger2.getLogger().error("Failed to add metadata key: " + key + " value: " + value + " to segment " + this.name + ". Namespace must be of type string.");
        return;
      }
      var ns = namespace || "default";
      if (!this.metadata) {
        this.metadata = {};
      }
      if (!this.metadata[ns]) {
        this.metadata[ns] = {};
      }
      if (ns !== "__proto__") {
        this.metadata[ns][key] = value !== null && value !== void 0 ? value : "";
      }
    };
    Segment.prototype.setSDKData = function setSDKData(data) {
      if (!data) {
        logger2.getLogger().error("Add SDK data: " + data + " failed.Must not be empty.");
        return;
      }
      if (!this.aws) {
        this.aws = {};
      }
      this.aws.xray = data;
    };
    Segment.prototype.setMatchedSamplingRule = function setMatchedSamplingRule(ruleName) {
      if (this.aws) {
        this.aws = JSON.parse(JSON.stringify(this.aws));
      }
      if (this.aws && this.aws["xray"]) {
        this.aws.xray["rule_name"] = ruleName;
      } else {
        this.aws = { xray: { "rule_name": ruleName } };
      }
    };
    Segment.prototype.setServiceData = function setServiceData(data) {
      if (!data) {
        logger2.getLogger().error("Add service data: " + data + " failed.Must not be empty.");
        return;
      }
      this.service = data;
    };
    Segment.prototype.addPluginData = function addPluginData(data) {
      if (this.aws === void 0) {
        this.aws = {};
      }
      Object.assign(this.aws, data);
    };
    Segment.prototype.addNewSubsegment = function addNewSubsegment(name) {
      var subsegment = new Subsegment(name);
      this.addSubsegment(subsegment);
      return subsegment;
    };
    Segment.prototype.addSubsegmentWithoutSampling = function addSubsegmentWithoutSampling(subsegment) {
      this.addSubsegment(subsegment);
      subsegment.notTraced = true;
    };
    Segment.prototype.addNewSubsegmentWithoutSampling = function addNewSubsegmentWithoutSampling(name) {
      const subsegment = new Subsegment(name);
      this.addSubsegment(subsegment);
      subsegment.notTraced = true;
      return subsegment;
    };
    Segment.prototype.addSubsegment = function addSubsegment(subsegment) {
      if (!(subsegment instanceof Subsegment)) {
        throw new Error("Cannot add subsegment: " + subsegment + ". Not a subsegment.");
      }
      if (this.subsegments === void 0) {
        this.subsegments = [];
      }
      subsegment.segment = this;
      subsegment.parent = this;
      subsegment.notTraced = subsegment.parent.notTraced;
      this.subsegments.push(subsegment);
      if (!subsegment.end_time) {
        this.incrementCounter(subsegment.counter);
      }
    };
    Segment.prototype.removeSubsegment = function removeSubsegment(subsegment) {
      if (!(subsegment instanceof Subsegment)) {
        throw new Error("Failed to remove subsegment:" + subsegment + ' from subsegment "' + this.name + '".  Not a subsegment.');
      }
      if (this.subsegments !== void 0) {
        var index = this.subsegments.indexOf(subsegment);
        if (index >= 0) {
          this.subsegments.splice(index, 1);
        }
      }
    };
    Segment.prototype.addError = function addError(err, remote) {
      if (err == null || typeof err !== "object" && typeof err !== "string") {
        logger2.getLogger().error("Failed to add error:" + err + ' to subsegment "' + this.name + '".  Not an object or string literal.');
        return;
      }
      this.addFaultFlag();
      if (this.exception) {
        if (err === this.exception.ex) {
          this.cause = { id: this.exception.cause };
          delete this.exception;
          return;
        }
        delete this.exception;
      }
      if (this.cause === void 0) {
        this.cause = {
          working_directory: process.cwd(),
          exceptions: []
        };
      }
      this.cause.exceptions.push(new CapturedException(err, remote));
    };
    Segment.prototype.addFaultFlag = function addFaultFlag() {
      this.fault = true;
    };
    Segment.prototype.addErrorFlag = function addErrorFlag() {
      this.error = true;
    };
    Segment.prototype.addThrottleFlag = function addThrottleFlag() {
      this.throttle = true;
    };
    Segment.prototype.isClosed = function isClosed() {
      return !this.in_progress;
    };
    Segment.prototype.incrementCounter = function incrementCounter(additional) {
      this.counter = additional ? this.counter + additional + 1 : this.counter + 1;
      if (this.counter > SegmentUtils.streamingThreshold && this.subsegments && this.subsegments.length > 0) {
        var open = [];
        this.subsegments.forEach(function(child) {
          if (!child.streamSubsegments()) {
            open.push(child);
          }
        });
        this.subsegments = open;
      }
    };
    Segment.prototype.decrementCounter = function decrementCounter() {
      this.counter--;
      if (this.counter <= 0 && this.isClosed()) {
        this.flush();
      }
    };
    Segment.prototype.close = function(err, remote) {
      if (!this.end_time) {
        this.end_time = SegmentUtils.getCurrentTime();
      }
      if (err !== void 0) {
        this.addError(err, remote);
      }
      delete this.in_progress;
      delete this.exception;
      if (this.counter <= 0) {
        this.flush();
      }
    };
    Segment.prototype.flush = function flush() {
      if (this.notTraced !== true) {
        delete this.exception;
        var thisCopy = Utils.objectWithoutProperties(this, ["counter", "notTraced"], true);
        SegmentEmitter.send(thisCopy);
      }
    };
    Segment.prototype.format = function format() {
      var ignore = ["segment", "parent", "counter"];
      if (this.subsegments == null || this.subsegments.length === 0) {
        ignore.push("subsegments");
      }
      var thisCopy = Utils.objectWithoutProperties(this, ignore, false);
      return JSON.stringify(thisCopy);
    };
    Segment.prototype.toString = function toString() {
      return JSON.stringify(this);
    };
    module2.exports = Segment;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/context_utils.js
var require_context_utils = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/context_utils.js"(exports, module2) {
    "use strict";
    var cls = require_context();
    var logger2 = require_logger3();
    var Segment = require_segment();
    var Subsegment = require_subsegment();
    var cls_mode = true;
    var NAMESPACE = "AWSXRay";
    var SEGMENT = "segment";
    var contextOverride = false;
    var contextUtils = {
      CONTEXT_MISSING_STRATEGY: {
        RUNTIME_ERROR: {
          contextMissing: function contextMissingRuntimeError(message) {
            throw new Error(message);
          }
        },
        LOG_ERROR: {
          contextMissing: function contextMissingLogError(message) {
            var err = new Error(message);
            logger2.getLogger().error(err.stack);
          }
        },
        IGNORE_ERROR: {
          contextMissing: function contextMissingIgnoreError() {
          }
        }
      },
      contextMissingStrategy: {},
      /**
       * Resolves the segment or subsegment given manual mode and params on the call required.
       * @param [Segment|Subsegment] segment - The segment manually provided via params.XraySegment, if provided.
       * @returns {Segment|Subsegment}
       * @alias module:context_utils.resolveManualSegmentParams
       */
      resolveManualSegmentParams: function resolveManualSegmentParams(params) {
        if (params && !contextUtils.isAutomaticMode()) {
          var xraySegment = params.XRaySegment || params.XraySegment;
          var segment = params.Segment;
          var found = null;
          if (xraySegment && (xraySegment instanceof Segment || xraySegment instanceof Subsegment)) {
            found = xraySegment;
            delete params.XRaySegment;
            delete params.XraySegment;
          } else if (segment && (segment instanceof Segment || segment instanceof Subsegment)) {
            found = segment;
            delete params.Segment;
          }
          return found;
        }
      },
      /**
       * Gets current CLS namespace for X-Ray SDK or creates one if absent.
       * @returns {Namespace}
       * @alias module:context_utils.getNamespace
       */
      getNamespace: function getNamespace() {
        return cls.getNamespace(NAMESPACE) || cls.createNamespace(NAMESPACE);
      },
      /**
       * Resolves the segment or subsegment given manual or automatic mode.
       * @param [Segment|Subsegment] segment - The segment manually provided, if provided.
       * @returns {Segment|Subsegment}
       * @alias module:context_utils.resolveSegment
       */
      resolveSegment: function resolveSegment(segment) {
        if (cls_mode) {
          return this.getSegment();
        } else if (segment && !cls_mode) {
          return segment;
        } else if (!segment && !cls_mode) {
          contextUtils.contextMissingStrategy.contextMissing("No sub/segment specified. A sub/segment must be provided for manual mode.");
        }
      },
      /**
       * Returns the current segment or subsegment.  For use with in automatic mode only.
       * @returns {Segment|Subsegment}
       * @alias module:context_utils.getSegment
       */
      getSegment: function getSegment() {
        if (cls_mode) {
          var segment = contextUtils.getNamespace(NAMESPACE).get(SEGMENT);
          if (!segment) {
            contextUtils.contextMissingStrategy.contextMissing("Failed to get the current sub/segment from the context.");
          } else if (segment instanceof Segment && process.env.LAMBDA_TASK_ROOT && segment.facade == true) {
            segment.resolveLambdaTraceData();
          }
          return segment;
        } else {
          contextUtils.contextMissingStrategy.contextMissing("Cannot get sub/segment from context. Not supported in manual mode.");
        }
      },
      /**
       * Sets the current segment or subsegment.  For use with in automatic mode only.
       * @param [Segment|Subsegment] segment - The sub/segment to set.
       * @returns {Segment|Subsegment}
       * @alias module:context_utils.setSegment
       */
      setSegment: function setSegment(segment) {
        if (cls_mode) {
          if (!contextUtils.getNamespace(NAMESPACE).set(SEGMENT, segment)) {
            logger2.getLogger().warn("Failed to set the current sub/segment on the context.");
          }
        } else {
          contextUtils.contextMissingStrategy.contextMissing("Cannot set sub/segment on context. Not supported in manual mode.");
        }
      },
      /**
       * Returns true if in automatic mode, otherwise false.
       * @returns {Segment|Subsegment}
       * @alias module:context_utils.isAutomaticMode
       */
      isAutomaticMode: function isAutomaticMode() {
        return cls_mode;
      },
      /**
       * Enables automatic mode. Automatic mode uses 'cls-hooked'.
       * @see https://github.com/jeff-lewis/cls-hooked
       * @alias module:context_utils.enableAutomaticMode
       */
      enableAutomaticMode: function enableAutomaticMode() {
        cls_mode = true;
        contextUtils.getNamespace(NAMESPACE);
        logger2.getLogger().debug("Overriding AWS X-Ray SDK mode. Set to automatic mode.");
      },
      /**
       * Disables automatic mode. Current segment or subsegment then must be passed manually
       * via the parent optional on captureFunc, captureAsyncFunc etc.
       * @alias module:context_utils.enableManualMode
       */
      enableManualMode: function enableManualMode() {
        cls_mode = false;
        if (cls.getNamespace(NAMESPACE)) {
          cls.destroyNamespace(NAMESPACE);
        }
        logger2.getLogger().debug("Overriding AWS X-Ray SDK mode. Set to manual mode.");
      },
      /**
       * Sets the context missing strategy if no context missing strategy is set using the environment variable with
       * key AWS_XRAY_CONTEXT_MISSING. The context missing strategy's contextMissing function will be called whenever
       * trace context is not found.
       * @param {string|function} strategy - The strategy to set. Valid string values are 'LOG_ERROR' and 'RUNTIME_ERROR'.
       *                                     Alternatively, a custom function can be supplied, which takes a error message string.
       */
      setContextMissingStrategy: function setContextMissingStrategy(strategy) {
        if (!contextOverride) {
          if (typeof strategy === "string") {
            var lookupStrategy = contextUtils.CONTEXT_MISSING_STRATEGY[strategy.toUpperCase()];
            if (lookupStrategy) {
              contextUtils.contextMissingStrategy.contextMissing = lookupStrategy.contextMissing;
              if (process.env.AWS_XRAY_CONTEXT_MISSING) {
                logger2.getLogger().debug("AWS_XRAY_CONTEXT_MISSING is set. Configured context missing strategy to " + process.env.AWS_XRAY_CONTEXT_MISSING + ".");
              } else {
                logger2.getLogger().debug("Configured context missing strategy to: " + strategy);
              }
            } else {
              throw new Error("Invalid context missing strategy: " + strategy + ". Valid values are " + Object.keys(contextUtils.CONTEXT_MISSING_STRATEGY) + ".");
            }
          } else if (typeof strategy === "function") {
            contextUtils.contextMissingStrategy.contextMissing = strategy;
            logger2.getLogger().info("Configured custom context missing strategy to function: " + strategy.name);
          } else {
            throw new Error("Context missing strategy must be either a string or a custom function.");
          }
        } else {
          logger2.getLogger().warn("Ignoring call to setContextMissingStrategy as AWS_XRAY_CONTEXT_MISSING is set. The current context missing strategy will not be changed.");
        }
      }
    };
    if (process.env.AWS_XRAY_MANUAL_MODE) {
      cls_mode = false;
      logger2.getLogger().debug("Starting the AWS X-Ray SDK in manual mode.");
    } else {
      cls.createNamespace(NAMESPACE);
      logger2.getLogger().debug("Starting the AWS X-Ray SDK in automatic mode (default).");
    }
    if (process.env.AWS_XRAY_CONTEXT_MISSING) {
      contextUtils.setContextMissingStrategy(process.env.AWS_XRAY_CONTEXT_MISSING);
      contextOverride = true;
    } else {
      contextUtils.contextMissingStrategy.contextMissing = contextUtils.CONTEXT_MISSING_STRATEGY.LOG_ERROR.contextMissing;
      logger2.getLogger().debug("Using default context missing strategy: LOG_ERROR");
    }
    module2.exports = contextUtils;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/middleware/incoming_request_data.js
var require_incoming_request_data = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/middleware/incoming_request_data.js"(exports, module2) {
    "use strict";
    var { getHttpResponseData } = require_segment_utils();
    function IncomingRequestData(req) {
      this.init(req);
    }
    IncomingRequestData.prototype.init = function init(req) {
      var forwarded = !!req.headers["x-forwarded-for"];
      var url;
      if (req.connection) {
        url = (req.connection.secure || req.connection.encrypted ? "https://" : "http://") + ((req.headers["host"] || "") + (req.url || ""));
      }
      this.request = {
        method: req.method || "",
        user_agent: req.headers["user-agent"] || "",
        client_ip: getClientIp(req) || "",
        url: url || ""
      };
      if (forwarded) {
        this.request.x_forwarded_for = forwarded;
      }
    };
    var getClientIp = function getClientIp2(req) {
      var clientIp;
      if (req.headers["x-forwarded-for"]) {
        clientIp = (req.headers["x-forwarded-for"] || "").split(",")[0];
      } else if (req.connection && req.connection.remoteAddress) {
        clientIp = req.connection.remoteAddress;
      } else if (req.socket && req.socket.remoteAddress) {
        clientIp = req.socket.remoteAddress;
      } else if (req.connection && req.connection.socket && req.connection.socket.remoteAddress) {
        clientIp = req.connection.socket.remoteAddress;
      }
      return clientIp;
    };
    IncomingRequestData.prototype.close = function close(res) {
      this.response = getHttpResponseData(res);
    };
    module2.exports = IncomingRequestData;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/local_reservoir.js
var require_local_reservoir = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/local_reservoir.js"(exports, module2) {
    "use strict";
    function LocalReservoir(fixedTarget, fallbackRate) {
      this.init(fixedTarget, fallbackRate);
    }
    LocalReservoir.prototype.init = function init(fixedTarget, fallbackRate) {
      this.usedThisSecond = 0;
      if (typeof fixedTarget === "number" && fixedTarget % 1 === 0 && fixedTarget >= 0) {
        this.fixedTarget = fixedTarget;
      } else {
        throw new Error('Error in sampling file. Rule attribute "fixed_target" must be a non-negative integer.');
      }
      if (typeof fallbackRate === "number" && fallbackRate >= 0 && fallbackRate <= 1) {
        this.fallbackRate = fallbackRate;
      } else {
        throw new Error('Error in sampling file. Rule attribute "rate" must be a number between 0 and 1 inclusive.');
      }
    };
    LocalReservoir.prototype.isSampled = function isSampled() {
      var now = Math.round((/* @__PURE__ */ new Date()).getTime() / 1e3);
      if (now !== this.thisSecond) {
        this.usedThisSecond = 0;
        this.thisSecond = now;
      }
      if (this.usedThisSecond >= this.fixedTarget) {
        return Math.random() < this.fallbackRate;
      }
      this.usedThisSecond++;
      return true;
    };
    module2.exports = LocalReservoir;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/resources/default_sampling_rules.json
var require_default_sampling_rules = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/resources/default_sampling_rules.json"(exports, module2) {
    module2.exports = {
      default: {
        fixed_target: 1,
        rate: 0.05
      },
      version: 2
    };
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/local_sampler.js
var require_local_sampler = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/local_sampler.js"(exports, module2) {
    "use strict";
    var fs = require("fs");
    var LocalReservoir = require_local_reservoir();
    var Utils = require_utils6();
    var defaultRules = require_default_sampling_rules();
    var logger2 = require_logger3();
    var LocalSampler = {
      /**
       * Makes a sample decision based on the sample request.
       * @param {object} sampleRequest - Contains information for rules matching.
       * @module LocalSampler
       * @function shouldSample
       */
      shouldSample: function shouldSample(sampleRequest) {
        var host = sampleRequest.host;
        var httpMethod = sampleRequest.httpMethod;
        var urlPath = sampleRequest.urlPath;
        var formatted = "{ http_method: " + httpMethod + ", host: " + host + ", url_path: " + urlPath + " }";
        var matched;
        this.rules.some(function(rule) {
          if (rule.default || (host == null || Utils.wildcardMatch(rule.host, host) && (httpMethod == null || Utils.wildcardMatch(rule.http_method, httpMethod)) && (urlPath == null || Utils.wildcardMatch(rule.url_path, urlPath)))) {
            matched = rule.reservoir;
            logger2.getLogger().debug("Local sampling rule match found for " + formatted + ". Matched " + (rule.default ? "default" : "{ http_method: " + rule.http_method + ", host: " + rule.host + ", url_path: " + rule.url_path + " }") + ". Using fixed_target: " + matched.fixedTarget + " and rate: " + matched.fallbackRate + ".");
            return true;
          }
        });
        if (matched) {
          return matched.isSampled();
        } else {
          logger2.getLogger().debug("No sampling rule matched for " + formatted);
          return false;
        }
      },
      /**
       * Set local rules for making sampling decisions.
       * @module LocalSampler
       * @function setLocalRules
       */
      setLocalRules: function setLocalRules(source) {
        if (source) {
          if (typeof source === "string") {
            logger2.getLogger().info("Using custom sampling rules file: " + source);
            this.rules = loadRulesConfig(JSON.parse(fs.readFileSync(source, "utf8")));
          } else {
            logger2.getLogger().info("Using custom sampling rules source.");
            this.rules = loadRulesConfig(source);
          }
        } else {
          this.rules = parseRulesConfig(defaultRules);
        }
      }
    };
    var loadRulesConfig = function loadRulesConfig2(config) {
      if (!config.version) {
        throw new Error('Error in sampling file. Missing "version" attribute.');
      }
      if (config.version === 1 || config.version === 2) {
        return parseRulesConfig(config);
      } else {
        throw new Error('Error in sampling file. Unknown version "' + config.version + '".');
      }
    };
    var parseRulesConfig = function parseRulesConfig2(config) {
      var defaultRule;
      var rules = [];
      if (config.default) {
        var missing = [];
        for (var key in config.default) {
          if (key !== "fixed_target" && key !== "rate") {
            throw new Error("Error in sampling file. Invalid attribute for default: " + key + '. Valid attributes for default are "fixed_target" and "rate".');
          } else if (typeof config.default[key] !== "number") {
            throw new Error("Error in sampling file. Default " + key + " must be a number.");
          }
        }
        if (typeof config.default.fixed_target === "undefined") {
          missing.push("fixed_target");
        }
        if (typeof config.default.rate === "undefined") {
          missing.push("rate");
        }
        if (missing.length !== 0) {
          throw new Error("Error in sampling file. Missing required attributes for default: " + missing + ".");
        }
        defaultRule = { default: true, reservoir: new LocalReservoir(config.default.fixed_target, config.default.rate) };
      } else {
        throw new Error('Error in sampling file. Expecting "default" object to be defined with attributes "fixed_target" and "rate".');
      }
      if (Array.isArray(config.rules)) {
        config.rules.forEach(function(rawRule) {
          var params = {};
          var required;
          if (config.version === 2) {
            required = { host: 1, http_method: 1, url_path: 1, fixed_target: 1, rate: 1 };
          }
          if (config.version === 1) {
            required = { service_name: 1, http_method: 1, url_path: 1, fixed_target: 1, rate: 1 };
          }
          for (var key2 in rawRule) {
            var value = rawRule[key2];
            if (!required[key2] && key2 != "description") {
              throw new Error("Error in sampling file. Rule " + JSON.stringify(rawRule) + " has invalid attribute: " + key2 + ".");
            } else if (key2 != "description" && !value && value !== 0) {
              throw new Error("Error in sampling file. Rule " + JSON.stringify(rawRule) + ' attribute "' + key2 + '" has invalid value: ' + value + ".");
            } else {
              if (config.version === 2) {
                params[key2] = value;
              }
              if (config.version === 1 && key2 === "service_name") {
                params["host"] = value;
              } else {
                params[key2] = value;
              }
              delete required[key2];
            }
          }
          if (Object.keys(required).length !== 0 && required.constructor === Object) {
            throw new Error("Error in sampling file. Rule " + JSON.stringify(rawRule) + " is missing required attributes: " + Object.keys(required) + ".");
          }
          var rule = params;
          rule.reservoir = new LocalReservoir(rawRule.fixed_target, rawRule.rate);
          rules.push(rule);
        });
      }
      rules.push(defaultRule);
      return rules;
    };
    LocalSampler.setLocalRules();
    module2.exports = LocalSampler;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/reservoir.js
var require_reservoir = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/reservoir.js"(exports, module2) {
    "use strict";
    function Reservoir() {
      this.init();
    }
    Reservoir.prototype.init = function init() {
      this.quota = null;
      this.TTL = null;
      this.takenThisSec = 0;
      this.borrowedThisSec = 0;
      this.reportInterval = 1;
      this.reportElapsed = 0;
    };
    Reservoir.prototype.borrowOrTake = function borrowOrTake(now, canBorrow) {
      this.adjustThisSec(now);
      if (this.quota >= 0 && this.TTL >= now) {
        if (this.takenThisSec >= this.quota) {
          return false;
        }
        this.takenThisSec++;
        return "take";
      }
      if (canBorrow) {
        if (this.borrowedThisSec >= 1) {
          return false;
        }
        this.borrowedThisSec++;
        return "borrow";
      }
    };
    Reservoir.prototype.adjustThisSec = function adjustThisSec(now) {
      if (now !== this.thisSec) {
        this.takenThisSec = 0;
        this.borrowedThisSec = 0;
        this.thisSec = now;
      }
    };
    Reservoir.prototype.loadNewQuota = function loadNewQuota(quota, TTL, interval) {
      if (quota) {
        this.quota = quota;
      }
      if (TTL) {
        this.TTL = TTL;
      }
      if (interval) {
        this.reportInterval = interval / 10;
      }
    };
    Reservoir.prototype.timeToReport = function timeToReport() {
      if (this.reportElapsed + 1 >= this.reportInterval) {
        this.reportElapsed = 0;
        return true;
      } else {
        this.reportElapsed += 1;
        return false;
      }
    };
    module2.exports = Reservoir;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/sampling_rule.js
var require_sampling_rule = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/sampling_rule.js"(exports, module2) {
    "use strict";
    var Utils = require_utils6();
    var Reservoir = require_reservoir();
    function SamplingRule(name, priority, rate, reservoirSize, host, httpMethod, urlPath, serviceName2, serviceType) {
      this.init(name, priority, rate, reservoirSize, host, httpMethod, urlPath, serviceName2, serviceType);
    }
    SamplingRule.prototype.init = function init(name, priority, rate, reservoirSize, host, httpMethod, urlPath, serviceName2, serviceType) {
      this.name = name;
      this.priority = priority;
      this.rate = rate;
      this.host = host;
      this.httpMethod = httpMethod;
      this.urlPath = urlPath;
      this.serviceName = serviceName2;
      this.serviceType = serviceType;
      this.reservoir = new Reservoir();
      this.borrow = !!reservoirSize;
      this.resetStatistics();
    };
    SamplingRule.prototype.match = function match(sampleRequest) {
      var host = sampleRequest.host;
      var httpMethod = sampleRequest.httpMethod;
      var serviceName2 = sampleRequest.serviceName;
      var urlPath = sampleRequest.urlPath;
      var serviceType = sampleRequest.serviceType;
      return this.isDefault() || (!host || Utils.wildcardMatch(this.host, host)) && (!httpMethod || Utils.wildcardMatch(this.httpMethod, httpMethod)) && (!serviceName2 || Utils.wildcardMatch(this.serviceName, serviceName2)) && (!urlPath || Utils.wildcardMatch(this.urlPath, urlPath)) && (!serviceType || Utils.wildcardMatch(this.serviceType, serviceType));
    };
    SamplingRule.prototype.snapshotStatistics = function snapshotStatistics() {
      var statistics = {
        requestCount: this.requestCount,
        borrowCount: this.borrowCount,
        sampledCount: this.sampledCount
      };
      this.resetStatistics();
      return statistics;
    };
    SamplingRule.prototype.merge = function merge(rule) {
      this.reservoir = rule.reservoir;
      this.requestCount = rule.requestCount;
      this.borrowCount = rule.borrowCount;
      this.sampledCount = rule.sampledCount;
      rule = null;
    };
    SamplingRule.prototype.isDefault = function isDefault() {
      return this.name === "Default";
    };
    SamplingRule.prototype.incrementRequestCount = function incrementRequestCount() {
      this.requestCount++;
    };
    SamplingRule.prototype.incrementBorrowCount = function incrementBorrowCount() {
      this.borrowCount++;
    };
    SamplingRule.prototype.incrementSampledCount = function incrementSampledCount() {
      this.sampledCount++;
    };
    SamplingRule.prototype.setRate = function setRate(rate) {
      this.rate = rate;
    };
    SamplingRule.prototype.getRate = function getRate() {
      return this.rate;
    };
    SamplingRule.prototype.getName = function getName() {
      return this.name;
    };
    SamplingRule.prototype.getPriority = function getPriority() {
      return this.priority;
    };
    SamplingRule.prototype.getReservoir = function getReservoir() {
      return this.reservoir;
    };
    SamplingRule.prototype.resetStatistics = function resetStatistics() {
      this.requestCount = 0;
      this.borrowCount = 0;
      this.sampledCount = 0;
    };
    SamplingRule.prototype.canBorrow = function canBorrow() {
      return this.borrow;
    };
    SamplingRule.prototype.everMatched = function everMatched() {
      return this.requestCount > 0;
    };
    SamplingRule.prototype.timeToReport = function timeToReport() {
      return this.reservoir.timeToReport();
    };
    module2.exports = SamplingRule;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/service_connector.js
var require_service_connector = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/service_connector.js"(exports, module2) {
    "use strict";
    var crypto4 = require("crypto");
    var logger2 = require_logger3();
    var SamplingRule = require_sampling_rule();
    var DaemonConfig = require_daemon_config();
    var util = require("util");
    var http = require("http");
    var ServiceConnector = {
      // client_id is a 12 byte cryptographically secure random hex
      // identifying the SDK instance and is generated during SDK initialization/
      // This is required when reporting sampling to X-Ray back-end.
      clientId: crypto4.randomBytes(12).toString("hex"),
      samplingRulesPath: "/GetSamplingRules",
      samplingTargetsPath: "/SamplingTargets",
      logger: logger2,
      httpClient: http,
      fetchSamplingRules: function fetchSamplingRules(callback) {
        const body = "{}";
        const options = getOptions(this.samplingRulesPath, body.length);
        const httpReq = this.httpClient.__request ? this.httpClient.__request : this.httpClient.request;
        const req = httpReq(options, (res) => {
          var data = "";
          res.on("data", (d) => {
            data += d;
          });
          res.on("error", (error) => {
            callback(error);
          });
          res.on("end", () => {
            var dataObj;
            try {
              dataObj = JSON.parse(data);
            } catch (err) {
              callback(err);
              return;
            }
            if (!dataObj) {
              callback(new Error("AWS X-Ray GetSamplingRules API returned empty response"));
              return;
            }
            var newRules = assembleRules(dataObj);
            callback(null, newRules);
          });
        });
        req.on("error", () => {
          callback(new Error(`Failed to connect to X-Ray daemon at ${options.hostname}:${options.port} to get sampling rules.`));
        });
        req.write(body);
        req.end();
      },
      fetchTargets: function fetchTargets(rules, callback) {
        const body = JSON.stringify(constructStatisticsDocs(rules));
        const options = getOptions(this.samplingTargetsPath, body.length);
        const httpReq = this.httpClient.__request ? this.httpClient.__request : this.httpClient.request;
        const req = httpReq(options, (res) => {
          var data = "";
          res.on("data", (d) => {
            data += d;
          });
          res.on("error", (error) => {
            callback(error);
          });
          res.on("end", () => {
            var dataObj;
            try {
              dataObj = JSON.parse(data);
            } catch (err) {
              callback(err);
              return;
            }
            if (!dataObj || typeof dataObj["LastRuleModification"] != "number") {
              callback(new Error("AWS X-Ray SamplingTargets API returned invalid response"));
              return;
            }
            var targetsMapping = assembleTargets(dataObj);
            var ruleFreshness = dateToEpoch(dataObj["LastRuleModification"]);
            callback(null, targetsMapping, ruleFreshness);
          });
        });
        req.on("error", () => {
          callback(new Error(`Failed to connect to X-Ray daemon at ${options.hostname}:${options.port} to get sampling targets.`));
        });
        req.write(body);
        req.end();
      }
    };
    var constructStatisticsDocs = function constructStatisticsDocs2(rules) {
      var documents = [];
      var now = Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3);
      rules.forEach(function(rule) {
        var statistics = rule.snapshotStatistics();
        var doc = {
          "RuleName": rule.getName(),
          "ClientID": ServiceConnector.clientId,
          "RequestCount": statistics.requestCount,
          "BorrowCount": statistics.borrowCount,
          "SampledCount": statistics.sampledCount,
          "Timestamp": now
        };
        documents.push(doc);
      });
      return { SamplingStatisticsDocuments: documents };
    };
    var assembleRules = function assembleRules2(data) {
      var newRules = [];
      var ruleList = data["SamplingRuleRecords"] || [];
      ruleList.forEach(function(ruleRecord) {
        ruleRecord = ruleRecord["SamplingRule"];
        if (isRuleValid(ruleRecord)) {
          var newRule = new SamplingRule(ruleRecord["RuleName"], ruleRecord["Priority"], ruleRecord["FixedRate"], ruleRecord["ReservoirSize"], ruleRecord["Host"], ruleRecord["HTTPMethod"], ruleRecord["URLPath"], ruleRecord["ServiceName"], ruleRecord["ServiceType"]);
          newRules.push(newRule);
        }
      });
      return newRules;
    };
    var assembleTargets = function assembleTargets2(data) {
      var docs = data["SamplingTargetDocuments"] || [];
      var targetsMapping = {};
      docs.forEach(function(doc) {
        var newTarget = {
          rate: doc["FixedRate"],
          quota: doc["ReservoirQuota"],
          TTL: dateToEpoch(doc["ReservoirQuotaTTL"]),
          interval: doc["Interval"]
        };
        targetsMapping[doc["RuleName"]] = newTarget;
      });
      return targetsMapping;
    };
    var isRuleValid = function isRuleValid2(record) {
      return record["Version"] === 1 && record["ResourceARN"] === "*" && record["Attributes"] && Object.keys(record["Attributes"]).length === 0 && record["ServiceType"] && record["RuleName"] && record["Priority"] && typeof record["FixedRate"] == "number";
    };
    var dateToEpoch = function dateToEpoch2(date) {
      return new Date(date).getTime() / 1e3;
    };
    var getOptions = function getOptions2(path, contentLength) {
      const options = {
        hostname: DaemonConfig.tcp_ip,
        port: DaemonConfig.tcp_port,
        method: "POST",
        path,
        headers: {
          "Content-Type": "application/json",
          "Content-Length": contentLength,
          "Host": util.format("%s:%d", DaemonConfig.tcp_ip, DaemonConfig.tcp_port)
        }
      };
      return options;
    };
    module2.exports = ServiceConnector;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/rule_cache.js
var require_rule_cache = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/rule_cache.js"(exports, module2) {
    "use strict";
    var TTL = 60 * 60;
    var RuleCache = {
      rules: [],
      lastUpdated: null,
      /**
       * Tries to find a valid rule that matches the sample request.
       * @param {object} sampleRequest - Contains information for rules matching.
       * @param {number} now - Current epoch in seconds.
       * @module RuleCache
       * @function getMatchedRule
       */
      getMatchedRule: function getMatchedRule(sampleRequest, now) {
        if (isExpired(now)) {
          return null;
        }
        var matchedRule;
        this.rules.forEach(function(rule) {
          if (!matchedRule && rule.match(sampleRequest)) {
            matchedRule = rule;
          }
          if (rule.isDefault() && !matchedRule) {
            matchedRule = rule;
          }
        });
        return matchedRule;
      },
      /**
       * Load rules fetched from X-Ray service in order sorted by priorities.
       * @param {object} rules - Newly fetched rules to load.
       * @module RuleCache
       * @function loadRules
       */
      loadRules: function loadRules(rules) {
        var oldRules = {};
        this.rules.forEach(function(rule) {
          oldRules[rule.getName()] = rule;
        });
        this.rules = rules;
        this.rules.forEach(function(rule) {
          var oldRule = oldRules[rule.getName()];
          if (oldRule) {
            rule.merge(oldRule);
          }
        });
        this.rules.sort(function(a, b) {
          var v = a.getPriority() - b.getPriority();
          if (v !== 0) {
            return v;
          }
          if (a.getName() > b.getName()) {
            return 1;
          } else {
            return -1;
          }
        });
      },
      /**
       * Load targets fetched from X-Ray service.
       * @param {object} targetsMapping - Newly fetched targets map with rule name as key.
       * @module RuleCache
       * @function loadTargets
       */
      loadTargets: function loadTargets(targetsMapping) {
        this.rules.forEach(function(rule) {
          var target = targetsMapping[rule.getName()];
          if (target) {
            rule.getReservoir().loadNewQuota(target.quota, target.TTL, target.interval);
            rule.setRate(target.rate);
          }
        });
      },
      getRules: function getRules() {
        return this.rules;
      },
      timestamp: function timestamp(now) {
        this.lastUpdated = now;
      },
      getLastUpdated: function getLastUpdated() {
        return this.lastUpdated;
      }
    };
    var isExpired = function isExpired2(now) {
      if (!RuleCache.getLastUpdated()) {
        return true;
      }
      return now > RuleCache.getLastUpdated() + TTL;
    };
    module2.exports = RuleCache;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/rule_poller.js
var require_rule_poller = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/rule_poller.js"(exports, module2) {
    "use strict";
    var logger2 = require_logger3();
    var ServiceConnector = require_service_connector();
    var ruleCache = require_rule_cache();
    var DEFAULT_INTERVAL = 5 * 60 * 1e3;
    var RulePoller = {
      start: function start() {
        if (this.poller) {
          clearInterval(this.poller);
        }
        refresh(false);
        this.poller = setInterval(refresh, DEFAULT_INTERVAL);
        this.poller.unref();
      }
    };
    var refresh = function refresh2(jitter) {
      jitter = typeof jitter === "undefined" ? true : jitter;
      if (jitter) {
        var delay = getJitter();
        setTimeout(refreshWithFirewall, delay);
      } else {
        refreshWithFirewall();
      }
    };
    var refreshWithFirewall = function refreshWithFirewall2() {
      try {
        refreshCache();
      } catch (e) {
        logger2.getLogger().warn("Encountered unexpected exception when fetching sampling rules: " + e);
      }
    };
    var refreshCache = function refreshCache2() {
      var now = Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3);
      ServiceConnector.fetchSamplingRules(function(err, newRules) {
        if (err) {
          logger2.getLogger().warn("Failed to retrieve sampling rules from X-Ray service:", err);
        } else if (newRules.length !== 0) {
          ruleCache.loadRules(newRules);
          ruleCache.timestamp(now);
          logger2.getLogger().info("Successfully refreshed centralized sampling rule cache.");
        }
      });
    };
    var getJitter = function getJitter2() {
      return Math.random() * 5;
    };
    module2.exports = RulePoller;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/target_poller.js
var require_target_poller = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/target_poller.js"(exports, module2) {
    "use strict";
    var rulePoller = require_rule_poller();
    var serviceConnector = require_service_connector();
    var ruleCache = require_rule_cache();
    var logger2 = require_logger3();
    var DEFAULT_INTERVAL = 10 * 1e3;
    var TargetPoller = {
      interval: DEFAULT_INTERVAL,
      start: function start() {
        this.poller = setInterval(refreshWithFirewall, DEFAULT_INTERVAL + getJitter());
        this.poller.unref();
      }
    };
    var refreshWithFirewall = function refreshWithFirewall2() {
      try {
        refresh();
      } catch (e) {
        logger2.getLogger().warn("Encountered unexpected exception when fetching sampling targets: " + e);
      }
    };
    var refresh = function refresh2() {
      var candidates = getCandidates();
      if (candidates && candidates.length > 0) {
        serviceConnector.fetchTargets(candidates, function(err, targetsMapping, ruleFreshness) {
          if (err) {
            logger2.getLogger().warn("Failed to retrieve sampling targets from X-Ray service:", err);
            return;
          }
          ruleCache.loadTargets(targetsMapping);
          if (ruleFreshness > ruleCache.getLastUpdated()) {
            logger2.getLogger().info("Performing out-of-band sampling rule polling to fetch updated rules.");
            rulePoller.start();
          }
          logger2.getLogger().info("Successfully reported rule statistics to get new sampling quota.");
        });
      }
    };
    var getCandidates = function getCandidates2() {
      var rules = ruleCache.getRules();
      var candidates = [];
      rules.forEach(function(rule) {
        if (rule.everMatched() && rule.timeToReport()) {
          candidates.push(rule);
        }
      });
      return candidates;
    };
    var getJitter = function getJitter2() {
      return Math.random() / TargetPoller.interval;
    };
    module2.exports = TargetPoller;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/default_sampler.js
var require_default_sampler = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/default_sampler.js"(exports, module2) {
    "use strict";
    var logger2 = require_logger3();
    var util = require("util");
    var SegmentUtils = require_segment_utils();
    var DefaultSampler = {
      localSampler: require_local_sampler(),
      rulePoller: require_rule_poller(),
      targetPoller: require_target_poller(),
      ruleCache: require_rule_cache(),
      started: false,
      /**
       * Makes a sample decision based on the sample request.
       * @param {object} sampleRequest - Contains information for rules matching.
       * @module DefaultSampler
       * @function shouldSample
       */
      shouldSample: function shouldSample(sampleRequest) {
        try {
          if (!this.started) {
            this.start();
          }
          if (!sampleRequest.serviceType) {
            sampleRequest.serviceType = SegmentUtils.origin;
          }
          var now = Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3);
          var matchedRule = this.ruleCache.getMatchedRule(sampleRequest, now);
          if (matchedRule) {
            logger2.getLogger().debug(util.format("Rule %s is matched.", matchedRule.getName()));
            return processMatchedRule(matchedRule, now);
          } else {
            logger2.getLogger().info("No effective centralized sampling rule match. Fallback to local rules.");
            return this.localSampler.shouldSample(sampleRequest);
          }
        } catch (err) {
          logger2.getLogger().error("Unhandled exception by the SDK during making sampling decisions: " + err);
        }
      },
      /**
       * Set local rules in case there is a need to fallback.
       * @module DefaultSampler
       * @function setLocalRules
       */
      setLocalRules: function setLocalRules(source) {
        this.localSampler.setLocalRules(source);
      },
      /**
       * Start the pollers to poll sampling rules and targets from X-Ray service.
       * @module DefaultSampler
       * @function start
       */
      start: function start() {
        if (!this.started) {
          this.rulePoller.start();
          this.targetPoller.start();
          this.started = true;
        }
      }
    };
    var processMatchedRule = function processMatchedRule2(rule, now) {
      rule.incrementRequestCount();
      var reservoir = rule.getReservoir();
      var sample = true;
      var decision = reservoir.borrowOrTake(now, rule.canBorrow());
      if (decision === "borrow") {
        rule.incrementBorrowCount();
      } else if (decision === "take") {
        rule.incrementSampledCount();
      } else if (Math.random() <= rule.getRate()) {
        rule.incrementSampledCount();
      } else {
        sample = false;
      }
      if (sample) {
        return rule.getName();
      } else {
        return false;
      }
    };
    module2.exports = DefaultSampler;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/middleware/mw_utils.js
var require_mw_utils = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/middleware/mw_utils.js"(exports, module2) {
    "use strict";
    var Segment = require_segment();
    var IncomingRequestData = require_incoming_request_data();
    var logger2 = require_logger3();
    var coreUtils = require_utils6();
    var wildcardMatch = require_utils6().wildcardMatch;
    var processTraceData = require_utils6().processTraceData;
    var XRAY_HEADER = "x-amzn-trace-id";
    var overrideFlag = !!process.env.AWS_XRAY_TRACING_NAME;
    var utils = {
      defaultName: process.env.AWS_XRAY_TRACING_NAME,
      dynamicNaming: false,
      hostPattern: null,
      sampler: require_default_sampler(),
      /**
       * Enables dynamic naming for segments via the middleware. Use 'AWSXRay.middleware.enableDynamicNaming()'.
       * @param {string} [hostPattern] - The pattern to match the host header. See the README on dynamic and fixed naming modes.
       * @alias module:mw_utils.enableDynamicNaming
       */
      enableDynamicNaming: function(hostPattern) {
        this.dynamicNaming = true;
        if (hostPattern && typeof hostPattern !== "string") {
          throw new Error("Host pattern must be a string.");
        }
        this.hostPattern = hostPattern || null;
      },
      /**
       * Splits out the 'x-amzn-trace-id' header params from the incoming request.  Used by the middleware.
       * @param {http.IncomingMessage|https.IncomingMessage} req - The request object from the incoming call.
       * @returns {object}
       * @alias module:mw_utils.processHeaders
       */
      processHeaders: function processHeaders(req) {
        var amznTraceHeader = {};
        if (req && req.headers && req.headers[XRAY_HEADER]) {
          amznTraceHeader = processTraceData(req.headers[XRAY_HEADER]);
        }
        return amznTraceHeader;
      },
      /**
       * Resolves the name of the segment as determined by fixed or dynamic mode options. Used by the middleware.
       * @param {string} hostHeader - The string from the request.headers.host property.
       * @returns {string}
       * @alias module:mw_utils.resolveName
       */
      resolveName: function resolveName(hostHeader) {
        var name;
        if (this.dynamicNaming && hostHeader) {
          name = this.hostPattern ? wildcardMatch(this.hostPattern, hostHeader) ? hostHeader : this.defaultName : hostHeader;
        } else {
          name = this.defaultName;
        }
        return name;
      },
      /**
       * Resolves the sampling decision as determined by the values given and options set. Used by the middleware.
       * @param {object} amznTraceHeader - The object as returned by the processHeaders function.
       * @param {Segment} segment - The string from the request.headers.host property.
       * @param {http.ServerResponse|https.ServerResponse} res - The response object from the incoming call.
       * @returns {boolean}
       * @alias module:mw_utils.resolveSampling
       */
      resolveSampling: function resolveSampling(amznTraceHeader, segment, res) {
        var isSampled;
        if (amznTraceHeader.sampled === "1") {
          isSampled = true;
        } else if (amznTraceHeader.sampled === "0") {
          isSampled = false;
        } else {
          var sampleRequest = {
            host: res.req.headers.host,
            httpMethod: res.req.method,
            urlPath: res.req.url,
            serviceName: segment.name
          };
          isSampled = this.sampler.shouldSample(sampleRequest);
          if (isSampled instanceof String || typeof isSampled === "string") {
            segment.setMatchedSamplingRule(isSampled);
            isSampled = true;
          }
        }
        if (amznTraceHeader.sampled === "?") {
          res.header[XRAY_HEADER] = "Root=" + amznTraceHeader.root + ";Sampled=" + (isSampled ? "1" : "0");
        }
        if (!isSampled) {
          segment.notTraced = true;
        }
      },
      /**
       * Sets the default name of created segments. Used with the middleware.
       * Can be overridden by the AWS_XRAY_TRACING_NAME environment variable.
       * @param {string} name - The default name for segments created in the middleware.
       * @alias module:mw_utils.setDefaultName
       */
      setDefaultName: function setDefaultName(name) {
        if (!overrideFlag) {
          this.defaultName = name;
        }
      },
      disableCentralizedSampling: function disableCentralizedSampling() {
        this.sampler = require_local_sampler();
      },
      /**
       * Overrides the default sampling rules file to specify at what rate to sample at for specific routes.
       * The base sampling rules file can be found at /lib/resources/default_sampling_rules.json
       * @param {string|Object} source - The path to the custom sampling rules file, or the source JSON object.
       * @memberof AWSXRay
       */
      setSamplingRules: function setSamplingRules(source) {
        if (!source || source instanceof String || !(typeof source === "string" || source instanceof Object)) {
          throw new Error("Please specify a path to the local sampling rules file, or supply an object containing the rules.");
        }
        this.sampler.setLocalRules(source);
      },
      /**
       * Logs a debug message including core request and segment information
       * @param {string} message - The message to be logged
       * @param {string} url - The request url being traced
       * @param {Segment} - The current segment
       */
      middlewareLog: function middlewareLog(message, url, segment) {
        logger2.getLogger().debug(message + ": { url: " + url + ", name: " + segment.name + ", trace_id: " + segment.trace_id + ", id: " + segment.id + ", sampled: " + !segment.notTraced + " }");
      },
      /**
       * Traces the request/response cycle of an http.IncomingMessage / http.ServerResponse pair.
       * Resolves sampling rules, creates a segment, adds the core request / response data adding
       * throttling / error / fault flags based on the response status code.
       * @param {http.IncomingMessage} req - The incoming request.
       * @param {http.ServerResponse} res - The server response.
       * @returns {Segment}
       * @memberof AWSXRay
       */
      traceRequestResponseCycle: function traceRequestResponseCycle(req, res) {
        var amznTraceHeader = this.processHeaders(req);
        var name = this.resolveName(req.headers.host);
        var segment = new Segment(name, amznTraceHeader.root, amznTraceHeader.parent);
        var responseWithEmbeddedRequest = Object.assign({}, res, { req });
        this.resolveSampling(amznTraceHeader, segment, responseWithEmbeddedRequest);
        segment.addIncomingRequestData(new IncomingRequestData(req));
        this.middlewareLog("Starting middleware segment", req.url, segment);
        var middlewareLog = this.middlewareLog;
        var didEnd = false;
        var endSegment = function() {
          if (didEnd) {
            return;
          }
          didEnd = true;
          if (res.statusCode === 429) {
            segment.addThrottleFlag();
          }
          const cause = coreUtils.getCauseTypeFromHttpStatus(res.statusCode);
          if (cause) {
            segment[cause] = true;
          }
          segment.http.close(res);
          segment.close();
          middlewareLog("Closed middleware segment successfully", req.url, segment);
        };
        res.on("finish", endSegment);
        res.on("close", endSegment);
        return segment;
      }
    };
    module2.exports = utils;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/env/aws_lambda.js
var require_aws_lambda = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/env/aws_lambda.js"(exports, module2) {
    "use strict";
    var contextUtils = require_context_utils();
    var mwUtils = require_mw_utils();
    var LambdaUtils = require_utils6().LambdaUtils;
    var Segment = require_segment();
    var SegmentEmitter = require_segment_emitter();
    var SegmentUtils = require_segment_utils();
    var logger2 = require_logger3();
    var TraceID = require_trace_id();
    var xAmznTraceIdPrev = null;
    module2.exports.init = function init() {
      contextUtils.enableManualMode = function() {
        logger2.getLogger().warn("AWS Lambda does not support AWS X-Ray manual mode.");
      };
      SegmentEmitter.disableReusableSocket();
      SegmentUtils.setStreamingThreshold(0);
      logger2.getLogger().info("Disabling centralized sampling in Lambda environment.");
      mwUtils.disableCentralizedSampling();
      var namespace = contextUtils.getNamespace();
      namespace.enter(namespace.createContext());
      contextUtils.setSegment(facadeSegment());
    };
    var facadeSegment = function facadeSegment2() {
      var segment = new Segment("facade");
      var whitelistFcn = ["addNewSubsegment", "addSubsegment", "removeSubsegment", "toString", "addSubsegmentWithoutSampling", "addNewSubsegmentWithoutSampling"];
      var silentFcn = ["incrementCounter", "decrementCounter", "isClosed", "close", "format", "flush"];
      var xAmznTraceId = process.env._X_AMZN_TRACE_ID;
      for (var key in segment) {
        if (typeof segment[key] === "function" && whitelistFcn.indexOf(key) === -1) {
          if (silentFcn.indexOf(key) === -1) {
            segment[key] = function() {
              var func = key;
              return function facade() {
                logger2.getLogger().warn('Function "' + func + '" cannot be called on an AWS Lambda segment. Please use a subsegment to record data.');
                return;
              };
            }();
          } else {
            segment[key] = function facade() {
              return;
            };
          }
        }
      }
      segment.trace_id = TraceID.Invalid().toString();
      segment.isClosed = function() {
        return true;
      };
      segment.in_progress = false;
      segment.counter = 1;
      segment.notTraced = true;
      segment.facade = true;
      segment.reset = function reset() {
        this.trace_id = TraceID.Invalid().toString();
        this.id = "00000000";
        delete this.subsegments;
        this.notTraced = true;
      };
      segment.resolveLambdaTraceData = function resolveLambdaTraceData() {
        var xAmznLambda = process.env._X_AMZN_TRACE_ID;
        if (xAmznLambda) {
          if (xAmznLambda != xAmznTraceIdPrev) {
            this.reset();
            if (LambdaUtils.populateTraceData(segment, xAmznLambda)) {
              xAmznTraceIdPrev = xAmznLambda;
            }
          }
        } else {
          this.reset();
          contextUtils.contextMissingStrategy.contextMissing("Missing AWS Lambda trace data for X-Ray. Ensure Active Tracing is enabled and no subsegments are created outside the function handler.");
        }
      };
      if (LambdaUtils.validTraceData(xAmznTraceId)) {
        if (LambdaUtils.populateTraceData(segment, xAmznTraceId)) {
          xAmznTraceIdPrev = xAmznTraceId;
        }
      }
      return segment;
    };
  }
});

// node_modules/aws-xray-sdk-core/package.json
var require_package4 = __commonJS({
  "node_modules/aws-xray-sdk-core/package.json"(exports, module2) {
    module2.exports = {
      name: "aws-xray-sdk-core",
      version: "3.5.2",
      description: "AWS X-Ray SDK for Javascript",
      author: "Amazon Web Services",
      contributors: [
        "Sandra McMullen <mcmuls@amazon.com>",
        "William Armiros <armiros@amazon.com>",
        "Moritz Onken <onken@netcubed.de>"
      ],
      files: [
        "dist/lib/**/*",
        "LICENSE",
        "README.md"
      ],
      main: "dist/lib/index.js",
      types: "dist/lib/index.d.ts",
      engines: {
        node: ">= 14.x"
      },
      directories: {
        test: "test"
      },
      "//": "@types/cls-hooked is exposed in API so must be in dependencies, not devDependencies",
      dependencies: {
        "@aws-sdk/service-error-classification": "^3.4.1",
        "@aws-sdk/types": "^3.4.1",
        "@types/cls-hooked": "^4.3.3",
        "atomic-batcher": "^1.0.2",
        "cls-hooked": "^4.2.2",
        semver: "^7.5.3"
      },
      scripts: {
        prepare: "npm run compile",
        compile: "tsc && npm run copy-lib && npm run copy-test",
        "copy-lib": "find lib -type f \\( -name '*.d.ts' -o -name '*.json' \\) | xargs -I % ../../scripts/cp-with-structure.sh % dist",
        "copy-test": "find test -name '*.json' | xargs -I % ../../scripts/cp-with-structure.sh % dist",
        lint: "eslint .",
        "lint:fix": "eslint . --fix",
        test: "npm run compile && mocha --recursive ./dist/test/ -R spec && tsd && mocha --recursive ./dist/test_async/ -R spec",
        "test-d": "tsd",
        "test-async": "npm run compile && mocha --recursive ./dist/test_async/ -R spec",
        clean: "rm -rf dist && rm -rf node_modules",
        testcov: "nyc npm run test",
        reportcov: "nyc report --reporter=text-lcov > coverage.lcov && codecov"
      },
      keywords: [
        "amazon",
        "api",
        "aws",
        "core",
        "xray",
        "x-ray",
        "x ray"
      ],
      license: "Apache-2.0",
      repository: "https://github.com/aws/aws-xray-sdk-node/tree/master/packages/core",
      gitHead: "6a9f9991c4aa3eead1609f986ea9354d50f5436f"
    };
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/plugin.js
var require_plugin = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/plugin.js"(exports, module2) {
    "use strict";
    var http = require("http");
    var Plugin = {
      METADATA_TIMEOUT: 1e3,
      /**
       * Asynchronously retrieves metadata from on-instance endpoint with an HTTP request using retries for
       * requests that time out.
       * @param {object} options - The HTTP options to make the request with
       * @param {function} callback - callback to plugin
       */
      getPluginMetadata: function(options, callback) {
        const METADATA_RETRY_TIMEOUT = 250;
        const METADATA_RETRIES = 5;
        var retries = METADATA_RETRIES;
        var getMetadata = function() {
          var httpReq = http.__request ? http.__request : http.request;
          var req = httpReq(options, function(res) {
            var body = "";
            res.on("data", function(chunk) {
              body += chunk;
            });
            res.on("end", function() {
              if (this.statusCode === 200 || this.statusCode === 300) {
                try {
                  body = JSON.parse(body);
                } catch (e) {
                  callback(e);
                  return;
                }
                callback(null, body);
              } else if (retries > 0 && Math.floor(this.statusCode / 100) === 5) {
                retries--;
                setTimeout(getMetadata, METADATA_RETRY_TIMEOUT);
              } else {
                callback(new Error(`Failed to retrieve metadata with options: ${options}`));
              }
            });
          });
          req.on("error", function(err) {
            callback(err);
          });
          req.on("timeout", function() {
            req.abort();
          });
          req.setTimeout(Plugin.METADATA_TIMEOUT);
          req.end();
        };
        getMetadata();
      }
    };
    module2.exports = Plugin;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/ec2_plugin.js
var require_ec2_plugin = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/ec2_plugin.js"(exports, module2) {
    "use strict";
    var Plugin = require_plugin();
    var logger2 = require_logger3();
    var http = require("http");
    var EC2Plugin = {
      /**
       * A function to get the instance data from the EC2 metadata service.
       * @param {function} callback - The callback for the plugin loader.
       */
      getData: function(callback) {
        const METADATA_PATH = "/latest/dynamic/instance-identity/document";
        function populateMetadata(token) {
          const options = getOptions(METADATA_PATH, "GET", token ? { "X-aws-ec2-metadata-token": token } : {});
          Plugin.getPluginMetadata(options, function(err, data) {
            if (err || !data) {
              logger2.getLogger().error("Error loading EC2 plugin metadata: ", err ? err.toString() : "Could not retrieve data from IMDS.");
              callback();
              return;
            }
            const metadata = {
              ec2: {
                instance_id: data.instanceId,
                availability_zone: data.availabilityZone,
                instance_size: data.instanceType,
                ami_id: data.imageId
              }
            };
            callback(metadata);
          });
        }
        getToken(function(token) {
          if (token === null) {
            logger2.getLogger().debug("EC2Plugin failed to get token from IMDSv2. Falling back to IMDSv1.");
          }
          populateMetadata(token);
        });
      },
      originName: "AWS::EC2::Instance"
    };
    function getToken(callback) {
      const httpReq = http.__request ? http.__request : http.request;
      const TTL = 60;
      const TOKEN_PATH = "/latest/api/token";
      const options = getOptions(TOKEN_PATH, "PUT", {
        "X-aws-ec2-metadata-token-ttl-seconds": TTL
      });
      let req = httpReq(options, function(res) {
        let body = "";
        res.on("data", function(chunk) {
          body += chunk;
        });
        res.on("end", function() {
          if (this.statusCode === 200 || this.statusCode === 300) {
            callback(body);
          } else {
            callback(null);
          }
        });
      });
      req.on("error", function() {
        callback(null);
      });
      req.on("timeout", function() {
        req.abort();
        callback(null);
      });
      req.setTimeout(Plugin.METADATA_TIMEOUT);
      req.end();
    }
    function getOptions(path, method, headers) {
      if (!method) {
        method = "GET";
      }
      if (!headers) {
        headers = {};
      }
      return {
        host: "169.254.169.254",
        path,
        method,
        headers
      };
    }
    module2.exports = EC2Plugin;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/ecs_plugin.js
var require_ecs_plugin = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/ecs_plugin.js"(exports, module2) {
    "use strict";
    var os = require("os");
    var ECSPlugin = {
      /**
       * A function to get the instance data from the ECS instance.
       * @param {function} callback - The callback for the plugin loader.
       */
      getData: function(callback) {
        callback({ ecs: { container: os.hostname() } });
      },
      originName: "AWS::ECS::Container"
    };
    module2.exports = ECSPlugin;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/elastic_beanstalk_plugin.js
var require_elastic_beanstalk_plugin = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/elastic_beanstalk_plugin.js"(exports, module2) {
    "use strict";
    var fs = require("fs");
    var logger2 = require_logger3();
    var ENV_CONFIG_LOCATION = "/var/elasticbeanstalk/xray/environment.conf";
    var ElasticBeanstalkPlugin = {
      /**
       * A function to get data from the Elastic Beanstalk environment configuration file.
       * @param {function} callback - The callback for the plugin loader.
       */
      getData: function(callback) {
        fs.readFile(ENV_CONFIG_LOCATION, "utf8", function(err, rawData) {
          if (err) {
            logger2.getLogger().error("Error loading Elastic Beanstalk plugin:", err.stack);
            callback();
          } else {
            var data = JSON.parse(rawData);
            var metadata = {
              elastic_beanstalk: {
                environment: data.environment_name,
                version_label: data.version_label,
                deployment_id: data.deployment_id
              }
            };
            callback(metadata);
          }
        });
      },
      originName: "AWS::ElasticBeanstalk::Environment"
    };
    module2.exports = ElasticBeanstalkPlugin;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/resources/aws_whitelist.json
var require_aws_whitelist = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/resources/aws_whitelist.json"(exports, module2) {
    module2.exports = {
      services: {
        dynamodb: {
          operations: {
            batchGetItem: {
              request_descriptors: {
                RequestItems: {
                  get_keys: true,
                  rename_to: "table_names"
                }
              },
              response_parameters: [
                "ConsumedCapacity"
              ]
            },
            batchWriteItem: {
              request_descriptors: {
                RequestItems: {
                  get_keys: true,
                  rename_to: "table_names"
                }
              },
              response_parameters: [
                "ConsumedCapacity",
                "ItemCollectionMetrics"
              ]
            },
            createTable: {
              request_parameters: [
                "GlobalSecondaryIndexes",
                "LocalSecondaryIndexes",
                "ProvisionedThroughput",
                "TableName"
              ]
            },
            deleteItem: {
              request_parameters: [
                "TableName"
              ],
              response_parameters: [
                "ConsumedCapacity",
                "ItemCollectionMetrics"
              ]
            },
            deleteTable: {
              request_parameters: [
                "TableName"
              ]
            },
            describeTable: {
              request_parameters: [
                "TableName"
              ]
            },
            getItem: {
              request_parameters: [
                "ConsistentRead",
                "ProjectionExpression",
                "TableName"
              ],
              response_parameters: [
                "ConsumedCapacity"
              ]
            },
            listTables: {
              request_parameters: [
                "ExclusiveStartTableName",
                "Limit"
              ],
              response_descriptors: {
                TableNames: {
                  list: true,
                  get_count: true,
                  rename_to: "table_count"
                }
              }
            },
            putItem: {
              request_parameters: [
                "TableName"
              ],
              response_parameters: [
                "ConsumedCapacity",
                "ItemCollectionMetrics"
              ]
            },
            query: {
              request_parameters: [
                "AttributesToGet",
                "ConsistentRead",
                "IndexName",
                "Limit",
                "ProjectionExpression",
                "ScanIndexForward",
                "Select",
                "TableName"
              ],
              response_parameters: [
                "ConsumedCapacity"
              ]
            },
            scan: {
              request_parameters: [
                "AttributesToGet",
                "ConsistentRead",
                "IndexName",
                "Limit",
                "ProjectionExpression",
                "Segment",
                "Select",
                "TableName",
                "TotalSegments"
              ],
              response_parameters: [
                "ConsumedCapacity",
                "Count",
                "ScannedCount"
              ]
            },
            updateItem: {
              request_parameters: [
                "TableName"
              ],
              response_parameters: [
                "ConsumedCapacity",
                "ItemCollectionMetrics"
              ]
            },
            updateTable: {
              request_parameters: [
                "AttributeDefinitions",
                "GlobalSecondaryIndexUpdates",
                "ProvisionedThroughput",
                "TableName"
              ]
            }
          }
        },
        sqs: {
          operations: {
            addPermission: {
              request_parameters: [
                "Label",
                "QueueUrl"
              ]
            },
            changeMessageVisibility: {
              request_parameters: [
                "QueueUrl",
                "VisibilityTimeout"
              ]
            },
            changeMessageVisibilityBatch: {
              request_parameters: [
                "QueueUrl"
              ],
              response_parameters: [
                "Failed"
              ]
            },
            createQueue: {
              request_parameters: [
                "Attributes",
                "QueueName"
              ]
            },
            deleteMessage: {
              request_parameters: [
                "QueueUrl"
              ]
            },
            deleteMessageBatch: {
              request_parameters: [
                "QueueUrl"
              ],
              response_parameters: [
                "Failed"
              ]
            },
            deleteQueue: {
              request_parameters: [
                "QueueUrl"
              ]
            },
            getQueueAttributes: {
              request_parameters: [
                "QueueUrl"
              ],
              response_parameters: [
                "Attributes"
              ]
            },
            getQueueUrl: {
              request_parameters: [
                "QueueName",
                "QueueOwnerAWSAccountId"
              ],
              response_parameters: [
                "QueueUrl"
              ]
            },
            listDeadLetterSourceQueues: {
              request_parameters: [
                "QueueUrl"
              ],
              response_parameters: [
                "QueueUrls"
              ]
            },
            listQueues: {
              request_parameters: [
                "QueueNamePrefix"
              ],
              response_descriptors: {
                QueueUrls: {
                  list: true,
                  get_count: true,
                  rename_to: "queue_count"
                }
              }
            },
            purgeQueue: {
              request_parameters: [
                "QueueUrl"
              ]
            },
            receiveMessage: {
              request_parameters: [
                "AttributeNames",
                "MaxNumberOfMessages",
                "MessageAttributeNames",
                "QueueUrl",
                "VisibilityTimeout",
                "WaitTimeSeconds"
              ],
              response_descriptors: {
                Messages: {
                  list: true,
                  get_count: true,
                  rename_to: "message_count"
                }
              }
            },
            removePermission: {
              request_parameters: [
                "QueueUrl"
              ]
            },
            sendMessage: {
              request_parameters: [
                "DelaySeconds",
                "QueueUrl"
              ],
              request_descriptors: {
                MessageAttributes: {
                  get_keys: true,
                  rename_to: "message_attribute_names"
                }
              },
              response_parameters: [
                "MessageId"
              ]
            },
            sendMessageBatch: {
              request_parameters: [
                "QueueUrl"
              ],
              request_descriptors: {
                Entries: {
                  list: true,
                  get_count: true,
                  rename_to: "message_count"
                }
              },
              response_descriptors: {
                Failed: {
                  list: true,
                  get_count: true,
                  rename_to: "failed_count"
                },
                Successful: {
                  list: true,
                  get_count: true,
                  rename_to: "successful_count"
                }
              }
            },
            setQueueAttributes: {
              request_parameters: [
                "QueueUrl"
              ],
              request_descriptors: {
                Attributes: {
                  get_keys: true,
                  rename_to: "attribute_names"
                }
              }
            }
          }
        },
        sns: {
          operations: {
            publish: {
              request_parameters: [
                "TopicArn"
              ]
            },
            publishBatch: {
              request_parameters: [
                "TopicArn"
              ]
            }
          }
        },
        lambda: {
          operations: {
            invoke: {
              request_parameters: [
                "FunctionName",
                "InvocationType",
                "LogType",
                "Qualifier"
              ],
              response_parameters: [
                "FunctionError",
                "StatusCode"
              ]
            },
            invokeAsync: {
              request_parameters: [
                "FunctionName"
              ],
              response_parameters: [
                "Status"
              ]
            }
          }
        },
        s3: {
          operations: {
            abortMultipartUpload: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            completeMultipartUpload: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            copyObject: {
              request_parameters: [
                "CopySource",
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            createBucket: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            createMultipartUpload: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucket: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketAnalyticsConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketCors: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketEncryption: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketInventoryConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketLifecycle: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketMetricsConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketPolicy: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketReplication: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketTagging: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketWebsite: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteObject: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteObjectTagging: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteObjects: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketAccelerateConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketAcl: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketAnalyticsConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketCors: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketEncryption: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketInventoryConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketLifecycle: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketLifecycleConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketLocation: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketLogging: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketMetricsConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketNotification: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketNotificationConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketPolicy: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketReplication: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketRequestPayment: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketTagging: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketVersioning: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketWebsite: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getObject: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getObjectAcl: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getObjectTagging: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getObjectTorrent: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            headBucket: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            headObject: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listBucketAnalyticsConfigurations: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listBucketInventoryConfigurations: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listBucketMetricsConfigurations: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listMultipartUploads: {
              request_parameters: [
                "Prefix"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listObjectVersions: {
              request_parameters: [
                "Prefix"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listObjects: {
              request_parameters: [
                "Prefix"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listObjectsV2: {
              request_parameters: [
                "Prefix"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listParts: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketAccelerateConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketAcl: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketAnalyticsConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketCors: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketEncryption: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketInventoryConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketLifecycle: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketLifecycleConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketLogging: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketMetricsConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketNotification: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketNotificationConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketPolicy: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketReplication: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketRequestPayment: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketTagging: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketVersioning: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketWebsite: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putObject: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putObjectAcl: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putObjectTagging: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            restoreObject: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            uploadPart: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            uploadPartCopy: {
              request_parameters: [
                "CopySource",
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            }
          }
        },
        sagemakerruntime: {
          operations: {
            invokeEndpoint: {
              request_parameters: [
                "EndpointName"
              ]
            }
          }
        }
      }
    };
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/patchers/call_capturer.js
var require_call_capturer = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/patchers/call_capturer.js"(exports, module2) {
    "use strict";
    var fs = require("fs");
    var logger2 = require_logger3();
    var whitelist = require_aws_whitelist();
    var paramTypes = {
      REQ_DESC: "request_descriptors",
      REQ_PARAMS: "request_parameters",
      RES_DESC: "response_descriptors",
      RES_PARAMS: "response_parameters"
    };
    function CallCapturer(source) {
      this.init(source);
    }
    CallCapturer.prototype.init = function init(source) {
      if (source) {
        if (typeof source === "string") {
          logger2.getLogger().info("Using custom AWS whitelist file: " + source);
          this.services = loadWhitelist(JSON.parse(fs.readFileSync(source, "utf8")));
        } else {
          logger2.getLogger().info("Using custom AWS whitelist source.");
          this.services = loadWhitelist(source);
        }
      } else {
        this.services = whitelist.services;
      }
    };
    CallCapturer.prototype.append = function append(source) {
      var newServices = {};
      if (typeof source === "string") {
        logger2.getLogger().info("Appending AWS whitelist with custom file: " + source);
        newServices = loadWhitelist(JSON.parse(fs.readFileSync(source, "utf8")));
      } else {
        logger2.getLogger().info("Appending AWS whitelist with a custom source.");
        newServices = loadWhitelist(source);
      }
      for (var attribute in newServices) {
        this.services[attribute] = newServices[attribute];
      }
    };
    CallCapturer.prototype.capture = function capture(serviceName2, response) {
      var operation = response.request.operation;
      var call = this.services[serviceName2] !== void 0 ? this.services[serviceName2].operations[operation] : null;
      if (call === null) {
        logger2.getLogger().debug('Call "' + serviceName2 + "." + operation + '" is not whitelisted for additional data capturing. Ignoring.');
        return;
      }
      var dataCaptured = {};
      for (var paramType in call) {
        var params = call[paramType];
        if (paramType === paramTypes.REQ_PARAMS) {
          captureCallParams(params, response.request.params, dataCaptured);
        } else if (paramType === paramTypes.REQ_DESC) {
          captureDescriptors(params, response.request.params, dataCaptured);
        } else if (paramType === paramTypes.RES_PARAMS) {
          if (response.data) {
            captureCallParams(params, response.data, dataCaptured);
          }
        } else if (paramType === paramTypes.RES_DESC) {
          if (response.data) {
            captureDescriptors(params, response.data, dataCaptured);
          }
        } else {
          logger2.getLogger().error('Unknown parameter type "' + paramType + '". Must be "request_descriptors", "response_descriptors", "request_parameters" or "response_parameters".');
        }
      }
      return dataCaptured;
    };
    function captureCallParams(params, call, data) {
      params.forEach(function(param) {
        if (typeof call[param] !== "undefined") {
          var formatted = toSnakeCase(param);
          this[formatted] = call[param];
        }
      }, data);
    }
    function captureDescriptors(descriptors, params, data) {
      for (var paramName in descriptors) {
        var attributes2 = descriptors[paramName];
        if (typeof params[paramName] !== "undefined") {
          var paramData;
          if (attributes2.list && attributes2.get_count) {
            paramData = params[paramName] ? params[paramName].length : 0;
          } else {
            paramData = attributes2.get_keys === true ? Object.keys(params[paramName]) : params[paramName];
          }
          if (typeof attributes2.rename_to === "string") {
            data[attributes2.rename_to] = paramData;
          } else {
            var formatted = toSnakeCase(paramName);
            data[formatted] = paramData;
          }
        }
      }
    }
    function toSnakeCase(param) {
      if (param === "IPAddress") {
        return "ip_address";
      } else {
        return param.split(/(?=[A-Z])/).join("_").toLowerCase();
      }
    }
    function loadWhitelist(source) {
      var doc = source;
      if (doc.services === void 0) {
        throw new Error('Document formatting is incorrect. Expecting "services" param.');
      }
      return doc.services;
    }
    module2.exports = CallCapturer;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/aws.js
var require_aws2 = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/aws.js"(exports, module2) {
    "use strict";
    var CallCapturer = require_call_capturer();
    var capturer = new CallCapturer();
    function Aws(res, serviceName2) {
      this.init(res, serviceName2);
    }
    Aws.prototype.init = function init(res, serviceName2) {
      this.operation = formatOperation(res.request.operation) || "";
      if (res && res.request && res.request.httpRequest && res.request.httpRequest.region) {
        this.region = res.request.httpRequest.region;
      }
      if (res && res.requestId) {
        this.request_id = res.requestId;
      }
      this.retries = res.retryCount || 0;
      if (res.extendedRequestId && serviceName2 && serviceName2.toLowerCase() === "s3") {
        this.id_2 = res.extendedRequestId;
      }
      if (serviceName2) {
        this.addData(capturer.capture(serviceName2.toLowerCase(), res));
      }
    };
    Aws.prototype.addData = function addData(data) {
      for (var attribute in data) {
        this[attribute] = data[attribute];
      }
    };
    var setAWSWhitelist = function setAWSWhitelist2(source) {
      if (!source || source instanceof String || !(typeof source === "string" || source instanceof Object)) {
        throw new Error("Please specify a path to the local whitelist file, or supply a whitelist source object.");
      }
      capturer = new CallCapturer(source);
    };
    var appendAWSWhitelist = function appendAWSWhitelist2(source) {
      if (!source || source instanceof String || !(typeof source === "string" || source instanceof Object)) {
        throw new Error("Please specify a path to the local whitelist file, or supply a whitelist source object.");
      }
      capturer.append(source);
    };
    function formatOperation(operation) {
      if (!operation) {
        return;
      }
      return operation.charAt(0).toUpperCase() + operation.slice(1);
    }
    module2.exports = Aws;
    module2.exports.appendAWSWhitelist = appendAWSWhitelist;
    module2.exports.setAWSWhitelist = setAWSWhitelist;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/capture.js
var require_capture = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/capture.js"(exports, module2) {
    "use strict";
    var contextUtils = require_context_utils();
    var logger2 = require_logger3();
    var captureFunc = function captureFunc2(name, fcn, parent) {
      validate2(name, fcn);
      var current, executeFcn;
      var parentSeg = contextUtils.resolveSegment(parent);
      if (!parentSeg) {
        logger2.getLogger().warn("Failed to capture function.");
        return fcn();
      }
      current = parentSeg.addNewSubsegment(name);
      executeFcn = captureFcn(fcn, current);
      try {
        const response = executeFcn(current);
        current.close();
        return response;
      } catch (e) {
        current.close(e);
        throw e;
      }
    };
    var captureAsyncFunc = function captureAsyncFunc2(name, fcn, parent) {
      validate2(name, fcn);
      var current, executeFcn;
      var parentSeg = contextUtils.resolveSegment(parent);
      if (!parentSeg) {
        logger2.getLogger().warn("Failed to capture async function.");
        return fcn();
      }
      current = parentSeg.addNewSubsegment(name);
      executeFcn = captureFcn(fcn, current);
      try {
        return executeFcn(current);
      } catch (e) {
        current.close(e);
        throw e;
      }
    };
    var captureCallbackFunc = function captureCallbackFunc2(name, fcn, parent) {
      validate2(name, fcn);
      var base = contextUtils.resolveSegment(parent);
      if (!base) {
        logger2.getLogger().warn("Failed to capture callback function.");
        return fcn;
      }
      base.incrementCounter();
      return function() {
        var parentSeg = contextUtils.resolveSegment(parent);
        var args = Array.prototype.slice.call(arguments);
        captureFunc(name, fcn.bind.apply(fcn, [null].concat(args)), parentSeg);
        base.decrementCounter();
      }.bind(this);
    };
    function captureFcn(fcn, current) {
      var executeFcn;
      if (contextUtils.isAutomaticMode()) {
        var session = contextUtils.getNamespace();
        var contextFcn = function() {
          var value;
          session.run(function() {
            contextUtils.setSegment(current);
            value = fcn(current);
          });
          return value;
        };
        executeFcn = contextFcn;
      } else {
        executeFcn = fcn;
      }
      return executeFcn;
    }
    function validate2(name, fcn) {
      var error;
      if (!name || typeof name !== "string") {
        error = 'Param "name" must be a non-empty string.';
        logger2.getLogger().error(error);
        throw new Error(error);
      } else if (typeof fcn !== "function") {
        error = 'Param "fcn" must be a function.';
        logger2.getLogger().error(error);
        throw new Error(error);
      }
    }
    module2.exports.captureFunc = captureFunc;
    module2.exports.captureAsyncFunc = captureAsyncFunc;
    module2.exports.captureCallbackFunc = captureCallbackFunc;
  }
});

// node_modules/semver/internal/constants.js
var require_constants10 = __commonJS({
  "node_modules/semver/internal/constants.js"(exports, module2) {
    var SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
    9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
    var RELEASE_TYPES = [
      "major",
      "premajor",
      "minor",
      "preminor",
      "patch",
      "prepatch",
      "prerelease"
    ];
    module2.exports = {
      MAX_LENGTH,
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_SAFE_INTEGER,
      RELEASE_TYPES,
      SEMVER_SPEC_VERSION,
      FLAG_INCLUDE_PRERELEASE: 1,
      FLAG_LOOSE: 2
    };
  }
});

// node_modules/semver/internal/debug.js
var require_debug2 = __commonJS({
  "node_modules/semver/internal/debug.js"(exports, module2) {
    var debug = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
    };
    module2.exports = debug;
  }
});

// node_modules/semver/internal/re.js
var require_re = __commonJS({
  "node_modules/semver/internal/re.js"(exports, module2) {
    var {
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_LENGTH
    } = require_constants10();
    var debug = require_debug2();
    exports = module2.exports = {};
    var re = exports.re = [];
    var safeRe = exports.safeRe = [];
    var src = exports.src = [];
    var t = exports.t = {};
    var R = 0;
    var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    var safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ];
    var makeSafeRegex = (value) => {
      for (const [token, max] of safeRegexReplacements) {
        value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
      }
      return value;
    };
    var createToken = (name, value, isGlobal) => {
      const safe = makeSafeRegex(value);
      const index = R++;
      debug(name, index, value);
      t[name] = index;
      src[index] = value;
      re[index] = new RegExp(value, isGlobal ? "g" : void 0);
      safeRe[index] = new RegExp(safe, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
    createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
    createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
    createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
    createToken("FULL", `^${src[t.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
    createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COERCE", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t.COERCE], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
    exports.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
    exports.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
    exports.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  }
});

// node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS({
  "node_modules/semver/internal/parse-options.js"(exports, module2) {
    var looseOption = Object.freeze({ loose: true });
    var emptyOpts = Object.freeze({});
    var parseOptions = (options) => {
      if (!options) {
        return emptyOpts;
      }
      if (typeof options !== "object") {
        return looseOption;
      }
      return options;
    };
    module2.exports = parseOptions;
  }
});

// node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS({
  "node_modules/semver/internal/identifiers.js"(exports, module2) {
    var numeric = /^[0-9]+$/;
    var compareIdentifiers = (a, b) => {
      const anum = numeric.test(a);
      const bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    };
    var rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
    module2.exports = {
      compareIdentifiers,
      rcompareIdentifiers
    };
  }
});

// node_modules/semver/classes/semver.js
var require_semver = __commonJS({
  "node_modules/semver/classes/semver.js"(exports, module2) {
    var debug = require_debug2();
    var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants10();
    var { safeRe: re, t } = require_re();
    var parseOptions = require_parse_options();
    var { compareIdentifiers } = require_identifiers();
    var SemVer = class _SemVer {
      constructor(version2, options) {
        options = parseOptions(options);
        if (version2 instanceof _SemVer) {
          if (version2.loose === !!options.loose && version2.includePrerelease === !!options.includePrerelease) {
            return version2;
          } else {
            version2 = version2.version;
          }
        } else if (typeof version2 !== "string") {
          throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version2}".`);
        }
        if (version2.length > MAX_LENGTH) {
          throw new TypeError(
            `version is longer than ${MAX_LENGTH} characters`
          );
        }
        debug("SemVer", version2, options);
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        const m = version2.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
        if (!m) {
          throw new TypeError(`Invalid Version: ${version2}`);
        }
        this.raw = version2;
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];
        if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
          throw new TypeError("Invalid major version");
        }
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
          throw new TypeError("Invalid minor version");
        }
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
          throw new TypeError("Invalid patch version");
        }
        if (!m[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m[4].split(".").map((id) => {
            if (/^[0-9]+$/.test(id)) {
              const num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER) {
                return num;
              }
            }
            return id;
          });
        }
        this.build = m[5] ? m[5].split(".") : [];
        this.format();
      }
      format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join(".")}`;
        }
        return this.version;
      }
      toString() {
        return this.version;
      }
      compare(other) {
        debug("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof _SemVer)) {
          if (typeof other === "string" && other === this.version) {
            return 0;
          }
          other = new _SemVer(other, this.options);
        }
        if (other.version === this.version) {
          return 0;
        }
        return this.compareMain(other) || this.comparePre(other);
      }
      compareMain(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
      }
      comparePre(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        if (this.prerelease.length && !other.prerelease.length) {
          return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0;
        }
        let i = 0;
        do {
          const a = this.prerelease[i];
          const b = other.prerelease[i];
          debug("prerelease compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      compareBuild(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        let i = 0;
        do {
          const a = this.build[i];
          const b = other.build[i];
          debug("prerelease compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      // preminor will bump the version up to the next minor release, and immediately
      // down to pre-release. premajor and prepatch work the same way.
      inc(release, identifier, identifierBase) {
        switch (release) {
          case "premajor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "preminor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "prepatch":
            this.prerelease.length = 0;
            this.inc("patch", identifier, identifierBase);
            this.inc("pre", identifier, identifierBase);
            break;
          case "prerelease":
            if (this.prerelease.length === 0) {
              this.inc("patch", identifier, identifierBase);
            }
            this.inc("pre", identifier, identifierBase);
            break;
          case "major":
            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break;
          case "minor":
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break;
          case "patch":
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break;
          case "pre": {
            const base = Number(identifierBase) ? 1 : 0;
            if (!identifier && identifierBase === false) {
              throw new Error("invalid increment argument: identifier is empty");
            }
            if (this.prerelease.length === 0) {
              this.prerelease = [base];
            } else {
              let i = this.prerelease.length;
              while (--i >= 0) {
                if (typeof this.prerelease[i] === "number") {
                  this.prerelease[i]++;
                  i = -2;
                }
              }
              if (i === -1) {
                if (identifier === this.prerelease.join(".") && identifierBase === false) {
                  throw new Error("invalid increment argument: identifier already exists");
                }
                this.prerelease.push(base);
              }
            }
            if (identifier) {
              let prerelease = [identifier, base];
              if (identifierBase === false) {
                prerelease = [identifier];
              }
              if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = prerelease;
                }
              } else {
                this.prerelease = prerelease;
              }
            }
            break;
          }
          default:
            throw new Error(`invalid increment argument: ${release}`);
        }
        this.raw = this.format();
        if (this.build.length) {
          this.raw += `+${this.build.join(".")}`;
        }
        return this;
      }
    };
    module2.exports = SemVer;
  }
});

// node_modules/semver/functions/parse.js
var require_parse = __commonJS({
  "node_modules/semver/functions/parse.js"(exports, module2) {
    var SemVer = require_semver();
    var parse2 = (version2, options, throwErrors = false) => {
      if (version2 instanceof SemVer) {
        return version2;
      }
      try {
        return new SemVer(version2, options);
      } catch (er) {
        if (!throwErrors) {
          return null;
        }
        throw er;
      }
    };
    module2.exports = parse2;
  }
});

// node_modules/semver/functions/valid.js
var require_valid = __commonJS({
  "node_modules/semver/functions/valid.js"(exports, module2) {
    var parse2 = require_parse();
    var valid = (version2, options) => {
      const v = parse2(version2, options);
      return v ? v.version : null;
    };
    module2.exports = valid;
  }
});

// node_modules/semver/functions/clean.js
var require_clean = __commonJS({
  "node_modules/semver/functions/clean.js"(exports, module2) {
    var parse2 = require_parse();
    var clean = (version2, options) => {
      const s = parse2(version2.trim().replace(/^[=v]+/, ""), options);
      return s ? s.version : null;
    };
    module2.exports = clean;
  }
});

// node_modules/semver/functions/inc.js
var require_inc = __commonJS({
  "node_modules/semver/functions/inc.js"(exports, module2) {
    var SemVer = require_semver();
    var inc = (version2, release, options, identifier, identifierBase) => {
      if (typeof options === "string") {
        identifierBase = identifier;
        identifier = options;
        options = void 0;
      }
      try {
        return new SemVer(
          version2 instanceof SemVer ? version2.version : version2,
          options
        ).inc(release, identifier, identifierBase).version;
      } catch (er) {
        return null;
      }
    };
    module2.exports = inc;
  }
});

// node_modules/semver/functions/diff.js
var require_diff = __commonJS({
  "node_modules/semver/functions/diff.js"(exports, module2) {
    var parse2 = require_parse();
    var diff = (version1, version2) => {
      const v12 = parse2(version1, null, true);
      const v2 = parse2(version2, null, true);
      const comparison = v12.compare(v2);
      if (comparison === 0) {
        return null;
      }
      const v1Higher = comparison > 0;
      const highVersion = v1Higher ? v12 : v2;
      const lowVersion = v1Higher ? v2 : v12;
      const highHasPre = !!highVersion.prerelease.length;
      const lowHasPre = !!lowVersion.prerelease.length;
      if (lowHasPre && !highHasPre) {
        if (!lowVersion.patch && !lowVersion.minor) {
          return "major";
        }
        if (highVersion.patch) {
          return "patch";
        }
        if (highVersion.minor) {
          return "minor";
        }
        return "major";
      }
      const prefix = highHasPre ? "pre" : "";
      if (v12.major !== v2.major) {
        return prefix + "major";
      }
      if (v12.minor !== v2.minor) {
        return prefix + "minor";
      }
      if (v12.patch !== v2.patch) {
        return prefix + "patch";
      }
      return "prerelease";
    };
    module2.exports = diff;
  }
});

// node_modules/semver/functions/major.js
var require_major = __commonJS({
  "node_modules/semver/functions/major.js"(exports, module2) {
    var SemVer = require_semver();
    var major = (a, loose) => new SemVer(a, loose).major;
    module2.exports = major;
  }
});

// node_modules/semver/functions/minor.js
var require_minor = __commonJS({
  "node_modules/semver/functions/minor.js"(exports, module2) {
    var SemVer = require_semver();
    var minor = (a, loose) => new SemVer(a, loose).minor;
    module2.exports = minor;
  }
});

// node_modules/semver/functions/patch.js
var require_patch = __commonJS({
  "node_modules/semver/functions/patch.js"(exports, module2) {
    var SemVer = require_semver();
    var patch = (a, loose) => new SemVer(a, loose).patch;
    module2.exports = patch;
  }
});

// node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS({
  "node_modules/semver/functions/prerelease.js"(exports, module2) {
    var parse2 = require_parse();
    var prerelease = (version2, options) => {
      const parsed = parse2(version2, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    };
    module2.exports = prerelease;
  }
});

// node_modules/semver/functions/compare.js
var require_compare = __commonJS({
  "node_modules/semver/functions/compare.js"(exports, module2) {
    var SemVer = require_semver();
    var compare = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
    module2.exports = compare;
  }
});

// node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS({
  "node_modules/semver/functions/rcompare.js"(exports, module2) {
    var compare = require_compare();
    var rcompare = (a, b, loose) => compare(b, a, loose);
    module2.exports = rcompare;
  }
});

// node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS({
  "node_modules/semver/functions/compare-loose.js"(exports, module2) {
    var compare = require_compare();
    var compareLoose = (a, b) => compare(a, b, true);
    module2.exports = compareLoose;
  }
});

// node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS({
  "node_modules/semver/functions/compare-build.js"(exports, module2) {
    var SemVer = require_semver();
    var compareBuild = (a, b, loose) => {
      const versionA = new SemVer(a, loose);
      const versionB = new SemVer(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    };
    module2.exports = compareBuild;
  }
});

// node_modules/semver/functions/sort.js
var require_sort = __commonJS({
  "node_modules/semver/functions/sort.js"(exports, module2) {
    var compareBuild = require_compare_build();
    var sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
    module2.exports = sort;
  }
});

// node_modules/semver/functions/rsort.js
var require_rsort = __commonJS({
  "node_modules/semver/functions/rsort.js"(exports, module2) {
    var compareBuild = require_compare_build();
    var rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
    module2.exports = rsort;
  }
});

// node_modules/semver/functions/gt.js
var require_gt = __commonJS({
  "node_modules/semver/functions/gt.js"(exports, module2) {
    var compare = require_compare();
    var gt = (a, b, loose) => compare(a, b, loose) > 0;
    module2.exports = gt;
  }
});

// node_modules/semver/functions/lt.js
var require_lt = __commonJS({
  "node_modules/semver/functions/lt.js"(exports, module2) {
    var compare = require_compare();
    var lt = (a, b, loose) => compare(a, b, loose) < 0;
    module2.exports = lt;
  }
});

// node_modules/semver/functions/eq.js
var require_eq = __commonJS({
  "node_modules/semver/functions/eq.js"(exports, module2) {
    var compare = require_compare();
    var eq = (a, b, loose) => compare(a, b, loose) === 0;
    module2.exports = eq;
  }
});

// node_modules/semver/functions/neq.js
var require_neq = __commonJS({
  "node_modules/semver/functions/neq.js"(exports, module2) {
    var compare = require_compare();
    var neq = (a, b, loose) => compare(a, b, loose) !== 0;
    module2.exports = neq;
  }
});

// node_modules/semver/functions/gte.js
var require_gte = __commonJS({
  "node_modules/semver/functions/gte.js"(exports, module2) {
    var compare = require_compare();
    var gte = (a, b, loose) => compare(a, b, loose) >= 0;
    module2.exports = gte;
  }
});

// node_modules/semver/functions/lte.js
var require_lte = __commonJS({
  "node_modules/semver/functions/lte.js"(exports, module2) {
    var compare = require_compare();
    var lte = (a, b, loose) => compare(a, b, loose) <= 0;
    module2.exports = lte;
  }
});

// node_modules/semver/functions/cmp.js
var require_cmp = __commonJS({
  "node_modules/semver/functions/cmp.js"(exports, module2) {
    var eq = require_eq();
    var neq = require_neq();
    var gt = require_gt();
    var gte = require_gte();
    var lt = require_lt();
    var lte = require_lte();
    var cmp = (a, op, b, loose) => {
      switch (op) {
        case "===":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a === b;
        case "!==":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError(`Invalid operator: ${op}`);
      }
    };
    module2.exports = cmp;
  }
});

// node_modules/semver/functions/coerce.js
var require_coerce = __commonJS({
  "node_modules/semver/functions/coerce.js"(exports, module2) {
    var SemVer = require_semver();
    var parse2 = require_parse();
    var { safeRe: re, t } = require_re();
    var coerce = (version2, options) => {
      if (version2 instanceof SemVer) {
        return version2;
      }
      if (typeof version2 === "number") {
        version2 = String(version2);
      }
      if (typeof version2 !== "string") {
        return null;
      }
      options = options || {};
      let match = null;
      if (!options.rtl) {
        match = version2.match(re[t.COERCE]);
      } else {
        let next;
        while ((next = re[t.COERCERTL].exec(version2)) && (!match || match.index + match[0].length !== version2.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
        }
        re[t.COERCERTL].lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      return parse2(`${match[2]}.${match[3] || "0"}.${match[4] || "0"}`, options);
    };
    module2.exports = coerce;
  }
});

// node_modules/yallist/iterator.js
var require_iterator2 = __commonJS({
  "node_modules/yallist/iterator.js"(exports, module2) {
    "use strict";
    module2.exports = function(Yallist) {
      Yallist.prototype[Symbol.iterator] = function* () {
        for (let walker = this.head; walker; walker = walker.next) {
          yield walker.value;
        }
      };
    };
  }
});

// node_modules/yallist/yallist.js
var require_yallist = __commonJS({
  "node_modules/yallist/yallist.js"(exports, module2) {
    "use strict";
    module2.exports = Yallist;
    Yallist.Node = Node;
    Yallist.create = Yallist;
    function Yallist(list) {
      var self2 = this;
      if (!(self2 instanceof Yallist)) {
        self2 = new Yallist();
      }
      self2.tail = null;
      self2.head = null;
      self2.length = 0;
      if (list && typeof list.forEach === "function") {
        list.forEach(function(item) {
          self2.push(item);
        });
      } else if (arguments.length > 0) {
        for (var i = 0, l = arguments.length; i < l; i++) {
          self2.push(arguments[i]);
        }
      }
      return self2;
    }
    Yallist.prototype.removeNode = function(node) {
      if (node.list !== this) {
        throw new Error("removing node which does not belong to this list");
      }
      var next = node.next;
      var prev = node.prev;
      if (next) {
        next.prev = prev;
      }
      if (prev) {
        prev.next = next;
      }
      if (node === this.head) {
        this.head = next;
      }
      if (node === this.tail) {
        this.tail = prev;
      }
      node.list.length--;
      node.next = null;
      node.prev = null;
      node.list = null;
      return next;
    };
    Yallist.prototype.unshiftNode = function(node) {
      if (node === this.head) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var head = this.head;
      node.list = this;
      node.next = head;
      if (head) {
        head.prev = node;
      }
      this.head = node;
      if (!this.tail) {
        this.tail = node;
      }
      this.length++;
    };
    Yallist.prototype.pushNode = function(node) {
      if (node === this.tail) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var tail = this.tail;
      node.list = this;
      node.prev = tail;
      if (tail) {
        tail.next = node;
      }
      this.tail = node;
      if (!this.head) {
        this.head = node;
      }
      this.length++;
    };
    Yallist.prototype.push = function() {
      for (var i = 0, l = arguments.length; i < l; i++) {
        push(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.unshift = function() {
      for (var i = 0, l = arguments.length; i < l; i++) {
        unshift(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.pop = function() {
      if (!this.tail) {
        return void 0;
      }
      var res = this.tail.value;
      this.tail = this.tail.prev;
      if (this.tail) {
        this.tail.next = null;
      } else {
        this.head = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.shift = function() {
      if (!this.head) {
        return void 0;
      }
      var res = this.head.value;
      this.head = this.head.next;
      if (this.head) {
        this.head.prev = null;
      } else {
        this.tail = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.forEach = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.head, i = 0; walker !== null; i++) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.next;
      }
    };
    Yallist.prototype.forEachReverse = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.prev;
      }
    };
    Yallist.prototype.get = function(n) {
      for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
        walker = walker.next;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.getReverse = function(n) {
      for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
        walker = walker.prev;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.map = function(fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.head; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.next;
      }
      return res;
    };
    Yallist.prototype.mapReverse = function(fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.tail; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.prev;
      }
      return res;
    };
    Yallist.prototype.reduce = function(fn, initial) {
      var acc;
      var walker = this.head;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.head) {
        walker = this.head.next;
        acc = this.head.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i = 0; walker !== null; i++) {
        acc = fn(acc, walker.value, i);
        walker = walker.next;
      }
      return acc;
    };
    Yallist.prototype.reduceReverse = function(fn, initial) {
      var acc;
      var walker = this.tail;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.tail) {
        walker = this.tail.prev;
        acc = this.tail.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i = this.length - 1; walker !== null; i--) {
        acc = fn(acc, walker.value, i);
        walker = walker.prev;
      }
      return acc;
    };
    Yallist.prototype.toArray = function() {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.head; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.next;
      }
      return arr;
    };
    Yallist.prototype.toArrayReverse = function() {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.tail; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.prev;
      }
      return arr;
    };
    Yallist.prototype.slice = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
        walker = walker.next;
      }
      for (; walker !== null && i < to; i++, walker = walker.next) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.sliceReverse = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
        walker = walker.prev;
      }
      for (; walker !== null && i > from; i--, walker = walker.prev) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
      if (start > this.length) {
        start = this.length - 1;
      }
      if (start < 0) {
        start = this.length + start;
      }
      for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
        walker = walker.next;
      }
      var ret = [];
      for (var i = 0; walker && i < deleteCount; i++) {
        ret.push(walker.value);
        walker = this.removeNode(walker);
      }
      if (walker === null) {
        walker = this.tail;
      }
      if (walker !== this.head && walker !== this.tail) {
        walker = walker.prev;
      }
      for (var i = 0; i < nodes.length; i++) {
        walker = insert(this, walker, nodes[i]);
      }
      return ret;
    };
    Yallist.prototype.reverse = function() {
      var head = this.head;
      var tail = this.tail;
      for (var walker = head; walker !== null; walker = walker.prev) {
        var p = walker.prev;
        walker.prev = walker.next;
        walker.next = p;
      }
      this.head = tail;
      this.tail = head;
      return this;
    };
    function insert(self2, node, value) {
      var inserted = node === self2.head ? new Node(value, null, node, self2) : new Node(value, node, node.next, self2);
      if (inserted.next === null) {
        self2.tail = inserted;
      }
      if (inserted.prev === null) {
        self2.head = inserted;
      }
      self2.length++;
      return inserted;
    }
    function push(self2, item) {
      self2.tail = new Node(item, self2.tail, null, self2);
      if (!self2.head) {
        self2.head = self2.tail;
      }
      self2.length++;
    }
    function unshift(self2, item) {
      self2.head = new Node(item, null, self2.head, self2);
      if (!self2.tail) {
        self2.tail = self2.head;
      }
      self2.length++;
    }
    function Node(value, prev, next, list) {
      if (!(this instanceof Node)) {
        return new Node(value, prev, next, list);
      }
      this.list = list;
      this.value = value;
      if (prev) {
        prev.next = this;
        this.prev = prev;
      } else {
        this.prev = null;
      }
      if (next) {
        next.prev = this;
        this.next = next;
      } else {
        this.next = null;
      }
    }
    try {
      require_iterator2()(Yallist);
    } catch (er) {
    }
  }
});

// node_modules/semver/node_modules/lru-cache/index.js
var require_lru_cache2 = __commonJS({
  "node_modules/semver/node_modules/lru-cache/index.js"(exports, module2) {
    "use strict";
    var Yallist = require_yallist();
    var MAX = Symbol("max");
    var LENGTH = Symbol("length");
    var LENGTH_CALCULATOR = Symbol("lengthCalculator");
    var ALLOW_STALE = Symbol("allowStale");
    var MAX_AGE = Symbol("maxAge");
    var DISPOSE = Symbol("dispose");
    var NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
    var LRU_LIST = Symbol("lruList");
    var CACHE = Symbol("cache");
    var UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
    var naiveLength = () => 1;
    var LRUCache = class {
      constructor(options) {
        if (typeof options === "number")
          options = { max: options };
        if (!options)
          options = {};
        if (options.max && (typeof options.max !== "number" || options.max < 0))
          throw new TypeError("max must be a non-negative number");
        const max = this[MAX] = options.max || Infinity;
        const lc = options.length || naiveLength;
        this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
        this[ALLOW_STALE] = options.stale || false;
        if (options.maxAge && typeof options.maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        this[MAX_AGE] = options.maxAge || 0;
        this[DISPOSE] = options.dispose;
        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
        this.reset();
      }
      // resize the cache when the max changes.
      set max(mL) {
        if (typeof mL !== "number" || mL < 0)
          throw new TypeError("max must be a non-negative number");
        this[MAX] = mL || Infinity;
        trim(this);
      }
      get max() {
        return this[MAX];
      }
      set allowStale(allowStale) {
        this[ALLOW_STALE] = !!allowStale;
      }
      get allowStale() {
        return this[ALLOW_STALE];
      }
      set maxAge(mA) {
        if (typeof mA !== "number")
          throw new TypeError("maxAge must be a non-negative number");
        this[MAX_AGE] = mA;
        trim(this);
      }
      get maxAge() {
        return this[MAX_AGE];
      }
      // resize the cache when the lengthCalculator changes.
      set lengthCalculator(lC) {
        if (typeof lC !== "function")
          lC = naiveLength;
        if (lC !== this[LENGTH_CALCULATOR]) {
          this[LENGTH_CALCULATOR] = lC;
          this[LENGTH] = 0;
          this[LRU_LIST].forEach((hit) => {
            hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
            this[LENGTH] += hit.length;
          });
        }
        trim(this);
      }
      get lengthCalculator() {
        return this[LENGTH_CALCULATOR];
      }
      get length() {
        return this[LENGTH];
      }
      get itemCount() {
        return this[LRU_LIST].length;
      }
      rforEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].tail; walker !== null; ) {
          const prev = walker.prev;
          forEachStep(this, fn, walker, thisp);
          walker = prev;
        }
      }
      forEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].head; walker !== null; ) {
          const next = walker.next;
          forEachStep(this, fn, walker, thisp);
          walker = next;
        }
      }
      keys() {
        return this[LRU_LIST].toArray().map((k) => k.key);
      }
      values() {
        return this[LRU_LIST].toArray().map((k) => k.value);
      }
      reset() {
        if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
          this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
        }
        this[CACHE] = /* @__PURE__ */ new Map();
        this[LRU_LIST] = new Yallist();
        this[LENGTH] = 0;
      }
      dump() {
        return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {
          k: hit.key,
          v: hit.value,
          e: hit.now + (hit.maxAge || 0)
        }).toArray().filter((h) => h);
      }
      dumpLru() {
        return this[LRU_LIST];
      }
      set(key, value, maxAge) {
        maxAge = maxAge || this[MAX_AGE];
        if (maxAge && typeof maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        const now = maxAge ? Date.now() : 0;
        const len = this[LENGTH_CALCULATOR](value, key);
        if (this[CACHE].has(key)) {
          if (len > this[MAX]) {
            del(this, this[CACHE].get(key));
            return false;
          }
          const node = this[CACHE].get(key);
          const item = node.value;
          if (this[DISPOSE]) {
            if (!this[NO_DISPOSE_ON_SET])
              this[DISPOSE](key, item.value);
          }
          item.now = now;
          item.maxAge = maxAge;
          item.value = value;
          this[LENGTH] += len - item.length;
          item.length = len;
          this.get(key);
          trim(this);
          return true;
        }
        const hit = new Entry(key, value, len, now, maxAge);
        if (hit.length > this[MAX]) {
          if (this[DISPOSE])
            this[DISPOSE](key, value);
          return false;
        }
        this[LENGTH] += hit.length;
        this[LRU_LIST].unshift(hit);
        this[CACHE].set(key, this[LRU_LIST].head);
        trim(this);
        return true;
      }
      has(key) {
        if (!this[CACHE].has(key))
          return false;
        const hit = this[CACHE].get(key).value;
        return !isStale(this, hit);
      }
      get(key) {
        return get(this, key, true);
      }
      peek(key) {
        return get(this, key, false);
      }
      pop() {
        const node = this[LRU_LIST].tail;
        if (!node)
          return null;
        del(this, node);
        return node.value;
      }
      del(key) {
        del(this, this[CACHE].get(key));
      }
      load(arr) {
        this.reset();
        const now = Date.now();
        for (let l = arr.length - 1; l >= 0; l--) {
          const hit = arr[l];
          const expiresAt = hit.e || 0;
          if (expiresAt === 0)
            this.set(hit.k, hit.v);
          else {
            const maxAge = expiresAt - now;
            if (maxAge > 0) {
              this.set(hit.k, hit.v, maxAge);
            }
          }
        }
      }
      prune() {
        this[CACHE].forEach((value, key) => get(this, key, false));
      }
    };
    var get = (self2, key, doUse) => {
      const node = self2[CACHE].get(key);
      if (node) {
        const hit = node.value;
        if (isStale(self2, hit)) {
          del(self2, node);
          if (!self2[ALLOW_STALE])
            return void 0;
        } else {
          if (doUse) {
            if (self2[UPDATE_AGE_ON_GET])
              node.value.now = Date.now();
            self2[LRU_LIST].unshiftNode(node);
          }
        }
        return hit.value;
      }
    };
    var isStale = (self2, hit) => {
      if (!hit || !hit.maxAge && !self2[MAX_AGE])
        return false;
      const diff = Date.now() - hit.now;
      return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
    };
    var trim = (self2) => {
      if (self2[LENGTH] > self2[MAX]) {
        for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
          const prev = walker.prev;
          del(self2, walker);
          walker = prev;
        }
      }
    };
    var del = (self2, node) => {
      if (node) {
        const hit = node.value;
        if (self2[DISPOSE])
          self2[DISPOSE](hit.key, hit.value);
        self2[LENGTH] -= hit.length;
        self2[CACHE].delete(hit.key);
        self2[LRU_LIST].removeNode(node);
      }
    };
    var Entry = class {
      constructor(key, value, length, now, maxAge) {
        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
      }
    };
    var forEachStep = (self2, fn, node, thisp) => {
      let hit = node.value;
      if (isStale(self2, hit)) {
        del(self2, node);
        if (!self2[ALLOW_STALE])
          hit = void 0;
      }
      if (hit)
        fn.call(thisp, hit.value, hit.key, self2);
    };
    module2.exports = LRUCache;
  }
});

// node_modules/semver/classes/range.js
var require_range = __commonJS({
  "node_modules/semver/classes/range.js"(exports, module2) {
    var Range = class _Range {
      constructor(range, options) {
        options = parseOptions(options);
        if (range instanceof _Range) {
          if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
            return range;
          } else {
            return new _Range(range.raw, options);
          }
        }
        if (range instanceof Comparator) {
          this.raw = range.value;
          this.set = [[range]];
          this.format();
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range.trim().split(/\s+/).join(" ");
        this.set = this.raw.split("||").map((r) => this.parseRange(r.trim())).filter((c) => c.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c) => !isNullSet(c[0]));
          if (this.set.length === 0) {
            this.set = [first];
          } else if (this.set.length > 1) {
            for (const c of this.set) {
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break;
              }
            }
          }
        }
        this.format();
      }
      format() {
        this.range = this.set.map((comps) => comps.join(" ").trim()).join("||").trim();
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range) {
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range;
        const cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug("hyphen replace", range);
        range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
        debug("comparator trim", range);
        range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
        debug("tilde trim", range);
        range = range.replace(re[t.CARETTRIM], caretTrimReplace);
        debug("caret trim", range);
        let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp) => {
            debug("loose invalid filter", comp, this.options);
            return !!comp.match(re[t.COMPARATORLOOSE]);
          });
        }
        debug("range list", rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map((comp) => new Comparator(comp, this.options));
        for (const comp of comparators) {
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) {
          rangeMap.delete("");
        }
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range, options) {
        if (!(range instanceof _Range)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      // if ANY of the sets match ALL of its comparators, then pass
      test(version2) {
        if (!version2) {
          return false;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i = 0; i < this.set.length; i++) {
          if (testSet(this.set[i], version2, this.options)) {
            return true;
          }
        }
        return false;
      }
    };
    module2.exports = Range;
    var LRU = require_lru_cache2();
    var cache = new LRU({ max: 1e3 });
    var parseOptions = require_parse_options();
    var Comparator = require_comparator();
    var debug = require_debug2();
    var SemVer = require_semver();
    var {
      safeRe: re,
      t,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = require_re();
    var { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants10();
    var isNullSet = (c) => c.value === "<0.0.0-0";
    var isAny = (c) => c.value === "";
    var isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    var parseComparator = (comp, options) => {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    };
    var isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
    var replaceTildes = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" ");
    };
    var replaceTilde = (comp, options) => {
      const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
      return comp.replace(r, (_, M, m, p, pr) => {
        debug("tilde", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else {
          ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        }
        debug("tilde return", ret);
        return ret;
      });
    };
    var replaceCarets = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" ");
    };
    var replaceCaret = (comp, options) => {
      debug("caret", comp, options);
      const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
      const z = options.includePrerelease ? "-0" : "";
      return comp.replace(r, (_, M, m, p, pr) => {
        debug("caret", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          if (M === "0") {
            ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
          }
        } else {
          debug("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
          }
        }
        debug("caret return", ret);
        return ret;
      });
    };
    var replaceXRanges = (comp, options) => {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ");
    };
    var replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
      return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          if (gtlt === "<") {
            pr = "-0";
          }
          ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) {
          ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        }
        debug("xRange return", ret);
        return ret;
      });
    };
    var replaceStars = (comp, options) => {
      debug("replaceStars", comp, options);
      return comp.trim().replace(re[t.STAR], "");
    };
    var replaceGTE0 = (comp, options) => {
      debug("replaceGTE0", comp, options);
      return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
    };
    var hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }
      return `${from} ${to}`.trim();
    };
    var testSet = (set, version2, options) => {
      for (let i = 0; i < set.length; i++) {
        if (!set[i].test(version2)) {
          return false;
        }
      }
      if (version2.prerelease.length && !options.includePrerelease) {
        for (let i = 0; i < set.length; i++) {
          debug(set[i].semver);
          if (set[i].semver === Comparator.ANY) {
            continue;
          }
          if (set[i].semver.prerelease.length > 0) {
            const allowed = set[i].semver;
            if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
  }
});

// node_modules/semver/classes/comparator.js
var require_comparator = __commonJS({
  "node_modules/semver/classes/comparator.js"(exports, module2) {
    var ANY = Symbol("SemVer ANY");
    var Comparator = class _Comparator {
      static get ANY() {
        return ANY;
      }
      constructor(comp, options) {
        options = parseOptions(options);
        if (comp instanceof _Comparator) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        comp = comp.trim().split(/\s+/).join(" ");
        debug("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug("comp", this);
      }
      parse(comp) {
        const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
        const m = comp.match(r);
        if (!m) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m[1] !== void 0 ? m[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m[2]) {
          this.semver = ANY;
        } else {
          this.semver = new SemVer(m[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version2) {
        debug("Comparator.test", version2, this.options.loose);
        if (this.semver === ANY || version2 === ANY) {
          return true;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp(version2, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof _Comparator)) {
          throw new TypeError("a Comparator is required");
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range(this.value, options).test(comp.semver);
        }
        options = parseOptions(options);
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) {
          return false;
        }
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) {
          return false;
        }
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
          return true;
        }
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
          return true;
        }
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) {
          return true;
        }
        if (cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) {
          return true;
        }
        if (cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) {
          return true;
        }
        return false;
      }
    };
    module2.exports = Comparator;
    var parseOptions = require_parse_options();
    var { safeRe: re, t } = require_re();
    var cmp = require_cmp();
    var debug = require_debug2();
    var SemVer = require_semver();
    var Range = require_range();
  }
});

// node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS({
  "node_modules/semver/functions/satisfies.js"(exports, module2) {
    var Range = require_range();
    var satisfies = (version2, range, options) => {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version2);
    };
    module2.exports = satisfies;
  }
});

// node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS({
  "node_modules/semver/ranges/to-comparators.js"(exports, module2) {
    var Range = require_range();
    var toComparators = (range, options) => new Range(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
    module2.exports = toComparators;
  }
});

// node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS({
  "node_modules/semver/ranges/max-satisfying.js"(exports, module2) {
    var SemVer = require_semver();
    var Range = require_range();
    var maxSatisfying = (versions, range, options) => {
      let max = null;
      let maxSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    };
    module2.exports = maxSatisfying;
  }
});

// node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS({
  "node_modules/semver/ranges/min-satisfying.js"(exports, module2) {
    var SemVer = require_semver();
    var Range = require_range();
    var minSatisfying = (versions, range, options) => {
      let min = null;
      let minSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    };
    module2.exports = minSatisfying;
  }
});

// node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS({
  "node_modules/semver/ranges/min-version.js"(exports, module2) {
    var SemVer = require_semver();
    var Range = require_range();
    var gt = require_gt();
    var minVersion = (range, loose) => {
      range = new Range(range, loose);
      let minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let setMin = null;
        comparators.forEach((comparator) => {
          const compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            case "":
            case ">=":
              if (!setMin || gt(compver, setMin)) {
                setMin = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            default:
              throw new Error(`Unexpected operation: ${comparator.operator}`);
          }
        });
        if (setMin && (!minver || gt(minver, setMin))) {
          minver = setMin;
        }
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    };
    module2.exports = minVersion;
  }
});

// node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS({
  "node_modules/semver/ranges/valid.js"(exports, module2) {
    var Range = require_range();
    var validRange = (range, options) => {
      try {
        return new Range(range, options).range || "*";
      } catch (er) {
        return null;
      }
    };
    module2.exports = validRange;
  }
});

// node_modules/semver/ranges/outside.js
var require_outside = __commonJS({
  "node_modules/semver/ranges/outside.js"(exports, module2) {
    var SemVer = require_semver();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var Range = require_range();
    var satisfies = require_satisfies();
    var gt = require_gt();
    var lt = require_lt();
    var lte = require_lte();
    var gte = require_gte();
    var outside = (version2, range, hilo, options) => {
      version2 = new SemVer(version2, options);
      range = new Range(range, options);
      let gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version2, range, options)) {
        return false;
      }
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let high = null;
        let low = null;
        comparators.forEach((comparator) => {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version2, low.semver)) {
          return false;
        }
      }
      return true;
    };
    module2.exports = outside;
  }
});

// node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS({
  "node_modules/semver/ranges/gtr.js"(exports, module2) {
    var outside = require_outside();
    var gtr = (version2, range, options) => outside(version2, range, ">", options);
    module2.exports = gtr;
  }
});

// node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS({
  "node_modules/semver/ranges/ltr.js"(exports, module2) {
    var outside = require_outside();
    var ltr = (version2, range, options) => outside(version2, range, "<", options);
    module2.exports = ltr;
  }
});

// node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS({
  "node_modules/semver/ranges/intersects.js"(exports, module2) {
    var Range = require_range();
    var intersects = (r1, r2, options) => {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2, options);
    };
    module2.exports = intersects;
  }
});

// node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS({
  "node_modules/semver/ranges/simplify.js"(exports, module2) {
    var satisfies = require_satisfies();
    var compare = require_compare();
    module2.exports = (versions, range, options) => {
      const set = [];
      let first = null;
      let prev = null;
      const v = versions.sort((a, b) => compare(a, b, options));
      for (const version2 of v) {
        const included = satisfies(version2, range, options);
        if (included) {
          prev = version2;
          if (!first) {
            first = version2;
          }
        } else {
          if (prev) {
            set.push([first, prev]);
          }
          prev = null;
          first = null;
        }
      }
      if (first) {
        set.push([first, null]);
      }
      const ranges = [];
      for (const [min, max] of set) {
        if (min === max) {
          ranges.push(min);
        } else if (!max && min === v[0]) {
          ranges.push("*");
        } else if (!max) {
          ranges.push(`>=${min}`);
        } else if (min === v[0]) {
          ranges.push(`<=${max}`);
        } else {
          ranges.push(`${min} - ${max}`);
        }
      }
      const simplified = ranges.join(" || ");
      const original = typeof range.raw === "string" ? range.raw : String(range);
      return simplified.length < original.length ? simplified : range;
    };
  }
});

// node_modules/semver/ranges/subset.js
var require_subset = __commonJS({
  "node_modules/semver/ranges/subset.js"(exports, module2) {
    var Range = require_range();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var satisfies = require_satisfies();
    var compare = require_compare();
    var subset = (sub, dom, options = {}) => {
      if (sub === dom) {
        return true;
      }
      sub = new Range(sub, options);
      dom = new Range(dom, options);
      let sawNonNull = false;
      OUTER:
        for (const simpleSub of sub.set) {
          for (const simpleDom of dom.set) {
            const isSub = simpleSubset(simpleSub, simpleDom, options);
            sawNonNull = sawNonNull || isSub !== null;
            if (isSub) {
              continue OUTER;
            }
          }
          if (sawNonNull) {
            return false;
          }
        }
      return true;
    };
    var minimumVersionWithPreRelease = [new Comparator(">=0.0.0-0")];
    var minimumVersion = [new Comparator(">=0.0.0")];
    var simpleSubset = (sub, dom, options) => {
      if (sub === dom) {
        return true;
      }
      if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY) {
          return true;
        } else if (options.includePrerelease) {
          sub = minimumVersionWithPreRelease;
        } else {
          sub = minimumVersion;
        }
      }
      if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease) {
          return true;
        } else {
          dom = minimumVersion;
        }
      }
      const eqSet = /* @__PURE__ */ new Set();
      let gt, lt;
      for (const c of sub) {
        if (c.operator === ">" || c.operator === ">=") {
          gt = higherGT(gt, c, options);
        } else if (c.operator === "<" || c.operator === "<=") {
          lt = lowerLT(lt, c, options);
        } else {
          eqSet.add(c.semver);
        }
      }
      if (eqSet.size > 1) {
        return null;
      }
      let gtltComp;
      if (gt && lt) {
        gtltComp = compare(gt.semver, lt.semver, options);
        if (gtltComp > 0) {
          return null;
        } else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<=")) {
          return null;
        }
      }
      for (const eq of eqSet) {
        if (gt && !satisfies(eq, String(gt), options)) {
          return null;
        }
        if (lt && !satisfies(eq, String(lt), options)) {
          return null;
        }
        for (const c of dom) {
          if (!satisfies(eq, String(c), options)) {
            return false;
          }
        }
        return true;
      }
      let higher, lower;
      let hasDomLT, hasDomGT;
      let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
      let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
      if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) {
        needDomLTPre = false;
      }
      for (const c of dom) {
        hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
        hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
        if (gt) {
          if (needDomGTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
              needDomGTPre = false;
            }
          }
          if (c.operator === ">" || c.operator === ">=") {
            higher = higherGT(gt, c, options);
            if (higher === c && higher !== gt) {
              return false;
            }
          } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c), options)) {
            return false;
          }
        }
        if (lt) {
          if (needDomLTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
              needDomLTPre = false;
            }
          }
          if (c.operator === "<" || c.operator === "<=") {
            lower = lowerLT(lt, c, options);
            if (lower === c && lower !== lt) {
              return false;
            }
          } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options)) {
            return false;
          }
        }
        if (!c.operator && (lt || gt) && gtltComp !== 0) {
          return false;
        }
      }
      if (gt && hasDomLT && !lt && gtltComp !== 0) {
        return false;
      }
      if (lt && hasDomGT && !gt && gtltComp !== 0) {
        return false;
      }
      if (needDomGTPre || needDomLTPre) {
        return false;
      }
      return true;
    };
    var higherGT = (a, b, options) => {
      if (!a) {
        return b;
      }
      const comp = compare(a.semver, b.semver, options);
      return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
    };
    var lowerLT = (a, b, options) => {
      if (!a) {
        return b;
      }
      const comp = compare(a.semver, b.semver, options);
      return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
    };
    module2.exports = subset;
  }
});

// node_modules/semver/index.js
var require_semver2 = __commonJS({
  "node_modules/semver/index.js"(exports, module2) {
    var internalRe = require_re();
    var constants = require_constants10();
    var SemVer = require_semver();
    var identifiers = require_identifiers();
    var parse2 = require_parse();
    var valid = require_valid();
    var clean = require_clean();
    var inc = require_inc();
    var diff = require_diff();
    var major = require_major();
    var minor = require_minor();
    var patch = require_patch();
    var prerelease = require_prerelease();
    var compare = require_compare();
    var rcompare = require_rcompare();
    var compareLoose = require_compare_loose();
    var compareBuild = require_compare_build();
    var sort = require_sort();
    var rsort = require_rsort();
    var gt = require_gt();
    var lt = require_lt();
    var eq = require_eq();
    var neq = require_neq();
    var gte = require_gte();
    var lte = require_lte();
    var cmp = require_cmp();
    var coerce = require_coerce();
    var Comparator = require_comparator();
    var Range = require_range();
    var satisfies = require_satisfies();
    var toComparators = require_to_comparators();
    var maxSatisfying = require_max_satisfying();
    var minSatisfying = require_min_satisfying();
    var minVersion = require_min_version();
    var validRange = require_valid2();
    var outside = require_outside();
    var gtr = require_gtr();
    var ltr = require_ltr();
    var intersects = require_intersects();
    var simplifyRange = require_simplify();
    var subset = require_subset();
    module2.exports = {
      parse: parse2,
      valid,
      clean,
      inc,
      diff,
      major,
      minor,
      patch,
      prerelease,
      compare,
      rcompare,
      compareLoose,
      compareBuild,
      sort,
      rsort,
      gt,
      lt,
      eq,
      neq,
      gte,
      lte,
      cmp,
      coerce,
      Comparator,
      Range,
      satisfies,
      toComparators,
      maxSatisfying,
      minSatisfying,
      minVersion,
      validRange,
      outside,
      gtr,
      ltr,
      intersects,
      simplifyRange,
      subset,
      SemVer,
      re: internalRe.re,
      src: internalRe.src,
      tokens: internalRe.t,
      SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
      RELEASE_TYPES: constants.RELEASE_TYPES,
      compareIdentifiers: identifiers.compareIdentifiers,
      rcompareIdentifiers: identifiers.rcompareIdentifiers
    };
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/patchers/aws_p.js
var require_aws_p = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/patchers/aws_p.js"(exports, module2) {
    "use strict";
    var semver = require_semver2();
    var Aws = require_aws2();
    var contextUtils = require_context_utils();
    var Utils = require_utils6();
    var logger2 = require_logger3();
    var minVersion = "2.7.15";
    var throttledErrorDefault = function throttledErrorDefault2() {
      return false;
    };
    var captureAWS = function captureAWS2(awssdk) {
      if (!semver.gte(awssdk.VERSION, minVersion)) {
        throw new Error("AWS SDK version " + minVersion + " or greater required.");
      }
      for (var prop in awssdk) {
        if (awssdk[prop].serviceIdentifier) {
          var Service2 = awssdk[prop];
          Service2.prototype.customizeRequests(captureAWSRequest);
        }
      }
      return awssdk;
    };
    var captureAWSClient = function captureAWSClient2(service) {
      service.customizeRequests(captureAWSRequest);
      return service;
    };
    function captureAWSRequest(req) {
      var parent = contextUtils.resolveSegment(contextUtils.resolveManualSegmentParams(req.params));
      if (!parent) {
        var output = this.serviceIdentifier + "." + req.operation;
        if (!contextUtils.isAutomaticMode()) {
          logger2.getLogger().info("Call " + output + ' requires a segment object on the request params as "XRaySegment" for tracing in manual mode. Ignoring.');
        } else {
          logger2.getLogger().info("Call " + output + " is missing the sub/segment context for automatic mode. Ignoring.");
        }
        return req;
      }
      var throttledError = this.throttledError || throttledErrorDefault;
      var stack = new Error().stack;
      let subsegment;
      if (parent.notTraced) {
        subsegment = parent.addNewSubsegmentWithoutSampling(this.serviceIdentifier);
      } else {
        subsegment = parent.addNewSubsegment(this.serviceIdentifier);
      }
      var traceId = parent.segment ? parent.segment.trace_id : parent.trace_id;
      const data = parent.segment ? parent.segment.additionalTraceData : parent.additionalTraceData;
      var buildListener = function(req2) {
        let traceHeader = "Root=" + traceId + ";Parent=" + subsegment.id + ";Sampled=" + (subsegment.notTraced ? "0" : "1");
        if (data != null) {
          for (const [key, value] of Object.entries(data)) {
            traceHeader += ";" + key + "=" + value;
          }
        }
        req2.httpRequest.headers["X-Amzn-Trace-Id"] = traceHeader;
      };
      var completeListener = function(res) {
        subsegment.addAttribute("namespace", "aws");
        subsegment.addAttribute("aws", new Aws(res, subsegment.name));
        var httpRes = res.httpResponse;
        if (httpRes) {
          subsegment.addAttribute("http", new HttpResponse(httpRes));
          if (httpRes.statusCode === 429 || res.error && throttledError(res.error)) {
            subsegment.addThrottleFlag();
          }
        }
        if (res.error) {
          var err = { message: res.error.message, name: res.error.code, stack };
          if (httpRes && httpRes.statusCode) {
            if (Utils.getCauseTypeFromHttpStatus(httpRes.statusCode) == "error") {
              subsegment.addErrorFlag();
            }
            subsegment.close(err, true);
          } else {
            subsegment.close(err);
          }
        } else {
          if (httpRes && httpRes.statusCode) {
            var cause = Utils.getCauseTypeFromHttpStatus(httpRes.statusCode);
            if (cause) {
              subsegment[cause] = true;
            }
          }
          subsegment.close();
        }
      };
      req.on("beforePresign", function(req2) {
        parent.removeSubsegment(subsegment);
        parent.decrementCounter();
        req2.removeListener("build", buildListener);
        req2.removeListener("complete", completeListener);
      });
      req.on("build", buildListener).on("complete", completeListener);
      if (!req.__send) {
        req.__send = req.send;
        req.send = function(callback) {
          if (contextUtils.isAutomaticMode()) {
            var session = contextUtils.getNamespace();
            session.run(function() {
              contextUtils.setSegment(subsegment);
              req.__send(callback);
            });
          } else {
            req.__send(callback);
          }
        };
      }
    }
    function HttpResponse(res) {
      this.init(res);
    }
    HttpResponse.prototype.init = function init(res) {
      this.response = {
        status: res.statusCode || ""
      };
      if (res.headers && res.headers["content-length"]) {
        this.response.content_length = res.headers["content-length"];
      }
    };
    module2.exports.captureAWSClient = captureAWSClient;
    module2.exports.captureAWS = captureAWS;
  }
});

// node_modules/@aws-sdk/service-error-classification/node_modules/@smithy/service-error-classification/dist-cjs/constants.js
var require_constants11 = __commonJS({
  "node_modules/@aws-sdk/service-error-classification/node_modules/@smithy/service-error-classification/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = exports.TRANSIENT_ERROR_STATUS_CODES = exports.TRANSIENT_ERROR_CODES = exports.THROTTLING_ERROR_CODES = exports.CLOCK_SKEW_ERROR_CODES = void 0;
    exports.CLOCK_SKEW_ERROR_CODES = [
      "AuthFailure",
      "InvalidSignatureException",
      "RequestExpired",
      "RequestInTheFuture",
      "RequestTimeTooSkewed",
      "SignatureDoesNotMatch"
    ];
    exports.THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    exports.TRANSIENT_ERROR_CODES = ["TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    exports.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    exports.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "ECONNREFUSED", "EPIPE", "ETIMEDOUT"];
  }
});

// node_modules/@aws-sdk/service-error-classification/node_modules/@smithy/service-error-classification/dist-cjs/index.js
var require_dist_cjs60 = __commonJS({
  "node_modules/@aws-sdk/service-error-classification/node_modules/@smithy/service-error-classification/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isServerError = exports.isTransientError = exports.isThrottlingError = exports.isClockSkewError = exports.isRetryableByTrait = void 0;
    var constants_1 = require_constants11();
    var isRetryableByTrait = (error) => error.$retryable !== void 0;
    exports.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
    exports.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error) => {
      var _a, _b;
      return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || constants_1.THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
    };
    exports.isThrottlingError = isThrottlingError;
    var isTransientError = (error) => {
      var _a;
      return constants_1.TRANSIENT_ERROR_CODES.includes(error.name) || constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes((error === null || error === void 0 ? void 0 : error.code) || "") || constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
    };
    exports.isTransientError = isTransientError;
    var isServerError = (error) => {
      var _a;
      if (((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) !== void 0) {
        const statusCode = error.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !(0, exports.isTransientError)(error)) {
          return true;
        }
        return false;
      }
      return false;
    };
    exports.isServerError = isServerError;
  }
});

// node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js
var require_dist_cjs61 = __commonJS({
  "node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_dist_cjs60(), exports);
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/patchers/aws3_p.js
var require_aws3_p = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/patchers/aws3_p.js"(exports) {
    "use strict";
    var __importDefault3 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.captureAWSClient = void 0;
    var service_error_classification_1 = require_dist_cjs61();
    var aws_1 = __importDefault3(require_aws2());
    var querystring_1 = require("querystring");
    var subsegment_1 = __importDefault3(require_subsegment());
    var contextUtils = require_context_utils();
    var logger2 = require_logger3();
    var { safeParseInt } = require_utils6();
    var utils_1 = require_utils6();
    var XRAY_PLUGIN_NAME = "XRaySDKInstrumentation";
    var buildAttributesFromMetadata = async (service, operation, region, commandInput, res, error) => {
      var _a, _b, _c;
      const { extendedRequestId, requestId, httpStatusCode: statusCode, attempts } = ((_a = res === null || res === void 0 ? void 0 : res.output) === null || _a === void 0 ? void 0 : _a.$metadata) || (error === null || error === void 0 ? void 0 : error.$metadata);
      const aws = new aws_1.default({
        extendedRequestId,
        requestId,
        retryCount: attempts,
        data: res === null || res === void 0 ? void 0 : res.output,
        request: {
          operation,
          params: commandInput,
          httpRequest: {
            region,
            statusCode
          }
        }
      }, service);
      const http = {};
      if (statusCode) {
        http.response = {};
        http.response.status = statusCode;
      }
      if (((_b = res === null || res === void 0 ? void 0 : res.response) === null || _b === void 0 ? void 0 : _b.headers) && ((_c = res === null || res === void 0 ? void 0 : res.response) === null || _c === void 0 ? void 0 : _c.headers["content-length"]) !== void 0) {
        if (!http.response) {
          http.response = {};
        }
        http.response.content_length = safeParseInt(res.response.headers["content-length"]);
      }
      return [aws, http];
    };
    function addFlags(http, subsegment, err) {
      var _a, _b, _c;
      if (err && (0, service_error_classification_1.isThrottlingError)(err)) {
        subsegment.addThrottleFlag();
      } else if (safeParseInt((_a = http.response) === null || _a === void 0 ? void 0 : _a.status) === 429 || safeParseInt((_b = err === null || err === void 0 ? void 0 : err.$metadata) === null || _b === void 0 ? void 0 : _b.httpStatusCode) === 429) {
        subsegment.addThrottleFlag();
      }
      const cause = (0, utils_1.getCauseTypeFromHttpStatus)(safeParseInt((_c = http.response) === null || _c === void 0 ? void 0 : _c.status));
      if (cause === "fault") {
        subsegment.addFaultFlag();
      } else if (cause === "error") {
        subsegment.addErrorFlag();
      }
    }
    var getXRayMiddleware = (config, manualSegment) => (next, context) => async (args) => {
      var _a;
      const segment = contextUtils.isAutomaticMode() ? contextUtils.resolveSegment() : manualSegment;
      const { clientName, commandName } = context;
      const commandInput = (_a = args === null || args === void 0 ? void 0 : args.input) !== null && _a !== void 0 ? _a : {};
      const commandOperation = commandName.slice(0, -7);
      const operation = commandOperation.charAt(0).toLowerCase() + commandOperation.slice(1);
      const service = clientName.slice(0, -6);
      if (!segment) {
        const output = service + "." + operation;
        if (!contextUtils.isAutomaticMode()) {
          logger2.getLogger().info("Call " + output + " requires a segment object passed to captureAWSv3Client for tracing in manual mode. Ignoring.");
        } else {
          logger2.getLogger().info("Call " + output + " is missing the sub/segment context for automatic mode. Ignoring.");
        }
        return next(args);
      }
      let subsegment;
      if (segment.notTraced) {
        subsegment = segment.addNewSubsegmentWithoutSampling(service);
      } else {
        subsegment = segment.addNewSubsegment(service);
      }
      subsegment.addAttribute("namespace", "aws");
      const parent = segment instanceof subsegment_1.default ? segment.segment : segment;
      const data = parent.segment ? parent.segment.additionalTraceData : parent.additionalTraceData;
      let traceHeader = (0, querystring_1.stringify)({
        Root: parent.trace_id,
        Parent: subsegment.id,
        Sampled: subsegment.notTraced ? "0" : "1"
      }, ";");
      if (data != null) {
        for (const [key, value] of Object.entries(data)) {
          traceHeader += ";" + key + "=" + value;
        }
      }
      args.request.headers["X-Amzn-Trace-Id"] = traceHeader;
      let res;
      try {
        res = await next(args);
        if (!res) {
          throw new Error("Failed to get response from instrumented AWS Client.");
        }
        const [aws, http] = await buildAttributesFromMetadata(service, operation, await config.region(), commandInput, res, null);
        subsegment.addAttribute("aws", aws);
        subsegment.addAttribute("http", http);
        addFlags(http, subsegment);
        subsegment.close();
        return res;
      } catch (err) {
        if (err.$metadata) {
          const [aws, http] = await buildAttributesFromMetadata(service, operation, await config.region(), commandInput, null, err);
          subsegment.addAttribute("aws", aws);
          subsegment.addAttribute("http", http);
          addFlags(http, subsegment, err);
        }
        const errObj = { message: err.message, name: err.name, stack: err.stack || new Error().stack };
        subsegment.close(errObj, true);
        throw err;
      }
    };
    var xRayMiddlewareOptions = {
      name: XRAY_PLUGIN_NAME,
      step: "build"
    };
    var getXRayPlugin = (config, manualSegment) => ({
      applyToStack: (stack) => {
        stack.add(getXRayMiddleware(config, manualSegment), xRayMiddlewareOptions);
      }
    });
    function captureAWSClient(client, manualSegment) {
      client.middlewareStack.remove(XRAY_PLUGIN_NAME);
      client.middlewareStack.use(getXRayPlugin(client.config, manualSegment));
      return client;
    }
    exports.captureAWSClient = captureAWSClient;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/patchers/http_p.js
var require_http_p = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/patchers/http_p.js"(exports, module2) {
    "use strict";
    var url = require("url");
    var contextUtils = require_context_utils();
    var Utils = require_utils6();
    var logger2 = require_logger3();
    var events = require("events");
    var captureHTTPsGlobal = function captureHTTPsGlobal2(module3, downstreamXRayEnabled, subsegmentCallback) {
      if (!module3.__request) {
        enableCapture(module3, downstreamXRayEnabled, subsegmentCallback);
      }
    };
    var captureHTTPs = function captureHTTPs2(module3, downstreamXRayEnabled, subsegmentCallback) {
      if (module3.__request) {
        return module3;
      }
      var tracedModule = {};
      Object.keys(module3).forEach(function(val2) {
        tracedModule[val2] = module3[val2];
      });
      enableCapture(tracedModule, downstreamXRayEnabled, subsegmentCallback);
      return tracedModule;
    };
    function enableCapture(module3, downstreamXRayEnabled, subsegmentCallback) {
      function captureOutgoingHTTPs(baseFunc, ...args) {
        let options;
        let callback;
        let hasUrl;
        let urlObj;
        let arg0 = args[0];
        if (typeof args[1] === "object") {
          hasUrl = true;
          urlObj = typeof arg0 === "string" ? new url.URL(arg0) : arg0;
          options = args[1], callback = args[2];
        } else {
          hasUrl = false;
          options = arg0;
          callback = args[1];
        }
        if (!options || options.headers && options.headers["X-Amzn-Trace-Id"]) {
          return baseFunc(...args);
        }
        if (typeof options === "string") {
          options = new url.URL(options);
        }
        if (!hasUrl) {
          urlObj = options;
        }
        const parent = contextUtils.resolveSegment(contextUtils.resolveManualSegmentParams(options));
        const hostname = options.hostname || options.host || urlObj.hostname || urlObj.host || "Unknown host";
        if (!parent) {
          let output = "[ host: " + hostname;
          output = options.method ? output + ", method: " + options.method : output;
          output += ", path: " + (urlObj.pathname || Utils.stripQueryStringFromPath(options.path)) + " ]";
          if (!contextUtils.isAutomaticMode()) {
            logger2.getLogger().info("Options for request " + output + ' requires a segment object on the options params as "XRaySegment" for tracing in manual mode. Ignoring.');
          } else {
            logger2.getLogger().info("Options for request " + output + " is missing the sub/segment context for automatic mode. Ignoring.");
          }
          return baseFunc(...args);
        }
        let subsegment;
        if (parent.notTraced) {
          subsegment = parent.addNewSubsegmentWithoutSampling(hostname);
        } else {
          subsegment = parent.addNewSubsegment(hostname);
        }
        const root = parent.segment ? parent.segment : parent;
        subsegment.namespace = "remote";
        if (!options.headers) {
          options.headers = {};
        }
        options.headers["X-Amzn-Trace-Id"] = "Root=" + root.trace_id + ";Parent=" + subsegment.id + ";Sampled=" + (subsegment.notTraced ? "0" : "1");
        const errorCapturer = function errorCapturer2(e) {
          if (subsegmentCallback) {
            subsegmentCallback(subsegment, this, null, e);
          }
          if (subsegment.http && subsegment.http.response) {
            if (Utils.getCauseTypeFromHttpStatus(subsegment.http.response.status) === "error") {
              subsegment.addErrorFlag();
            }
            subsegment.close(e, true);
          } else {
            const madeItToDownstream = e.code !== "ECONNREFUSED";
            subsegment.addRemoteRequestData(this, null, madeItToDownstream && downstreamXRayEnabled);
            subsegment.close(e);
          }
        };
        const optionsCopy = Utils.objectWithoutProperties(options, ["Segment"], true);
        let req = baseFunc(...hasUrl ? [arg0, optionsCopy] : [options], function(res) {
          res.on("end", function() {
            if (subsegmentCallback) {
              subsegmentCallback(subsegment, this.req, res);
            }
            if (res.statusCode === 429) {
              subsegment.addThrottleFlag();
            }
            const cause = Utils.getCauseTypeFromHttpStatus(res.statusCode);
            if (cause) {
              subsegment[cause] = true;
            }
            subsegment.addRemoteRequestData(res.req, res, !!downstreamXRayEnabled);
            subsegment.close();
          });
          if (typeof callback === "function") {
            if (contextUtils.isAutomaticMode()) {
              const session = contextUtils.getNamespace();
              session.run(function() {
                contextUtils.setSegment(subsegment);
                callback(res);
              });
            } else {
              callback(res);
            }
          } else if (res.req && res.req.listenerCount("response") === 0) {
            res.resume();
          }
        });
        req.on(events.errorMonitor || "error", errorCapturer);
        return req;
      }
      module3.__request = module3.request;
      function captureHTTPsRequest(...args) {
        return captureOutgoingHTTPs(module3.__request, ...args);
      }
      module3.__get = module3.get;
      function captureHTTPsGet(...args) {
        return captureOutgoingHTTPs(module3.__get, ...args);
      }
      Object.defineProperties(module3, {
        request: { value: captureHTTPsRequest, configurable: true, enumerable: true, writable: true },
        get: { value: captureHTTPsGet, configurable: true, enumerable: true, writable: true }
      });
    }
    module2.exports.captureHTTPsGlobal = captureHTTPsGlobal;
    module2.exports.captureHTTPs = captureHTTPs;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/patchers/promise_p.js
var require_promise_p = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/patchers/promise_p.js"(exports, module2) {
    "use strict";
    var contextUtils = require_context_utils();
    var originalThen = Symbol("original then");
    var originalCatch = Symbol("original catch");
    function patchPromise(Promise2) {
      const then = Promise2.prototype.then;
      if (!then[originalThen]) {
        Promise2.prototype.then = function(onFulfilled, onRejected) {
          if (contextUtils.isAutomaticMode() && tryGetCurrentSegment()) {
            const ns = contextUtils.getNamespace();
            onFulfilled = onFulfilled && ns.bind(onFulfilled);
            onRejected = onRejected && ns.bind(onRejected);
          }
          return then.call(this, onFulfilled, onRejected);
        };
        Promise2.prototype.then[originalThen] = then;
      }
      const origCatch = Promise2.prototype.catch;
      if (origCatch && !origCatch[originalCatch]) {
        Promise2.prototype.catch = function(onRejected) {
          if (contextUtils.isAutomaticMode() && tryGetCurrentSegment()) {
            const ns = contextUtils.getNamespace();
            onRejected = onRejected && ns.bind(onRejected);
          }
          return origCatch.call(this, onRejected);
        };
        Promise2.prototype.catch[originalCatch] = origCatch;
      }
    }
    function unpatchPromise(Promise2) {
      const then = Promise2.prototype.then;
      if (then[originalThen]) {
        Promise2.prototype.then = then[originalThen];
      }
      const origCatch = Promise2.prototype.catch;
      if (origCatch && origCatch[originalCatch]) {
        Promise2.prototype.catch = origCatch[originalCatch];
      }
    }
    function tryGetCurrentSegment() {
      try {
        return contextUtils.getSegment();
      } catch (e) {
        return void 0;
      }
    }
    function capturePromise() {
      patchPromise(Promise);
    }
    function uncapturePromise() {
      unpatchPromise(Promise);
    }
    capturePromise.patchThirdPartyPromise = patchPromise;
    module2.exports.capturePromise = capturePromise;
    module2.exports.uncapturePromise = uncapturePromise;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/database/sql_data.js
var require_sql_data = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/database/sql_data.js"(exports, module2) {
    "use strict";
    function SqlData(databaseVer, driverVer, user, url, queryType) {
      this.init(databaseVer, driverVer, user, url, queryType);
    }
    SqlData.prototype.init = function init(databaseVer, driverVer, user, url, queryType) {
      if (databaseVer) {
        this.database_version = databaseVer;
      }
      if (driverVer) {
        this.driver_version = driverVer;
      }
      if (queryType) {
        this.preparation = queryType;
      }
      this.url = url;
      this.user = user;
    };
    module2.exports = SqlData;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/aws-xray.js
var require_aws_xray = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/aws-xray.js"(exports, module2) {
    "use strict";
    var contextUtils = require_context_utils();
    var logging = require_logger3();
    var segmentUtils = require_segment_utils();
    var utils = require_utils6();
    var LambdaEnv = require_aws_lambda();
    var pkginfo = {};
    try {
      pkginfo = require_package4();
    } catch (err) {
      logging.getLogger().debug("Failed to load SDK data:", err);
    }
    var UNKNOWN = "unknown";
    var AWSXRay = {
      /**
       * @memberof AWSXRay
       * @type {object}
       * @namespace AWSXRay.plugins
       */
      plugins: {
        /**
         * Exposes the AWS EC2 plugin.
         * @memberof AWSXRay.plugins
         */
        EC2Plugin: require_ec2_plugin(),
        /**
         * Exposes the AWS ECS plugin.
         * @memberof AWSXRay.plugins
         */
        ECSPlugin: require_ecs_plugin(),
        /**
         * Exposes the AWS Elastic Beanstalk plugin.
         * @memberof AWSXRay.plugins
         */
        ElasticBeanstalkPlugin: require_elastic_beanstalk_plugin()
      },
      /**
       * Enables use of plugins to capture additional data for segments.
       * @param {Array} plugins - A configurable subset of AWSXRay.plugins.
       * @memberof AWSXRay
       * @see AWSXRay.plugins
       */
      config: function(plugins) {
        var pluginData = {};
        plugins.forEach(function(plugin) {
          plugin.getData(function(data) {
            if (data) {
              for (var attribute in data) {
                pluginData[attribute] = data[attribute];
              }
            }
          });
          segmentUtils.setOrigin(plugin.originName);
          segmentUtils.setPluginData(pluginData);
        });
      },
      /**
       * Overrides the default whitelisting file to specify what params to capture on each AWS Service call.
       * If a service or API is not listed, no additional data is captured.
       * The base whitelisting file can be found at /lib/resources/aws_whitelist.json
       * @param {string|Object} source - The path to the custom whitelist file, or a whitelist source JSON object.
       * @memberof AWSXRay
       */
      setAWSWhitelist: require_aws2().setAWSWhitelist,
      /**
       * Appends to the current whitelisting file.
       * In the case of a duplicate service API listed, the new source will override the previous values.
       * @param {string|Object} source - The path to the custom whitelist file, or a whitelist source JSON object.
       * @memberof AWSXRay
       */
      appendAWSWhitelist: require_aws2().appendAWSWhitelist,
      /**
       * Overrides the default streaming threshold (100).
       * The threshold represents the maximum number of subsegments on a single segment before
       * the SDK begins to send the completed subsegments out of band of the main segment.
       * Reduce this threshold if you see the 'Segment too large to send' error.
       * @param {number} threshold - The new threshold to use.
       * @memberof AWSXRay
       */
      setStreamingThreshold: segmentUtils.setStreamingThreshold,
      /**
       * Set your own logger for the SDK.
       * @param {Object} logger - A logger which responds to debug/info/warn/error calls.
       * @memberof AWSXRay
       */
      setLogger: logging.setLogger,
      /**
       * Gets the set logger for the SDK.
       * @memberof AWSXRay
       */
      getLogger: logging.getLogger,
      /**
       * Configures the address and port the daemon is expected to be on.
       * @param {string} address - Address of the daemon the segments should be sent to.  Expects 'x.x.x.x', ':yyyy' or 'x.x.x.x:yyyy' IPv4 formats.
       * @module DaemonConfig
       * @memberof AWSXRay
       * @function
       * @see module:DaemonConfig.setDaemonAddress
       */
      setDaemonAddress: require_daemon_config().setDaemonAddress,
      /**
       * @param {string} name - The name of the new subsegment.
       * @param {function} fcn - The function conext to wrap.
       * @param {Segment|Subsegment} [parent] - The parent for the new subsegment, for manual mode.
       * @memberof AWSXRay
       * @function
       * @see module:capture.captureFunc
       */
      captureFunc: require_capture().captureFunc,
      /**
       * @param {string} name - The name of the new subsegment.
       * @param {function} fcn - The function conext to wrap.
       * @param {Segment|Subsegment} [parent] - The parent for the new subsegment, for manual mode.
       * @memberof AWSXRay
       * @function
       * @see module:capture.captureAsyncFunc
       */
      captureAsyncFunc: require_capture().captureAsyncFunc,
      /**
       * @param {string} name - The name of the new subsegment.
       * @param {function} fcn - The function conext to wrap.
       * @param {Segment|Subsegment} [parent] - The parent for the new subsegment, for manual mode.
       * @memberof AWSXRay
       * @function
       * @see module:capture.captureCallbackFunc
       */
      captureCallbackFunc: require_capture().captureCallbackFunc,
      /**
       * @param {AWS} awssdk - The Javascript AWS SDK.
       * @memberof AWSXRay
       * @function
       * @see module:aws_p.captureAWS
       */
      captureAWS: require_aws_p().captureAWS,
      /**
       * @param {AWS.Service} service - An instance of a AWS service to wrap.
       * @memberof AWSXRay
       * @function
       * @see module:aws_p.captureAWSClient
       */
      captureAWSClient: require_aws_p().captureAWSClient,
      /**
       * @param {AWSv3.Service} service - An instance of a AWS SDK v3 service to wrap.
       * @param {Segment|Subsegment} segment - Optional segment for manual mode.
       * @memberof AWSXRay
       * @function
       * @see module:aws3_p.captureAWSClient
       */
      captureAWSv3Client: require_aws3_p().captureAWSClient,
      /**
       * @param {http|https} module - The built in Node.js HTTP or HTTPS module.
       * @memberof AWSXRay
       * @function
       * @returns {http|https}
       * @see module:http_p.captureHTTPs
       */
      captureHTTPs: require_http_p().captureHTTPs,
      /**
       * @param {http|https} module - The built in Node.js HTTP or HTTPS module.
       * @memberof AWSXRay
       * @function
       * @see module:http_p.captureHTTPsGlobal
       */
      captureHTTPsGlobal: require_http_p().captureHTTPsGlobal,
      /**
       * @memberof AWSXRay
       * @function
       * @see module:promise_p.capturePromise
       */
      capturePromise: require_promise_p().capturePromise,
      /**
       * Exposes various helper methods.
       * @memberof AWSXRay
       * @function
       * @see module:utils
       */
      utils,
      /**
       * @memberof AWSXRay
       * @type {object}
       * @namespace AWSXRay.database
       */
      database: {
        /**
         * Exposes the SqlData class.
         * @memberof AWSXRay.database
         * @see SqlData
         */
        SqlData: require_sql_data()
      },
      /**
       * Exposes the Middleware Utils class.
       * @memberof AWSXRay
       * @function
       * @see module:mw_utils
       */
      middleware: require_mw_utils(),
      /**
       * Gets the current namespace of the context.
       * Used for supporting functions that can be used in automatic mode.
       * @memberof AWSXRay
       * @function
       * @returns {Segment|Subsegment}
       * @see module:context_utils.getNamespace
       */
      getNamespace: contextUtils.getNamespace,
      /**
       * Resolves the current segment or subsegment, checks manual and automatic modes.
       * Used for supporting functions that can be used in both manual and automatic modes.
       * @memberof AWSXRay
       * @function
       * @returns {Segment|Subsegment}
       * @see module:context_utils.resolveSegment
       */
      resolveSegment: contextUtils.resolveSegment,
      /**
       * Returns the current segment or subsegment. For use with automatic mode only.
       * @memberof AWSXRay
       * @function
       * @returns {Segment|Subsegment}
       * @see module:context_utils.getSegment
       */
      getSegment: contextUtils.getSegment,
      /**
       * Sets the current segment or subsegment.  For use with automatic mode only.
       * @memberof AWSXRay
       * @function
       * @see module:context_utils.setSegment
       */
      setSegment: contextUtils.setSegment,
      /**
       * Returns true if automatic mode is enabled, otherwise false.
       * @memberof AWSXRay
       * @function
       * @see module:context_utils.isAutomaticMode
       */
      isAutomaticMode: contextUtils.isAutomaticMode,
      /**
       * Enables automatic mode. Automatic mode uses 'cls-hooked'.
       * @see https://github.com/jeff-lewis/cls-hooked
       * @memberof AWSXRay
       * @function
       * @see module:context_utils.enableAutomaticMode
       */
      enableAutomaticMode: contextUtils.enableAutomaticMode,
      /**
       * Disables automatic mode. Current segment or subsegment must be passed manually
       * via the parent optional on captureFunc, captureAsyncFunc etc.
       * @memberof AWSXRay
       * @function
       * @see module:context_utils.enableManualMode
       */
      enableManualMode: contextUtils.enableManualMode,
      /**
       * Sets the context missing strategy.
       * @param {Object} strategy - The strategy to set. This object's contextMissing function will be called whenever trace context is not found.
       */
      setContextMissingStrategy: contextUtils.setContextMissingStrategy,
      /**
       * Exposes the segment class.
       * @memberof AWSXRay
       * @function
       */
      Segment: require_segment(),
      /**
       * Exposes the subsegment class.
       * @memberof AWSXRay
       * @see Subsegment
       */
      Subsegment: require_subsegment(),
      SegmentUtils: segmentUtils
    };
    AWSXRay.middleware.IncomingRequestData = require_incoming_request_data(), function() {
      var data = {
        runtime: process.release && process.release.name ? process.release.name : UNKNOWN,
        runtime_version: process.version,
        version: process.env.npm_package_version || UNKNOWN,
        name: process.env.npm_package_name || UNKNOWN
      };
      var sdkData = {
        sdk: "X-Ray for Node.js",
        sdk_version: pkginfo.version ? pkginfo.version : UNKNOWN,
        package: pkginfo.name ? pkginfo.name : UNKNOWN
      };
      segmentUtils.setSDKData(sdkData);
      segmentUtils.setServiceData(data);
      if (process.env.LAMBDA_TASK_ROOT) {
        LambdaEnv.init();
      }
    }();
    module2.exports = AWSXRay;
  }
});

// node_modules/aws-xray-sdk-core/dist/lib/index.js
var require_lib5 = __commonJS({
  "node_modules/aws-xray-sdk-core/dist/lib/index.js"(exports, module2) {
    "use strict";
    module2.exports = require_aws_xray();
  }
});

// node_modules/@aws-lambda-powertools/tracer/lib/provider/ProviderService.js
var require_ProviderService = __commonJS({
  "node_modules/@aws-lambda-powertools/tracer/lib/provider/ProviderService.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProviderService = void 0;
    var aws_xray_sdk_core_1 = require_lib5();
    var commons_1 = require_lib3();
    var ProviderService = class {
      captureAWS(awssdk) {
        return (0, aws_xray_sdk_core_1.captureAWS)(awssdk);
      }
      captureAWSClient(service) {
        return (0, aws_xray_sdk_core_1.captureAWSClient)(service);
      }
      captureAWSv3Client(service) {
        (0, commons_1.addUserAgentMiddleware)(service, "tracer");
        return (0, aws_xray_sdk_core_1.captureAWSv3Client)(service);
      }
      captureAsyncFunc(name, fcn, _parent) {
        return (0, aws_xray_sdk_core_1.captureAsyncFunc)(name, fcn);
      }
      captureFunc(name, fcn, _parent) {
        return (0, aws_xray_sdk_core_1.captureFunc)(name, fcn);
      }
      captureHTTPsGlobal() {
        (0, aws_xray_sdk_core_1.captureHTTPsGlobal)(require("http"));
        (0, aws_xray_sdk_core_1.captureHTTPsGlobal)(require("https"));
      }
      getNamespace() {
        return (0, aws_xray_sdk_core_1.getNamespace)();
      }
      getSegment() {
        return (0, aws_xray_sdk_core_1.getSegment)();
      }
      putAnnotation(key, value) {
        const segment = this.getSegment();
        if (segment === void 0) {
          console.warn("No active segment or subsegment found, skipping annotation");
          return;
        }
        if (segment instanceof aws_xray_sdk_core_1.Segment) {
          console.warn("You cannot annotate the main segment in a Lambda execution environment");
          return;
        }
        segment.addAnnotation(key, value);
      }
      putMetadata(key, value, namespace) {
        const segment = this.getSegment();
        if (segment === void 0) {
          console.warn("No active segment or subsegment found, skipping metadata addition");
          return;
        }
        if (segment instanceof aws_xray_sdk_core_1.Segment) {
          console.warn("You cannot add metadata to the main segment in a Lambda execution environment");
          return;
        }
        segment.addMetadata(key, value, namespace);
      }
      setContextMissingStrategy(strategy) {
        (0, aws_xray_sdk_core_1.setContextMissingStrategy)(strategy);
      }
      setDaemonAddress(address) {
        (0, aws_xray_sdk_core_1.setDaemonAddress)(address);
      }
      setLogger(logObj) {
        (0, aws_xray_sdk_core_1.setLogger)(logObj);
      }
      setSegment(segment) {
        (0, aws_xray_sdk_core_1.setSegment)(segment);
      }
    };
    exports.ProviderService = ProviderService;
  }
});

// node_modules/@aws-lambda-powertools/tracer/lib/provider/ProviderServiceInterface.js
var require_ProviderServiceInterface = __commonJS({
  "node_modules/@aws-lambda-powertools/tracer/lib/provider/ProviderServiceInterface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-lambda-powertools/tracer/lib/provider/index.js
var require_provider = __commonJS({
  "node_modules/@aws-lambda-powertools/tracer/lib/provider/index.js"(exports) {
    "use strict";
    var __createBinding3 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar3 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding3(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar3(require_ProviderService(), exports);
    __exportStar3(require_ProviderServiceInterface(), exports);
  }
});

// node_modules/@aws-lambda-powertools/tracer/lib/Tracer.js
var require_Tracer = __commonJS({
  "node_modules/@aws-lambda-powertools/tracer/lib/Tracer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Tracer = void 0;
    var commons_1 = require_lib3();
    var config_1 = require_config7();
    var provider_1 = require_provider();
    var aws_xray_sdk_core_1 = require_lib5();
    var Tracer2 = class extends commons_1.Utility {
      constructor(options = {}) {
        super();
        this.captureError = true;
        this.captureHTTPsRequests = true;
        this.captureResponse = true;
        this.tracingEnabled = true;
        this.setOptions(options);
        this.provider = new provider_1.ProviderService();
        if (this.isTracingEnabled() && this.captureHTTPsRequests) {
          this.provider.captureHTTPsGlobal();
        }
        if (!this.isTracingEnabled()) {
          this.provider.setContextMissingStrategy(() => ({}));
        }
      }
      addErrorAsMetadata(error, remote) {
        if (!this.isTracingEnabled()) {
          return;
        }
        const subsegment = this.getSegment();
        if (subsegment === void 0) {
          return;
        }
        if (!this.captureError) {
          subsegment.addErrorFlag();
          return;
        }
        subsegment.addError(error, remote || false);
      }
      addResponseAsMetadata(data, methodName) {
        if (data === void 0 || !this.captureResponse || !this.isTracingEnabled()) {
          return;
        }
        this.putMetadata(`${methodName} response`, data);
      }
      addServiceNameAnnotation() {
        if (!this.isTracingEnabled()) {
          return;
        }
        this.putAnnotation("Service", this.serviceName);
      }
      annotateColdStart() {
        if (this.isTracingEnabled()) {
          this.putAnnotation("ColdStart", this.getColdStart());
        }
      }
      captureAWS(aws) {
        if (!this.isTracingEnabled())
          return aws;
        return this.provider.captureAWS(aws);
      }
      captureAWSClient(service) {
        if (!this.isTracingEnabled())
          return service;
        try {
          return this.provider.captureAWSClient(service);
        } catch (error) {
          try {
            this.provider.captureAWSClient(service.service);
            return service;
          } catch {
            throw error;
          }
        }
      }
      captureAWSv3Client(service) {
        if (!this.isTracingEnabled())
          return service;
        return this.provider.captureAWSv3Client(service);
      }
      captureLambdaHandler(options) {
        return (_target, _propertyKey, descriptor) => {
          const originalMethod = descriptor.value;
          const tracerRef = this;
          descriptor.value = function(event, context, callback) {
            const handlerRef = this;
            if (!tracerRef.isTracingEnabled()) {
              return originalMethod.apply(handlerRef, [event, context, callback]);
            }
            return tracerRef.provider.captureAsyncFunc(`## ${process.env._HANDLER}`, async (subsegment) => {
              tracerRef.annotateColdStart();
              tracerRef.addServiceNameAnnotation();
              let result;
              try {
                result = await originalMethod.apply(handlerRef, [
                  event,
                  context,
                  callback
                ]);
                if (options?.captureResponse ?? true) {
                  tracerRef.addResponseAsMetadata(result, process.env._HANDLER);
                }
              } catch (error) {
                tracerRef.addErrorAsMetadata(error);
                throw error;
              } finally {
                try {
                  subsegment?.close();
                } catch (error) {
                  console.warn(`Failed to close or serialize segment, ${subsegment?.name}. We are catching the error but data might be lost.`, error);
                }
              }
              return result;
            });
          };
          return descriptor;
        };
      }
      captureMethod(options) {
        return (_target, propertyKey, descriptor) => {
          const originalMethod = descriptor.value;
          const tracerRef = this;
          descriptor.value = function(...args) {
            if (!tracerRef.isTracingEnabled()) {
              return originalMethod.apply(this, [...args]);
            }
            const methodName = String(propertyKey);
            const subsegmentName = options?.subSegmentName ? options.subSegmentName : `### ${methodName}`;
            return tracerRef.provider.captureAsyncFunc(subsegmentName, async (subsegment) => {
              let result;
              try {
                result = await originalMethod.apply(this, [...args]);
                if (options?.captureResponse ?? true) {
                  tracerRef.addResponseAsMetadata(result, methodName);
                }
              } catch (error) {
                tracerRef.addErrorAsMetadata(error);
                throw error;
              } finally {
                try {
                  subsegment?.close();
                } catch (error) {
                  console.warn(`Failed to close or serialize segment, ${subsegment?.name}. We are catching the error but data might be lost.`, error);
                }
              }
              return result;
            });
          };
          return descriptor;
        };
      }
      getRootXrayTraceId() {
        return this.envVarsService.getXrayTraceId();
      }
      getSegment() {
        if (!this.isTracingEnabled()) {
          return new aws_xray_sdk_core_1.Subsegment("## Dummy segment");
        }
        const segment = this.provider.getSegment();
        if (segment === void 0) {
          console.warn("Failed to get the current sub/segment from the context, this is likely because you are not using the Tracer in a Lambda function.");
        }
        return segment;
      }
      isTraceSampled() {
        if (!this.isTracingEnabled())
          return false;
        return this.envVarsService.getXrayTraceSampled();
      }
      isTracingEnabled() {
        return this.tracingEnabled;
      }
      putAnnotation(key, value) {
        if (!this.isTracingEnabled())
          return;
        this.provider.putAnnotation(key, value);
      }
      putMetadata(key, value, namespace) {
        if (!this.isTracingEnabled())
          return;
        this.provider.putMetadata(key, value, namespace || this.serviceName);
      }
      setSegment(segment) {
        if (!this.isTracingEnabled())
          return;
        return this.provider.setSegment(segment);
      }
      getCustomConfigService() {
        return this.customConfigService;
      }
      getEnvVarsService() {
        return this.envVarsService;
      }
      isAmplifyCli() {
        return this.getEnvVarsService().getAwsExecutionEnv() === "AWS_Lambda_amplify-mock";
      }
      isLambdaExecutionEnv() {
        return this.getEnvVarsService().getAwsExecutionEnv() !== "";
      }
      isLambdaSamCli() {
        return this.getEnvVarsService().getSamLocal() !== "";
      }
      setCaptureError() {
        const customConfigValue = this.getCustomConfigService()?.getTracingCaptureError();
        if (customConfigValue !== void 0 && customConfigValue.toLowerCase() === "false") {
          this.captureError = false;
          return;
        }
        const envVarsValue = this.getEnvVarsService().getTracingCaptureError();
        if (envVarsValue.toLowerCase() === "false") {
          this.captureError = false;
          return;
        }
      }
      setCaptureHTTPsRequests(enabled) {
        if (enabled !== void 0 && !enabled) {
          this.captureHTTPsRequests = false;
          return;
        }
        const customConfigValue = this.getCustomConfigService()?.getCaptureHTTPsRequests();
        if (customConfigValue !== void 0 && customConfigValue.toLowerCase() === "false") {
          this.captureHTTPsRequests = false;
          return;
        }
        const envVarsValue = this.getEnvVarsService().getCaptureHTTPsRequests();
        if (envVarsValue.toLowerCase() === "false") {
          this.captureHTTPsRequests = false;
          return;
        }
      }
      setCaptureResponse() {
        const customConfigValue = this.getCustomConfigService()?.getTracingCaptureResponse();
        if (customConfigValue !== void 0 && customConfigValue.toLowerCase() === "false") {
          this.captureResponse = false;
          return;
        }
        const envVarsValue = this.getEnvVarsService().getTracingCaptureResponse();
        if (envVarsValue.toLowerCase() === "false") {
          this.captureResponse = false;
          return;
        }
      }
      setCustomConfigService(customConfigService) {
        this.customConfigService = customConfigService ? customConfigService : void 0;
      }
      setEnvVarsService() {
        this.envVarsService = new config_1.EnvironmentVariablesService();
      }
      setOptions(options) {
        const { enabled, serviceName: serviceName2, captureHTTPsRequests, customConfigService } = options;
        this.setEnvVarsService();
        this.setCustomConfigService(customConfigService);
        this.setTracingEnabled(enabled);
        this.setCaptureResponse();
        this.setCaptureError();
        this.setServiceName(serviceName2);
        this.setCaptureHTTPsRequests(captureHTTPsRequests);
        return this;
      }
      setServiceName(serviceName2) {
        if (serviceName2 !== void 0 && this.isValidServiceName(serviceName2)) {
          this.serviceName = serviceName2;
          return;
        }
        const customConfigValue = this.getCustomConfigService()?.getServiceName();
        if (customConfigValue !== void 0 && this.isValidServiceName(customConfigValue)) {
          this.serviceName = customConfigValue;
          return;
        }
        const envVarsValue = this.getEnvVarsService().getServiceName();
        if (envVarsValue !== void 0 && this.isValidServiceName(envVarsValue)) {
          this.serviceName = envVarsValue;
          return;
        }
        this.serviceName = this.getDefaultServiceName();
      }
      setTracingEnabled(enabled) {
        if (enabled !== void 0 && !enabled) {
          this.tracingEnabled = enabled;
          return;
        }
        const customConfigValue = this.getCustomConfigService()?.getTracingEnabled();
        if (customConfigValue !== void 0 && customConfigValue.toLowerCase() === "false") {
          this.tracingEnabled = false;
          return;
        }
        const envVarsValue = this.getEnvVarsService().getTracingEnabled();
        if (envVarsValue.toLowerCase() === "false") {
          this.tracingEnabled = false;
          return;
        }
        if (this.isAmplifyCli() || this.isLambdaSamCli() || !this.isLambdaExecutionEnv()) {
          this.tracingEnabled = false;
        }
      }
    };
    exports.Tracer = Tracer2;
  }
});

// node_modules/@aws-lambda-powertools/tracer/lib/TracerInterface.js
var require_TracerInterface = __commonJS({
  "node_modules/@aws-lambda-powertools/tracer/lib/TracerInterface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-lambda-powertools/tracer/lib/middleware/middy.js
var require_middy3 = __commonJS({
  "node_modules/@aws-lambda-powertools/tracer/lib/middleware/middy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.captureLambdaHandler = void 0;
    var middleware_1 = require_middleware3();
    var captureLambdaHandler2 = (target, options) => {
      let lambdaSegment;
      let handlerSegment;
      const setCleanupFunction = (request) => {
        request.internal = {
          ...request.internal,
          [middleware_1.TRACER_KEY]: close
        };
      };
      const open = () => {
        const segment = target.getSegment();
        if (segment === void 0) {
          return;
        }
        lambdaSegment = segment;
        handlerSegment = lambdaSegment.addNewSubsegment(`## ${process.env._HANDLER}`);
        target.setSegment(handlerSegment);
      };
      const close = () => {
        if (handlerSegment === void 0 || lambdaSegment === null) {
          return;
        }
        try {
          handlerSegment.close();
        } catch (error) {
          console.warn(`Failed to close or serialize segment, ${handlerSegment.name}. We are catching the error but data might be lost.`, error);
        }
        target.setSegment(lambdaSegment);
      };
      const captureLambdaHandlerBefore = async (request) => {
        if (target.isTracingEnabled()) {
          open();
          setCleanupFunction(request);
          target.annotateColdStart();
          target.addServiceNameAnnotation();
        }
      };
      const captureLambdaHandlerAfter = async (request) => {
        if (target.isTracingEnabled()) {
          if (options?.captureResponse ?? true) {
            target.addResponseAsMetadata(request.response, process.env._HANDLER);
          }
          close();
        }
      };
      const captureLambdaHandlerError = async (request) => {
        if (target.isTracingEnabled()) {
          target.addErrorAsMetadata(request.error);
          close();
        }
      };
      return {
        before: captureLambdaHandlerBefore,
        after: captureLambdaHandlerAfter,
        onError: captureLambdaHandlerError
      };
    };
    exports.captureLambdaHandler = captureLambdaHandler2;
  }
});

// node_modules/@aws-lambda-powertools/tracer/lib/index.js
var require_lib6 = __commonJS({
  "node_modules/@aws-lambda-powertools/tracer/lib/index.js"(exports) {
    "use strict";
    var __createBinding3 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar3 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding3(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar3(require_helpers3(), exports);
    __exportStar3(require_Tracer(), exports);
    __exportStar3(require_TracerInterface(), exports);
    __exportStar3(require_middy3(), exports);
  }
});

// test/r53writer/writeDatabase.ts
var writeDatabase_exports = {};
__export(writeDatabase_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(writeDatabase_exports);

// src/database.ts
var import_client_dynamodb = __toESM(require_dist_cjs57());
var import_lib_dynamodb = __toESM(require_dist_cjs59());
var import_electrodb = __toESM(require_electrodb());

// src/runtime.ts
var import_logger = __toESM(require_lib4());
var import_tracer = __toESM(require_lib6());
var serviceName = "cdk-ecs-dns";
var tracer = new import_tracer.Tracer({
  serviceName
});
var logger = new import_logger.Logger({
  serviceName
});

// src/database.ts
var EcsTaskIps = new import_electrodb.Entity({
  model: {
    service: serviceName,
    entity: "EcsTaskIps",
    version: "1"
  },
  attributes: {
    taskArn: {
      type: "string",
      required: true
    },
    publicIps: {
      type: "set",
      items: "string",
      required: true,
      default: []
    },
    expiresAt: {
      type: "number"
    }
  },
  indexes: {
    main: {
      pk: {
        field: "pk",
        composite: ["taskArn"]
      },
      sk: {
        field: "sk",
        composite: []
      }
    }
  }
});
var DnsRecord = new import_electrodb.Entity({
  model: {
    service: serviceName,
    entity: "DnsRecord",
    version: "1"
  },
  attributes: {
    hostedZoneId: {
      type: "string",
      required: true
    },
    name: {
      type: "string",
      required: true
    },
    version: {
      type: "number",
      required: true,
      default: 0
    },
    ips: {
      type: "set",
      items: "string",
      required: true,
      default: []
    }
  },
  indexes: {
    main: {
      pk: {
        field: "pk",
        composite: ["hostedZoneId"]
      },
      sk: {
        field: "sk",
        composite: ["name"]
      }
    }
  }
});
var database = new import_electrodb.Service({
  EcsTaskIps,
  DnsRecord
}, {
  table: process.env.TABLE,
  client: import_lib_dynamodb.DynamoDBDocumentClient.from(new import_client_dynamodb.DynamoDBClient({}), {
    marshallOptions: {
      removeUndefinedValues: true,
      convertEmptyValues: true
    }
  })
});

// test/r53writer/writeDatabase.ts
async function handler(event) {
  console.log(event);
  await database.entities.DnsRecord.upsert(event).go();
  return "OK";
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
/*! Bundled license information:

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
*/
